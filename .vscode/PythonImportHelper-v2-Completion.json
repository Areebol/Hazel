[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "collections",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "collections",
        "description": "collections",
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "keywords",
        "importPath": "cpp",
        "description": "cpp",
        "isExtraImport": true,
        "detail": "cpp",
        "documentation": {}
    },
    {
        "label": "tokenize",
        "importPath": "cpp",
        "description": "cpp",
        "isExtraImport": true,
        "detail": "cpp",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "cpp",
        "description": "cpp",
        "isExtraImport": true,
        "detail": "cpp",
        "documentation": {}
    },
    {
        "label": "ast",
        "importPath": "cpp",
        "description": "cpp",
        "isExtraImport": true,
        "detail": "cpp",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "cpp",
        "description": "cpp",
        "isExtraImport": true,
        "detail": "cpp",
        "documentation": {}
    },
    {
        "label": "ast",
        "importPath": "cpp",
        "description": "cpp",
        "isExtraImport": true,
        "detail": "cpp",
        "documentation": {}
    },
    {
        "label": "gmock_class",
        "importPath": "cpp",
        "description": "cpp",
        "isExtraImport": true,
        "detail": "cpp",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "cpp",
        "description": "cpp",
        "isExtraImport": true,
        "detail": "cpp",
        "documentation": {}
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "fuse_gtest_files",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "fuse_gtest_files",
        "description": "fuse_gtest_files",
        "detail": "fuse_gtest_files",
        "documentation": {}
    },
    {
        "label": "gmock_test_utils",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gmock_test_utils",
        "description": "gmock_test_utils",
        "detail": "gmock_test_utils",
        "documentation": {}
    },
    {
        "label": "open",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "gtest_test_utils",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gtest_test_utils",
        "description": "gtest_test_utils",
        "detail": "gtest_test_utils",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "common",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "common",
        "description": "common",
        "detail": "common",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "cookielib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cookielib",
        "description": "cookielib",
        "detail": "cookielib",
        "documentation": {}
    },
    {
        "label": "getpass",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "getpass",
        "description": "getpass",
        "detail": "getpass",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "md5",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "md5",
        "description": "md5",
        "detail": "md5",
        "documentation": {}
    },
    {
        "label": "mimetypes",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mimetypes",
        "description": "mimetypes",
        "detail": "mimetypes",
        "documentation": {}
    },
    {
        "label": "optparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "optparse",
        "description": "optparse",
        "detail": "optparse",
        "documentation": {}
    },
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "urllib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib",
        "description": "urllib",
        "detail": "urllib",
        "documentation": {}
    },
    {
        "label": "urllib2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib2",
        "description": "urllib2",
        "detail": "urllib2",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urlparse",
        "description": "urlparse",
        "detail": "urlparse",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "gtest_json_test_utils",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gtest_json_test_utils",
        "description": "gtest_json_test_utils",
        "detail": "gtest_json_test_utils",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "errno",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "errno",
        "description": "errno",
        "detail": "errno",
        "documentation": {}
    },
    {
        "label": "difflib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "difflib",
        "description": "difflib",
        "detail": "difflib",
        "documentation": {}
    },
    {
        "label": "atexit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "atexit",
        "description": "atexit",
        "detail": "atexit",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "minidom",
        "importPath": "xml.dom",
        "description": "xml.dom",
        "isExtraImport": true,
        "detail": "xml.dom",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "xml.dom",
        "description": "xml.dom",
        "isExtraImport": true,
        "detail": "xml.dom",
        "documentation": {}
    },
    {
        "label": "minidom",
        "importPath": "xml.dom",
        "description": "xml.dom",
        "isExtraImport": true,
        "detail": "xml.dom",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "xml.dom",
        "description": "xml.dom",
        "isExtraImport": true,
        "detail": "xml.dom",
        "documentation": {}
    },
    {
        "label": "minidom",
        "importPath": "xml.dom",
        "description": "xml.dom",
        "isExtraImport": true,
        "detail": "xml.dom",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "xml.dom",
        "description": "xml.dom",
        "isExtraImport": true,
        "detail": "xml.dom",
        "documentation": {}
    },
    {
        "label": "gtest_xml_test_utils",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gtest_xml_test_utils",
        "description": "gtest_xml_test_utils",
        "detail": "gtest_xml_test_utils",
        "documentation": {}
    },
    {
        "label": "yaml",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yaml",
        "description": "yaml",
        "detail": "yaml",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "base_path",
        "kind": 5,
        "importPath": "Hazel.vendor.spdlog.scripts.extract_version",
        "description": "Hazel.vendor.spdlog.scripts.extract_version",
        "peekOfCode": "base_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))\nconfig_h = os.path.join(base_path, 'include', 'spdlog', 'version.h')\ndata = {'MAJOR': 0, 'MINOR': 0, 'PATCH': 0}\nreg = re.compile(r'^\\s*#define\\s+SPDLOG_VER_([A-Z]+)\\s+([0-9]+).*$')\nwith open(config_h, 'r') as fp:\n    for l in fp:\n        m = reg.match(l)\n        if m:\n            data[m.group(1)] = int(m.group(2))\nprint(f\"{data['MAJOR']}.{data['MINOR']}.{data['PATCH']}\")",
        "detail": "Hazel.vendor.spdlog.scripts.extract_version",
        "documentation": {}
    },
    {
        "label": "config_h",
        "kind": 5,
        "importPath": "Hazel.vendor.spdlog.scripts.extract_version",
        "description": "Hazel.vendor.spdlog.scripts.extract_version",
        "peekOfCode": "config_h = os.path.join(base_path, 'include', 'spdlog', 'version.h')\ndata = {'MAJOR': 0, 'MINOR': 0, 'PATCH': 0}\nreg = re.compile(r'^\\s*#define\\s+SPDLOG_VER_([A-Z]+)\\s+([0-9]+).*$')\nwith open(config_h, 'r') as fp:\n    for l in fp:\n        m = reg.match(l)\n        if m:\n            data[m.group(1)] = int(m.group(2))\nprint(f\"{data['MAJOR']}.{data['MINOR']}.{data['PATCH']}\")",
        "detail": "Hazel.vendor.spdlog.scripts.extract_version",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Hazel.vendor.spdlog.scripts.extract_version",
        "description": "Hazel.vendor.spdlog.scripts.extract_version",
        "peekOfCode": "data = {'MAJOR': 0, 'MINOR': 0, 'PATCH': 0}\nreg = re.compile(r'^\\s*#define\\s+SPDLOG_VER_([A-Z]+)\\s+([0-9]+).*$')\nwith open(config_h, 'r') as fp:\n    for l in fp:\n        m = reg.match(l)\n        if m:\n            data[m.group(1)] = int(m.group(2))\nprint(f\"{data['MAJOR']}.{data['MINOR']}.{data['PATCH']}\")",
        "detail": "Hazel.vendor.spdlog.scripts.extract_version",
        "documentation": {}
    },
    {
        "label": "reg",
        "kind": 5,
        "importPath": "Hazel.vendor.spdlog.scripts.extract_version",
        "description": "Hazel.vendor.spdlog.scripts.extract_version",
        "peekOfCode": "reg = re.compile(r'^\\s*#define\\s+SPDLOG_VER_([A-Z]+)\\s+([0-9]+).*$')\nwith open(config_h, 'r') as fp:\n    for l in fp:\n        m = reg.match(l)\n        if m:\n            data[m.group(1)] = int(m.group(2))\nprint(f\"{data['MAJOR']}.{data['MINOR']}.{data['PATCH']}\")",
        "detail": "Hazel.vendor.spdlog.scripts.extract_version",
        "documentation": {}
    },
    {
        "label": "_NullDict",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "class _NullDict(object):\n  __contains__ = lambda self: False\n  keys = values = items = iterkeys = itervalues = iteritems = lambda self: ()\n# TODO(nnorwitz): move AST nodes into a separate module.\nclass Node(object):\n  \"\"\"Base AST node.\"\"\"\n  def __init__(self, start, end):\n    self.start = start\n    self.end = end\n  def IsDeclaration(self):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "class Node(object):\n  \"\"\"Base AST node.\"\"\"\n  def __init__(self, start, end):\n    self.start = start\n    self.end = end\n  def IsDeclaration(self):\n    \"\"\"Returns bool if this node is a declaration.\"\"\"\n    return False\n  def IsDefinition(self):\n    \"\"\"Returns bool if this node is a definition.\"\"\"",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "Define",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "class Define(Node):\n  def __init__(self, start, end, name, definition):\n    Node.__init__(self, start, end)\n    self.name = name\n    self.definition = definition\n  def __str__(self):\n    value = '%s %s' % (self.name, self.definition)\n    return self._StringHelper(self.__class__.__name__, value)\nclass Include(Node):\n  def __init__(self, start, end, filename, system):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "Include",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "class Include(Node):\n  def __init__(self, start, end, filename, system):\n    Node.__init__(self, start, end)\n    self.filename = filename\n    self.system = system\n  def __str__(self):\n    fmt = '\"%s\"'\n    if self.system:\n      fmt = '<%s>'\n    return self._StringHelper(self.__class__.__name__, fmt % self.filename)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "Goto",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "class Goto(Node):\n  def __init__(self, start, end, label):\n    Node.__init__(self, start, end)\n    self.label = label\n  def __str__(self):\n    return self._StringHelper(self.__class__.__name__, str(self.label))\nclass Expr(Node):\n  def __init__(self, start, end, expr):\n    Node.__init__(self, start, end)\n    self.expr = expr",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "Expr",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "class Expr(Node):\n  def __init__(self, start, end, expr):\n    Node.__init__(self, start, end)\n    self.expr = expr\n  def Requires(self, node):\n    # TODO(nnorwitz): impl.\n    return False\n  def __str__(self):\n    return self._StringHelper(self.__class__.__name__, str(self.expr))\nclass Return(Expr):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "Return",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "class Return(Expr):\n  pass\nclass Delete(Expr):\n  pass\nclass Friend(Expr):\n  def __init__(self, start, end, expr, namespace):\n    Expr.__init__(self, start, end, expr)\n    self.namespace = namespace[:]\nclass Using(Node):\n  def __init__(self, start, end, names):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "Delete",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "class Delete(Expr):\n  pass\nclass Friend(Expr):\n  def __init__(self, start, end, expr, namespace):\n    Expr.__init__(self, start, end, expr)\n    self.namespace = namespace[:]\nclass Using(Node):\n  def __init__(self, start, end, names):\n    Node.__init__(self, start, end)\n    self.names = names",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "Friend",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "class Friend(Expr):\n  def __init__(self, start, end, expr, namespace):\n    Expr.__init__(self, start, end, expr)\n    self.namespace = namespace[:]\nclass Using(Node):\n  def __init__(self, start, end, names):\n    Node.__init__(self, start, end)\n    self.names = names\n  def __str__(self):\n    return self._StringHelper(self.__class__.__name__, str(self.names))",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "Using",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "class Using(Node):\n  def __init__(self, start, end, names):\n    Node.__init__(self, start, end)\n    self.names = names\n  def __str__(self):\n    return self._StringHelper(self.__class__.__name__, str(self.names))\nclass Parameter(Node):\n  def __init__(self, start, end, name, parameter_type, default):\n    Node.__init__(self, start, end)\n    self.name = name",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "Parameter",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "class Parameter(Node):\n  def __init__(self, start, end, name, parameter_type, default):\n    Node.__init__(self, start, end)\n    self.name = name\n    self.type = parameter_type\n    self.default = default\n  def Requires(self, node):\n    # TODO(nnorwitz): handle namespaces, etc.\n    return self.type.name == node.name\n  def __str__(self):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "_GenericDeclaration",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "class _GenericDeclaration(Node):\n  def __init__(self, start, end, name, namespace):\n    Node.__init__(self, start, end)\n    self.name = name\n    self.namespace = namespace[:]\n  def FullName(self):\n    prefix = ''\n    if self.namespace and self.namespace[-1]:\n      prefix = '::'.join(self.namespace) + '::'\n    return prefix + self.name",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "VariableDeclaration",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "class VariableDeclaration(_GenericDeclaration):\n  def __init__(self, start, end, name, var_type, initial_value, namespace):\n    _GenericDeclaration.__init__(self, start, end, name, namespace)\n    self.type = var_type\n    self.initial_value = initial_value\n  def Requires(self, node):\n    # TODO(nnorwitz): handle namespaces, etc.\n    return self.type.name == node.name\n  def ToString(self):\n    \"\"\"Return a string that tries to reconstitute the variable decl.\"\"\"",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "Typedef",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "class Typedef(_GenericDeclaration):\n  def __init__(self, start, end, name, alias, namespace):\n    _GenericDeclaration.__init__(self, start, end, name, namespace)\n    self.alias = alias\n  def IsDefinition(self):\n    return True\n  def IsExportable(self):\n    return True\n  def Requires(self, node):\n    # TODO(nnorwitz): handle namespaces, etc.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "_NestedType",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "class _NestedType(_GenericDeclaration):\n  def __init__(self, start, end, name, fields, namespace):\n    _GenericDeclaration.__init__(self, start, end, name, namespace)\n    self.fields = fields\n  def IsDefinition(self):\n    return True\n  def IsExportable(self):\n    return True\n  def __str__(self):\n    suffix = '%s, {%s}' % (self.name, self.fields)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "Union",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "class Union(_NestedType):\n  pass\nclass Enum(_NestedType):\n  pass\nclass Class(_GenericDeclaration):\n  def __init__(self, start, end, name, bases, templated_types, body, namespace):\n    _GenericDeclaration.__init__(self, start, end, name, namespace)\n    self.bases = bases\n    self.body = body\n    self.templated_types = templated_types",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "Enum",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "class Enum(_NestedType):\n  pass\nclass Class(_GenericDeclaration):\n  def __init__(self, start, end, name, bases, templated_types, body, namespace):\n    _GenericDeclaration.__init__(self, start, end, name, namespace)\n    self.bases = bases\n    self.body = body\n    self.templated_types = templated_types\n  def IsDeclaration(self):\n    return self.bases is None and self.body is None",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "Class",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "class Class(_GenericDeclaration):\n  def __init__(self, start, end, name, bases, templated_types, body, namespace):\n    _GenericDeclaration.__init__(self, start, end, name, namespace)\n    self.bases = bases\n    self.body = body\n    self.templated_types = templated_types\n  def IsDeclaration(self):\n    return self.bases is None and self.body is None\n  def IsDefinition(self):\n    return not self.IsDeclaration()",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "Struct",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "class Struct(Class):\n  pass\nclass Function(_GenericDeclaration):\n  def __init__(self, start, end, name, return_type, parameters,\n               modifiers, templated_types, body, namespace):\n    _GenericDeclaration.__init__(self, start, end, name, namespace)\n    converter = TypeConverter(namespace)\n    self.return_type = converter.CreateReturnType(return_type)\n    self.parameters = converter.ToParameters(parameters)\n    self.modifiers = modifiers",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "Function",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "class Function(_GenericDeclaration):\n  def __init__(self, start, end, name, return_type, parameters,\n               modifiers, templated_types, body, namespace):\n    _GenericDeclaration.__init__(self, start, end, name, namespace)\n    converter = TypeConverter(namespace)\n    self.return_type = converter.CreateReturnType(return_type)\n    self.parameters = converter.ToParameters(parameters)\n    self.modifiers = modifiers\n    self.body = body\n    self.templated_types = templated_types",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "Method",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "class Method(Function):\n  def __init__(self, start, end, name, in_class, return_type, parameters,\n               modifiers, templated_types, body, namespace):\n    Function.__init__(self, start, end, name, return_type, parameters,\n                      modifiers, templated_types, body, namespace)\n    # TODO(nnorwitz): in_class could also be a namespace which can\n    # mess up finding functions properly.\n    self.in_class = in_class\nclass Type(_GenericDeclaration):\n  \"\"\"Type used for any variable (eg class, primitive, struct, etc).\"\"\"",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "Type",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "class Type(_GenericDeclaration):\n  \"\"\"Type used for any variable (eg class, primitive, struct, etc).\"\"\"\n  def __init__(self, start, end, name, templated_types, modifiers,\n               reference, pointer, array):\n    \"\"\"\n        Args:\n          name: str name of main type\n          templated_types: [Class (Type?)] template type info between <>\n          modifiers: [str] type modifiers (keywords) eg, const, mutable, etc.\n          reference, pointer, array: bools",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "TypeConverter",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "class TypeConverter(object):\n  def __init__(self, namespace_stack):\n    self.namespace_stack = namespace_stack\n  def _GetTemplateEnd(self, tokens, start):\n    count = 1\n    end = start\n    while 1:\n      token = tokens[end]\n      end += 1\n      if token.name == '<':",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "AstBuilder",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "class AstBuilder(object):\n  def __init__(self, token_stream, filename, in_class='', visibility=None,\n               namespace_stack=[]):\n    self.tokens = token_stream\n    self.filename = filename\n    # TODO(nnorwitz): use a better data structure (deque) for the queue.\n    # Switching directions of the \"queue\" improved perf by about 25%.\n    # Using a deque should be even better since we access from both sides.\n    self.token_queue = []\n    self.namespace_stack = namespace_stack[:]",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "BuilderFromSource",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "def BuilderFromSource(source, filename):\n  \"\"\"Utility method that returns an AstBuilder from source code.\n    Args:\n      source: 'C++ source code'\n      filename: 'file1'\n    Returns:\n      AstBuilder\n    \"\"\"\n  return AstBuilder(tokenize.GetTokens(source), filename)\ndef PrintIndentifiers(filename, should_print):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "PrintIndentifiers",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "def PrintIndentifiers(filename, should_print):\n  \"\"\"Prints all identifiers for a C++ source file.\n    Args:\n      filename: 'file1'\n      should_print: predicate with signature: bool Function(token)\n    \"\"\"\n  source = utils.ReadFile(filename, False)\n  if source is None:\n    sys.stderr.write('Unable to find: %s\\n' % filename)\n    return",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "PrintAllIndentifiers",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "def PrintAllIndentifiers(filenames, should_print):\n  \"\"\"Prints all identifiers for each C++ source file in filenames.\n    Args:\n      filenames: ['file1', 'file2', ...]\n      should_print: predicate with signature: bool Function(token)\n    \"\"\"\n  for path in filenames:\n    PrintIndentifiers(path, should_print)\ndef main(argv):\n  for filename in argv[1:]:",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "def main(argv):\n  for filename in argv[1:]:\n    source = utils.ReadFile(filename)\n    if source is None:\n      continue\n    print('Processing %s' % filename)\n    builder = BuilderFromSource(source, filename)\n    try:\n      entire_ast = filter(None, builder.Generate())\n    except KeyboardInterrupt:",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "FUNCTION_NONE",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "FUNCTION_NONE = 0x00\nFUNCTION_CONST = 0x01\nFUNCTION_VIRTUAL = 0x02\nFUNCTION_PURE_VIRTUAL = 0x04\nFUNCTION_CTOR = 0x08\nFUNCTION_DTOR = 0x10\nFUNCTION_ATTRIBUTE = 0x20\nFUNCTION_UNKNOWN_ANNOTATION = 0x40\nFUNCTION_THROW = 0x80\nFUNCTION_OVERRIDE = 0x100",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "FUNCTION_CONST",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "FUNCTION_CONST = 0x01\nFUNCTION_VIRTUAL = 0x02\nFUNCTION_PURE_VIRTUAL = 0x04\nFUNCTION_CTOR = 0x08\nFUNCTION_DTOR = 0x10\nFUNCTION_ATTRIBUTE = 0x20\nFUNCTION_UNKNOWN_ANNOTATION = 0x40\nFUNCTION_THROW = 0x80\nFUNCTION_OVERRIDE = 0x100\n\"\"\"",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "FUNCTION_VIRTUAL",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "FUNCTION_VIRTUAL = 0x02\nFUNCTION_PURE_VIRTUAL = 0x04\nFUNCTION_CTOR = 0x08\nFUNCTION_DTOR = 0x10\nFUNCTION_ATTRIBUTE = 0x20\nFUNCTION_UNKNOWN_ANNOTATION = 0x40\nFUNCTION_THROW = 0x80\nFUNCTION_OVERRIDE = 0x100\n\"\"\"\nThese are currently unused.  Should really handle these properly at some point.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "FUNCTION_PURE_VIRTUAL",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "FUNCTION_PURE_VIRTUAL = 0x04\nFUNCTION_CTOR = 0x08\nFUNCTION_DTOR = 0x10\nFUNCTION_ATTRIBUTE = 0x20\nFUNCTION_UNKNOWN_ANNOTATION = 0x40\nFUNCTION_THROW = 0x80\nFUNCTION_OVERRIDE = 0x100\n\"\"\"\nThese are currently unused.  Should really handle these properly at some point.\nTYPE_MODIFIER_INLINE   = 0x010000",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "FUNCTION_CTOR",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "FUNCTION_CTOR = 0x08\nFUNCTION_DTOR = 0x10\nFUNCTION_ATTRIBUTE = 0x20\nFUNCTION_UNKNOWN_ANNOTATION = 0x40\nFUNCTION_THROW = 0x80\nFUNCTION_OVERRIDE = 0x100\n\"\"\"\nThese are currently unused.  Should really handle these properly at some point.\nTYPE_MODIFIER_INLINE   = 0x010000\nTYPE_MODIFIER_EXTERN   = 0x020000",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "FUNCTION_DTOR",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "FUNCTION_DTOR = 0x10\nFUNCTION_ATTRIBUTE = 0x20\nFUNCTION_UNKNOWN_ANNOTATION = 0x40\nFUNCTION_THROW = 0x80\nFUNCTION_OVERRIDE = 0x100\n\"\"\"\nThese are currently unused.  Should really handle these properly at some point.\nTYPE_MODIFIER_INLINE   = 0x010000\nTYPE_MODIFIER_EXTERN   = 0x020000\nTYPE_MODIFIER_STATIC   = 0x040000",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "FUNCTION_ATTRIBUTE",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "FUNCTION_ATTRIBUTE = 0x20\nFUNCTION_UNKNOWN_ANNOTATION = 0x40\nFUNCTION_THROW = 0x80\nFUNCTION_OVERRIDE = 0x100\n\"\"\"\nThese are currently unused.  Should really handle these properly at some point.\nTYPE_MODIFIER_INLINE   = 0x010000\nTYPE_MODIFIER_EXTERN   = 0x020000\nTYPE_MODIFIER_STATIC   = 0x040000\nTYPE_MODIFIER_CONST    = 0x080000",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "FUNCTION_UNKNOWN_ANNOTATION",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "FUNCTION_UNKNOWN_ANNOTATION = 0x40\nFUNCTION_THROW = 0x80\nFUNCTION_OVERRIDE = 0x100\n\"\"\"\nThese are currently unused.  Should really handle these properly at some point.\nTYPE_MODIFIER_INLINE   = 0x010000\nTYPE_MODIFIER_EXTERN   = 0x020000\nTYPE_MODIFIER_STATIC   = 0x040000\nTYPE_MODIFIER_CONST    = 0x080000\nTYPE_MODIFIER_REGISTER = 0x100000",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "FUNCTION_THROW",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "FUNCTION_THROW = 0x80\nFUNCTION_OVERRIDE = 0x100\n\"\"\"\nThese are currently unused.  Should really handle these properly at some point.\nTYPE_MODIFIER_INLINE   = 0x010000\nTYPE_MODIFIER_EXTERN   = 0x020000\nTYPE_MODIFIER_STATIC   = 0x040000\nTYPE_MODIFIER_CONST    = 0x080000\nTYPE_MODIFIER_REGISTER = 0x100000\nTYPE_MODIFIER_VOLATILE = 0x200000",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "FUNCTION_OVERRIDE",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "FUNCTION_OVERRIDE = 0x100\n\"\"\"\nThese are currently unused.  Should really handle these properly at some point.\nTYPE_MODIFIER_INLINE   = 0x010000\nTYPE_MODIFIER_EXTERN   = 0x020000\nTYPE_MODIFIER_STATIC   = 0x040000\nTYPE_MODIFIER_CONST    = 0x080000\nTYPE_MODIFIER_REGISTER = 0x100000\nTYPE_MODIFIER_VOLATILE = 0x200000\nTYPE_MODIFIER_MUTABLE  = 0x400000",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "TYPE_MODIFIER_REGISTER",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "TYPE_MODIFIER_REGISTER = 0x100000\nTYPE_MODIFIER_VOLATILE = 0x200000\nTYPE_MODIFIER_MUTABLE  = 0x400000\nTYPE_MODIFIER_MAP = {\n    'inline': TYPE_MODIFIER_INLINE,\n    'extern': TYPE_MODIFIER_EXTERN,\n    'static': TYPE_MODIFIER_STATIC,\n    'const': TYPE_MODIFIER_CONST,\n    'register': TYPE_MODIFIER_REGISTER,\n    'volatile': TYPE_MODIFIER_VOLATILE,",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "TYPE_MODIFIER_VOLATILE",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "TYPE_MODIFIER_VOLATILE = 0x200000\nTYPE_MODIFIER_MUTABLE  = 0x400000\nTYPE_MODIFIER_MAP = {\n    'inline': TYPE_MODIFIER_INLINE,\n    'extern': TYPE_MODIFIER_EXTERN,\n    'static': TYPE_MODIFIER_STATIC,\n    'const': TYPE_MODIFIER_CONST,\n    'register': TYPE_MODIFIER_REGISTER,\n    'volatile': TYPE_MODIFIER_VOLATILE,\n    'mutable': TYPE_MODIFIER_MUTABLE,",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "TYPE_MODIFIER_MAP",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "TYPE_MODIFIER_MAP = {\n    'inline': TYPE_MODIFIER_INLINE,\n    'extern': TYPE_MODIFIER_EXTERN,\n    'static': TYPE_MODIFIER_STATIC,\n    'const': TYPE_MODIFIER_CONST,\n    'register': TYPE_MODIFIER_REGISTER,\n    'volatile': TYPE_MODIFIER_VOLATILE,\n    'mutable': TYPE_MODIFIER_MUTABLE,\n    }\n\"\"\"",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "_INTERNAL_TOKEN",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "_INTERNAL_TOKEN = 'internal'\n_NAMESPACE_POP = 'ns-pop'\n# TODO(nnorwitz): use this as a singleton for templated_types, etc\n# where we don't want to create a new empty dict each time.  It is also const.\nclass _NullDict(object):\n  __contains__ = lambda self: False\n  keys = values = items = iterkeys = itervalues = iteritems = lambda self: ()\n# TODO(nnorwitz): move AST nodes into a separate module.\nclass Node(object):\n  \"\"\"Base AST node.\"\"\"",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "_NAMESPACE_POP",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "_NAMESPACE_POP = 'ns-pop'\n# TODO(nnorwitz): use this as a singleton for templated_types, etc\n# where we don't want to create a new empty dict each time.  It is also const.\nclass _NullDict(object):\n  __contains__ = lambda self: False\n  keys = values = items = iterkeys = itervalues = iteritems = lambda self: ()\n# TODO(nnorwitz): move AST nodes into a separate module.\nclass Node(object):\n  \"\"\"Base AST node.\"\"\"\n  def __init__(self, start, end):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class",
        "peekOfCode": "def main(argv=sys.argv):\n  if len(argv) < 2:\n    sys.stderr.write('Google Mock Class Generator v%s\\n\\n' %\n                     '.'.join(map(str, _VERSION)))\n    sys.stderr.write(__doc__)\n    return 1\n  global _INDENT\n  try:\n    _INDENT = int(os.environ['INDENT'])\n  except KeyError:",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class",
        "documentation": {}
    },
    {
        "label": "_VERSION",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class",
        "peekOfCode": "_VERSION = (1, 0, 1)  # The version of this script.\n# How many spaces to indent.  Can set me with the INDENT environment variable.\n_INDENT = 2\ndef _RenderType(ast_type):\n  \"\"\"Renders the potentially recursively templated type into a string.\n  Args:\n    ast_type: The AST of the type.\n  Returns:\n    Rendered string of the type.\n  \"\"\"",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class",
        "documentation": {}
    },
    {
        "label": "_INDENT",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class",
        "peekOfCode": "_INDENT = 2\ndef _RenderType(ast_type):\n  \"\"\"Renders the potentially recursively templated type into a string.\n  Args:\n    ast_type: The AST of the type.\n  Returns:\n    Rendered string of the type.\n  \"\"\"\n  # Add modifiers like 'const'.\n  modifiers = ''",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class TestCase(unittest.TestCase):\n  \"\"\"Helper class that adds assert methods.\"\"\"\n  @staticmethod\n  def StripLeadingWhitespace(lines):\n    \"\"\"Strip leading whitespace in each line in 'lines'.\"\"\"\n    return '\\n'.join([s.lstrip() for s in lines.split('\\n')])\n  def assertEqualIgnoreLeadingWhitespace(self, expected_lines, lines):\n    \"\"\"Specialized assert that ignores the indent level.\"\"\"\n    self.assertEqual(expected_lines, self.StripLeadingWhitespace(lines))\nclass GenerateMethodsTest(TestCase):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "GenerateMethodsTest",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class GenerateMethodsTest(TestCase):\n  @staticmethod\n  def GenerateMethodSource(cpp_source):\n    \"\"\"Convert C++ source to Google Mock output source lines.\"\"\"\n    method_source_lines = []\n    # <test> is a pseudo-filename, it is not read or written.\n    builder = ast.BuilderFromSource(cpp_source, '<test>')\n    ast_list = list(builder.Generate())\n    gmock_class._GenerateMethods(method_source_lines, cpp_source, ast_list[0])\n    return '\\n'.join(method_source_lines)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Fo",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Foo {\n public:\n  virtual int Bar();\n};\n\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(\n        'MOCK_METHOD(int, Bar, (), (override));',\n        self.GenerateMethodSource(source))\n  def testSimpleConstructorsAndDestructor(self):\n    source = \"\"\"",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Fo",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Foo {\n public:\n  Foo();\n  Foo(int x);\n  Foo(const Foo& f);\n  Foo(Foo&& f);\n  ~Foo();\n  virtual int Bar() = 0;\n};\n\"\"\"",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Fo",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Foo {\n public:\n  virtual ~Foo();\n  virtual int Bar() = 0;\n};\n\"\"\"\n    # The destructor should be ignored.\n    self.assertEqualIgnoreLeadingWhitespace(\n        'MOCK_METHOD(int, Bar, (), (override));',\n        self.GenerateMethodSource(source))",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Fo",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Foo {\n public:\n  Foo() = default;\n  Foo(const Foo& f) = default;\n  Foo(Foo&& f) = default;\n  ~Foo() = default;\n  virtual int Bar() = 0;\n};\n\"\"\"\n    # The constructors and destructor should be ignored.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Fo",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Foo {\n public:\n  Foo() = delete;\n  Foo(const Foo& f) = delete;\n  Foo(Foo&& f) = delete;\n  ~Foo() = delete;\n  virtual int Bar() = 0;\n};\n\"\"\"\n    # The constructors and destructor should be ignored.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Fo",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Foo {\n public:\n  int Bar() override;\n};\n\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(\n        'MOCK_METHOD(int, Bar, (), (override));',\n        self.GenerateMethodSource(source))\n  def testSimpleConstMethod(self):\n    source = \"\"\"",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Fo",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Foo {\n public:\n  virtual void Bar(bool flag) const;\n};\n\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(\n        'MOCK_METHOD(void, Bar, (bool flag), (const, override));',\n        self.GenerateMethodSource(source))\n  def testExplicitVoid(self):\n    source = \"\"\"",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Fo",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Foo {\n public:\n  virtual int Bar(void);\n};\n\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(\n        'MOCK_METHOD(int, Bar, (), (override));',\n        self.GenerateMethodSource(source))\n  def testStrangeNewlineInParameter(self):\n    source = \"\"\"",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Fo",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Foo {\n public:\n  virtual void Bar(int\na) = 0;\n};\n\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(\n        'MOCK_METHOD(void, Bar, (int a), (override));',\n        self.GenerateMethodSource(source))\n  def testDefaultParameters(self):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Fo",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Foo {\n public:\n  virtual void Bar(int a, char c = 'x') = 0;\n};\n\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(\n        'MOCK_METHOD(void, Bar, (int a, char c), (override));',\n        self.GenerateMethodSource(source))\n  def testMultipleDefaultParameters(self):\n    source = \"\"\"",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Fo",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Foo {\n public:\n  virtual void Bar(\n        int a = 42, \n        char c = 'x', \n        const int* const p = nullptr, \n        const std::string& s = \"42\",\n        char tab[] = {'4','2'},\n        int const *& rp = aDefaultPointer) = 0;\n};",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Fo",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Foo {\n public:\n  virtual void Bar(int a = 42, int b = 43, int c = 44) = 0;\n};\n\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(\n        'MOCK_METHOD(void, Bar, (int a, int b, int c), (override));',\n        self.GenerateMethodSource(source))\n  def testConstDefaultParameter(self):\n    source = \"\"\"",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Tes",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Test {\n public:\n  virtual bool Bar(const int test_arg = 42) = 0;\n};\n\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(\n        'MOCK_METHOD(bool, Bar, (const int test_arg), (override));',\n        self.GenerateMethodSource(source))\n  def testConstRefDefaultParameter(self):\n    source = \"\"\"",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Tes",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Test {\n public:\n  virtual bool Bar(const std::string& test_arg = \"42\" ) = 0;\n};\n\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(\n        'MOCK_METHOD(bool, Bar, (const std::string& test_arg), (override));',\n        self.GenerateMethodSource(source))\n  def testRemovesCommentsWhenDefaultsArePresent(self):\n    source = \"\"\"",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Fo",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Foo {\n public:\n  virtual void Bar(int a = 42 /* a comment */,\n                   char /* other comment */ c= 'x') = 0;\n};\n\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(\n        'MOCK_METHOD(void, Bar, (int a, char c), (override));',\n        self.GenerateMethodSource(source))\n  def testDoubleSlashCommentsInParameterListAreRemoved(self):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Fo",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Foo {\n public:\n  virtual void Bar(int a,  // inline comments should be elided.\n                   int b   // inline comments should be elided.\n                   ) const = 0;\n};\n\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(\n        'MOCK_METHOD(void, Bar, (int a, int b), (const, override));',\n        self.GenerateMethodSource(source))",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Fo",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Foo {\n public:\n  virtual const string& Bar(int /* keeper */, int b);\n};\n\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(\n        'MOCK_METHOD(const string&, Bar, (int, int b), (override));',\n        self.GenerateMethodSource(source))\n  def testArgsOfTemplateTypes(self):\n    source = \"\"\"",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Fo",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Foo {\n public:\n  virtual int Bar(const vector<int>& v, map<int, string>* output);\n};\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(\n        'MOCK_METHOD(int, Bar, (const vector<int>& v, (map<int, string>* output)), (override));',\n        self.GenerateMethodSource(source))\n  def testReturnTypeWithOneTemplateArg(self):\n    source = \"\"\"\nclass Foo {",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Fo",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Foo {\n public:\n  virtual vector<int>* Bar(int n);\n};\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(\n        'MOCK_METHOD(vector<int>*, Bar, (int n), (override));',\n        self.GenerateMethodSource(source))\n  def testReturnTypeWithManyTemplateArgs(self):\n    source = \"\"\"\nclass Foo {",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Fo",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Foo {\n public:\n  virtual map<int, string> Bar();\n};\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(\n        'MOCK_METHOD((map<int, string>), Bar, (), (override));',\n        self.GenerateMethodSource(source))\n  def testSimpleMethodInTemplatedClass(self):\n    source = \"\"\"\ntemplate<class T>",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Fo",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Foo {\n public:\n  virtual int Bar();\n};\n\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(\n        'MOCK_METHOD(int, Bar, (), (override));',\n        self.GenerateMethodSource(source))\n  def testPointerArgWithoutNames(self):\n    source = \"\"\"",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Fo",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Foo {\n  virtual int Bar(C*);\n};\n\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(\n        'MOCK_METHOD(int, Bar, (C*), (override));',\n        self.GenerateMethodSource(source))\n  def testReferenceArgWithoutNames(self):\n    source = \"\"\"\nclass Foo {",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Fo",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Foo {\n  virtual int Bar(C&);\n};\n\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(\n        'MOCK_METHOD(int, Bar, (C&), (override));',\n        self.GenerateMethodSource(source))\n  def testArrayArgWithoutNames(self):\n    source = \"\"\"\nclass Foo {",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Fo",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Foo {\n  virtual int Bar(C[]);\n};\n\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(\n        'MOCK_METHOD(int, Bar, (C[]), (override));',\n        self.GenerateMethodSource(source))\nclass GenerateMocksTest(TestCase):\n  @staticmethod\n  def GenerateMocks(cpp_source):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "GenerateMocksTest",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class GenerateMocksTest(TestCase):\n  @staticmethod\n  def GenerateMocks(cpp_source):\n    \"\"\"Convert C++ source to complete Google Mock output source.\"\"\"\n    # <test> is a pseudo-filename, it is not read or written.\n    filename = '<test>'\n    builder = ast.BuilderFromSource(cpp_source, filename)\n    ast_list = list(builder.Generate())\n    lines = gmock_class._GenerateMocks(filename, cpp_source, ast_list, None)\n    return '\\n'.join(lines)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Tes",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Test {\n public:\n  virtual void Foo();\n};\n}  // namespace Baz::Qux\n}  // namespace Foo\n\"\"\"\n    expected = \"\"\"\\\nnamespace Foo {\nnamespace Baz::Qux {",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "MockTes",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class MockTest : public Test {\npublic:\nMOCK_METHOD(void, Foo, (), (override));\n};\n}  // namespace Baz::Qux\n}  // namespace Foo\n\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(expected,\n                                            self.GenerateMocks(source))\n  def testClassWithStorageSpecifierMacro(self):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "STORAGE_SPECIFIE",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class STORAGE_SPECIFIER Test {\n public:\n  virtual void Foo();\n};\n\"\"\"\n    expected = \"\"\"\\\nclass MockTest : public Test {\npublic:\nMOCK_METHOD(void, Foo, (), (override));\n};",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "MockTes",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class MockTest : public Test {\npublic:\nMOCK_METHOD(void, Foo, (), (override));\n};\n\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(expected,\n                                            self.GenerateMocks(source))\n  def testTemplatedForwardDeclaration(self):\n    source = \"\"\"\ntemplate <class T> class Forward;  // Forward declaration should be ignored.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Tes",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Test {\n public:\n  virtual void Foo();\n};\n\"\"\"\n    expected = \"\"\"\\\nclass MockTest : public Test {\npublic:\nMOCK_METHOD(void, Foo, (), (override));\n};",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "MockTes",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class MockTest : public Test {\npublic:\nMOCK_METHOD(void, Foo, (), (override));\n};\n\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(expected,\n                                            self.GenerateMocks(source))\n  def testTemplatedClass(self):\n    source = \"\"\"\ntemplate <typename S, typename T>",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Tes",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Test {\n public:\n  virtual void Foo();\n};\n\"\"\"\n    expected = \"\"\"\\\ntemplate <typename S, typename T>\nclass MockTest : public Test<S, T> {\npublic:\nMOCK_METHOD(void, Foo, (), (override));",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "MockTes",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class MockTest : public Test<S, T> {\npublic:\nMOCK_METHOD(void, Foo, (), (override));\n};\n\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(expected,\n                                            self.GenerateMocks(source))\n  def testTemplateInATemplateTypedef(self):\n    source = \"\"\"\nclass Test {",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Tes",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Test {\n public:\n  typedef std::vector<std::list<int>> FooType;\n  virtual void Bar(const FooType& test_arg);\n};\n\"\"\"\n    expected = \"\"\"\\\nclass MockTest : public Test {\npublic:\nMOCK_METHOD(void, Bar, (const FooType& test_arg), (override));",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "MockTes",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class MockTest : public Test {\npublic:\nMOCK_METHOD(void, Bar, (const FooType& test_arg), (override));\n};\n\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(expected,\n                                            self.GenerateMocks(source))\n  def testTemplatedClassWithTemplatedArguments(self):\n    source = \"\"\"\ntemplate <typename S, typename T, typename U, typename V, typename W>",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Tes",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Test {\n public:\n  virtual U Foo(T some_arg);\n};\n\"\"\"\n    expected = \"\"\"\\\ntemplate <typename S, typename T, typename U, typename V, typename W>\nclass MockTest : public Test<S, T, U, V, W> {\npublic:\nMOCK_METHOD(U, Foo, (T some_arg), (override));",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "MockTes",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class MockTest : public Test<S, T, U, V, W> {\npublic:\nMOCK_METHOD(U, Foo, (T some_arg), (override));\n};\n\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(expected,\n                                            self.GenerateMocks(source))\n  def testTemplateInATemplateTypedefWithComma(self):\n    source = \"\"\"\nclass Test {",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Tes",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Test {\n public:\n  typedef std::function<void(\n      const vector<std::list<int>>&, int> FooType;\n  virtual void Bar(const FooType& test_arg);\n};\n\"\"\"\n    expected = \"\"\"\\\nclass MockTest : public Test {\npublic:",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "MockTes",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class MockTest : public Test {\npublic:\nMOCK_METHOD(void, Bar, (const FooType& test_arg), (override));\n};\n\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(expected,\n                                            self.GenerateMocks(source))\n  def testParenthesizedCommaInArg(self):\n    source = \"\"\"\nclass Test {",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Tes",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Test {\n public:\n   virtual void Bar(std::function<void(int, int)> f);\n};\n\"\"\"\n    expected = \"\"\"\\\nclass MockTest : public Test {\npublic:\nMOCK_METHOD(void, Bar, (std::function<void(int, int)> f), (override));\n};",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "MockTes",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class MockTest : public Test {\npublic:\nMOCK_METHOD(void, Bar, (std::function<void(int, int)> f), (override));\n};\n\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(expected,\n                                            self.GenerateMocks(source))\n  def testEnumType(self):\n    source = \"\"\"\nclass Test {",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Tes",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Test {\n public:\n  enum Bar {\n    BAZ, QUX, QUUX, QUUUX\n  };\n  virtual void Foo();\n};\n\"\"\"\n    expected = \"\"\"\\\nclass MockTest : public Test {",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "MockTes",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class MockTest : public Test {\npublic:\nMOCK_METHOD(void, Foo, (), (override));\n};\n\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(expected,\n                                            self.GenerateMocks(source))\n  def testEnumClassType(self):\n    source = \"\"\"\nclass Test {",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Tes",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Test {\n public:\n  enum class Bar {\n    BAZ, QUX, QUUX, QUUUX\n  };\n  virtual void Foo();\n};\n\"\"\"\n    expected = \"\"\"\\\nclass MockTest : public Test {",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "MockTes",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class MockTest : public Test {\npublic:\nMOCK_METHOD(void, Foo, (), (override));\n};\n\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(expected,\n                                            self.GenerateMocks(source))\n  def testStdFunction(self):\n    source = \"\"\"\nclass Test {",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Tes",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Test {\n public:\n  Test(std::function<int(std::string)> foo) : foo_(foo) {}\n  virtual std::function<int(std::string)> foo();\n private:\n  std::function<int(std::string)> foo_;\n};\n\"\"\"\n    expected = \"\"\"\\\nclass MockTest : public Test {",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "MockTes",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class MockTest : public Test {\npublic:\nMOCK_METHOD(std::function<int (std::string)>, foo, (), (override));\n};\n\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(expected,\n                                            self.GenerateMocks(source))\nif __name__ == '__main__':\n  unittest.main()",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "a)",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "a) = 0;\n};\n\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(\n        'MOCK_METHOD(void, Bar, (int a), (override));',\n        self.GenerateMethodSource(source))\n  def testDefaultParameters(self):\n    source = \"\"\"\nclass Foo {\n public:",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "IsKeyword",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.keywords",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.keywords",
        "peekOfCode": "def IsKeyword(token):\n    return token in ALL\ndef IsBuiltinType(token):\n    if token in ('virtual', 'inline'):\n        # These only apply to methods, they can't be types by themselves.\n        return False\n    return token in TYPES or token in TYPE_MODIFIERS",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.keywords",
        "documentation": {}
    },
    {
        "label": "IsBuiltinType",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.keywords",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.keywords",
        "peekOfCode": "def IsBuiltinType(token):\n    if token in ('virtual', 'inline'):\n        # These only apply to methods, they can't be types by themselves.\n        return False\n    return token in TYPES or token in TYPE_MODIFIERS",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.keywords",
        "documentation": {}
    },
    {
        "label": "TYPES",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.keywords",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.keywords",
        "peekOfCode": "TYPES = set('bool char int long short double float void wchar_t unsigned signed'.split())\nTYPE_MODIFIERS = set('auto register const inline extern static virtual volatile mutable'.split())\nACCESS = set('public protected private friend'.split())\nCASTS = set('static_cast const_cast dynamic_cast reinterpret_cast'.split())\nOTHERS = set('true false asm class namespace using explicit this operator sizeof'.split())\nOTHER_TYPES = set('new delete typedef struct union enum typeid typename template'.split())\nCONTROL = set('case switch default if else return goto'.split())\nEXCEPTION = set('try catch throw'.split())\nLOOP = set('while do for break continue'.split())\nALL = TYPES | TYPE_MODIFIERS | ACCESS | CASTS | OTHERS | OTHER_TYPES | CONTROL | EXCEPTION | LOOP",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.keywords",
        "documentation": {}
    },
    {
        "label": "TYPE_MODIFIERS",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.keywords",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.keywords",
        "peekOfCode": "TYPE_MODIFIERS = set('auto register const inline extern static virtual volatile mutable'.split())\nACCESS = set('public protected private friend'.split())\nCASTS = set('static_cast const_cast dynamic_cast reinterpret_cast'.split())\nOTHERS = set('true false asm class namespace using explicit this operator sizeof'.split())\nOTHER_TYPES = set('new delete typedef struct union enum typeid typename template'.split())\nCONTROL = set('case switch default if else return goto'.split())\nEXCEPTION = set('try catch throw'.split())\nLOOP = set('while do for break continue'.split())\nALL = TYPES | TYPE_MODIFIERS | ACCESS | CASTS | OTHERS | OTHER_TYPES | CONTROL | EXCEPTION | LOOP\ndef IsKeyword(token):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.keywords",
        "documentation": {}
    },
    {
        "label": "ACCESS",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.keywords",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.keywords",
        "peekOfCode": "ACCESS = set('public protected private friend'.split())\nCASTS = set('static_cast const_cast dynamic_cast reinterpret_cast'.split())\nOTHERS = set('true false asm class namespace using explicit this operator sizeof'.split())\nOTHER_TYPES = set('new delete typedef struct union enum typeid typename template'.split())\nCONTROL = set('case switch default if else return goto'.split())\nEXCEPTION = set('try catch throw'.split())\nLOOP = set('while do for break continue'.split())\nALL = TYPES | TYPE_MODIFIERS | ACCESS | CASTS | OTHERS | OTHER_TYPES | CONTROL | EXCEPTION | LOOP\ndef IsKeyword(token):\n    return token in ALL",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.keywords",
        "documentation": {}
    },
    {
        "label": "CASTS",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.keywords",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.keywords",
        "peekOfCode": "CASTS = set('static_cast const_cast dynamic_cast reinterpret_cast'.split())\nOTHERS = set('true false asm class namespace using explicit this operator sizeof'.split())\nOTHER_TYPES = set('new delete typedef struct union enum typeid typename template'.split())\nCONTROL = set('case switch default if else return goto'.split())\nEXCEPTION = set('try catch throw'.split())\nLOOP = set('while do for break continue'.split())\nALL = TYPES | TYPE_MODIFIERS | ACCESS | CASTS | OTHERS | OTHER_TYPES | CONTROL | EXCEPTION | LOOP\ndef IsKeyword(token):\n    return token in ALL\ndef IsBuiltinType(token):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.keywords",
        "documentation": {}
    },
    {
        "label": "OTHERS",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.keywords",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.keywords",
        "peekOfCode": "OTHERS = set('true false asm class namespace using explicit this operator sizeof'.split())\nOTHER_TYPES = set('new delete typedef struct union enum typeid typename template'.split())\nCONTROL = set('case switch default if else return goto'.split())\nEXCEPTION = set('try catch throw'.split())\nLOOP = set('while do for break continue'.split())\nALL = TYPES | TYPE_MODIFIERS | ACCESS | CASTS | OTHERS | OTHER_TYPES | CONTROL | EXCEPTION | LOOP\ndef IsKeyword(token):\n    return token in ALL\ndef IsBuiltinType(token):\n    if token in ('virtual', 'inline'):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.keywords",
        "documentation": {}
    },
    {
        "label": "OTHER_TYPES",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.keywords",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.keywords",
        "peekOfCode": "OTHER_TYPES = set('new delete typedef struct union enum typeid typename template'.split())\nCONTROL = set('case switch default if else return goto'.split())\nEXCEPTION = set('try catch throw'.split())\nLOOP = set('while do for break continue'.split())\nALL = TYPES | TYPE_MODIFIERS | ACCESS | CASTS | OTHERS | OTHER_TYPES | CONTROL | EXCEPTION | LOOP\ndef IsKeyword(token):\n    return token in ALL\ndef IsBuiltinType(token):\n    if token in ('virtual', 'inline'):\n        # These only apply to methods, they can't be types by themselves.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.keywords",
        "documentation": {}
    },
    {
        "label": "CONTROL",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.keywords",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.keywords",
        "peekOfCode": "CONTROL = set('case switch default if else return goto'.split())\nEXCEPTION = set('try catch throw'.split())\nLOOP = set('while do for break continue'.split())\nALL = TYPES | TYPE_MODIFIERS | ACCESS | CASTS | OTHERS | OTHER_TYPES | CONTROL | EXCEPTION | LOOP\ndef IsKeyword(token):\n    return token in ALL\ndef IsBuiltinType(token):\n    if token in ('virtual', 'inline'):\n        # These only apply to methods, they can't be types by themselves.\n        return False",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.keywords",
        "documentation": {}
    },
    {
        "label": "EXCEPTION",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.keywords",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.keywords",
        "peekOfCode": "EXCEPTION = set('try catch throw'.split())\nLOOP = set('while do for break continue'.split())\nALL = TYPES | TYPE_MODIFIERS | ACCESS | CASTS | OTHERS | OTHER_TYPES | CONTROL | EXCEPTION | LOOP\ndef IsKeyword(token):\n    return token in ALL\ndef IsBuiltinType(token):\n    if token in ('virtual', 'inline'):\n        # These only apply to methods, they can't be types by themselves.\n        return False\n    return token in TYPES or token in TYPE_MODIFIERS",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.keywords",
        "documentation": {}
    },
    {
        "label": "LOOP",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.keywords",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.keywords",
        "peekOfCode": "LOOP = set('while do for break continue'.split())\nALL = TYPES | TYPE_MODIFIERS | ACCESS | CASTS | OTHERS | OTHER_TYPES | CONTROL | EXCEPTION | LOOP\ndef IsKeyword(token):\n    return token in ALL\ndef IsBuiltinType(token):\n    if token in ('virtual', 'inline'):\n        # These only apply to methods, they can't be types by themselves.\n        return False\n    return token in TYPES or token in TYPE_MODIFIERS",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.keywords",
        "documentation": {}
    },
    {
        "label": "ALL",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.keywords",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.keywords",
        "peekOfCode": "ALL = TYPES | TYPE_MODIFIERS | ACCESS | CASTS | OTHERS | OTHER_TYPES | CONTROL | EXCEPTION | LOOP\ndef IsKeyword(token):\n    return token in ALL\ndef IsBuiltinType(token):\n    if token in ('virtual', 'inline'):\n        # These only apply to methods, they can't be types by themselves.\n        return False\n    return token in TYPES or token in TYPE_MODIFIERS",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.keywords",
        "documentation": {}
    },
    {
        "label": "Token",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.tokenize",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.tokenize",
        "peekOfCode": "class Token(object):\n    \"\"\"Data container to represent a C++ token.\n    Tokens can be identifiers, syntax char(s), constants, or\n    pre-processor directives.\n    start contains the index of the first char of the token in the source\n    end contains the index of the last char of the token in the source\n    \"\"\"\n    def __init__(self, token_type, name, start, end):\n        self.token_type = token_type\n        self.name = name",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.tokenize",
        "documentation": {}
    },
    {
        "label": "GetTokens",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.tokenize",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.tokenize",
        "peekOfCode": "def GetTokens(source):\n    \"\"\"Returns a sequence of Tokens.\n    Args:\n      source: string of C++ source code.\n    Yields:\n      Token that represents the next token in the source.\n    \"\"\"\n    # Cache various valid character sets for speed.\n    valid_identifier_chars = VALID_IDENTIFIER_CHARS\n    hex_digits = HEX_DIGITS",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.tokenize",
        "documentation": {}
    },
    {
        "label": "_letters",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.tokenize",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.tokenize",
        "peekOfCode": "_letters = 'abcdefghijklmnopqrstuvwxyz'\nVALID_IDENTIFIER_CHARS = set(_letters + _letters.upper() + '_0123456789$')\nHEX_DIGITS = set('0123456789abcdefABCDEF')\nINT_OR_FLOAT_DIGITS = set('01234567890eE-+')\n# C++0x string preffixes.\n_STR_PREFIXES = set(('R', 'u8', 'u8R', 'u', 'uR', 'U', 'UR', 'L', 'LR'))\n# Token types.\nUNKNOWN = 'UNKNOWN'\nSYNTAX = 'SYNTAX'\nCONSTANT = 'CONSTANT'",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.tokenize",
        "documentation": {}
    },
    {
        "label": "VALID_IDENTIFIER_CHARS",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.tokenize",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.tokenize",
        "peekOfCode": "VALID_IDENTIFIER_CHARS = set(_letters + _letters.upper() + '_0123456789$')\nHEX_DIGITS = set('0123456789abcdefABCDEF')\nINT_OR_FLOAT_DIGITS = set('01234567890eE-+')\n# C++0x string preffixes.\n_STR_PREFIXES = set(('R', 'u8', 'u8R', 'u', 'uR', 'U', 'UR', 'L', 'LR'))\n# Token types.\nUNKNOWN = 'UNKNOWN'\nSYNTAX = 'SYNTAX'\nCONSTANT = 'CONSTANT'\nNAME = 'NAME'",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.tokenize",
        "documentation": {}
    },
    {
        "label": "HEX_DIGITS",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.tokenize",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.tokenize",
        "peekOfCode": "HEX_DIGITS = set('0123456789abcdefABCDEF')\nINT_OR_FLOAT_DIGITS = set('01234567890eE-+')\n# C++0x string preffixes.\n_STR_PREFIXES = set(('R', 'u8', 'u8R', 'u', 'uR', 'U', 'UR', 'L', 'LR'))\n# Token types.\nUNKNOWN = 'UNKNOWN'\nSYNTAX = 'SYNTAX'\nCONSTANT = 'CONSTANT'\nNAME = 'NAME'\nPREPROCESSOR = 'PREPROCESSOR'",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.tokenize",
        "documentation": {}
    },
    {
        "label": "INT_OR_FLOAT_DIGITS",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.tokenize",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.tokenize",
        "peekOfCode": "INT_OR_FLOAT_DIGITS = set('01234567890eE-+')\n# C++0x string preffixes.\n_STR_PREFIXES = set(('R', 'u8', 'u8R', 'u', 'uR', 'U', 'UR', 'L', 'LR'))\n# Token types.\nUNKNOWN = 'UNKNOWN'\nSYNTAX = 'SYNTAX'\nCONSTANT = 'CONSTANT'\nNAME = 'NAME'\nPREPROCESSOR = 'PREPROCESSOR'\n# Where the token originated from.  This can be used for backtracking.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.tokenize",
        "documentation": {}
    },
    {
        "label": "_STR_PREFIXES",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.tokenize",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.tokenize",
        "peekOfCode": "_STR_PREFIXES = set(('R', 'u8', 'u8R', 'u', 'uR', 'U', 'UR', 'L', 'LR'))\n# Token types.\nUNKNOWN = 'UNKNOWN'\nSYNTAX = 'SYNTAX'\nCONSTANT = 'CONSTANT'\nNAME = 'NAME'\nPREPROCESSOR = 'PREPROCESSOR'\n# Where the token originated from.  This can be used for backtracking.\n# It is always set to WHENCE_STREAM in this code.\nWHENCE_STREAM, WHENCE_QUEUE = range(2)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.tokenize",
        "documentation": {}
    },
    {
        "label": "UNKNOWN",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.tokenize",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.tokenize",
        "peekOfCode": "UNKNOWN = 'UNKNOWN'\nSYNTAX = 'SYNTAX'\nCONSTANT = 'CONSTANT'\nNAME = 'NAME'\nPREPROCESSOR = 'PREPROCESSOR'\n# Where the token originated from.  This can be used for backtracking.\n# It is always set to WHENCE_STREAM in this code.\nWHENCE_STREAM, WHENCE_QUEUE = range(2)\nclass Token(object):\n    \"\"\"Data container to represent a C++ token.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.tokenize",
        "documentation": {}
    },
    {
        "label": "SYNTAX",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.tokenize",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.tokenize",
        "peekOfCode": "SYNTAX = 'SYNTAX'\nCONSTANT = 'CONSTANT'\nNAME = 'NAME'\nPREPROCESSOR = 'PREPROCESSOR'\n# Where the token originated from.  This can be used for backtracking.\n# It is always set to WHENCE_STREAM in this code.\nWHENCE_STREAM, WHENCE_QUEUE = range(2)\nclass Token(object):\n    \"\"\"Data container to represent a C++ token.\n    Tokens can be identifiers, syntax char(s), constants, or",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.tokenize",
        "documentation": {}
    },
    {
        "label": "CONSTANT",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.tokenize",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.tokenize",
        "peekOfCode": "CONSTANT = 'CONSTANT'\nNAME = 'NAME'\nPREPROCESSOR = 'PREPROCESSOR'\n# Where the token originated from.  This can be used for backtracking.\n# It is always set to WHENCE_STREAM in this code.\nWHENCE_STREAM, WHENCE_QUEUE = range(2)\nclass Token(object):\n    \"\"\"Data container to represent a C++ token.\n    Tokens can be identifiers, syntax char(s), constants, or\n    pre-processor directives.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.tokenize",
        "documentation": {}
    },
    {
        "label": "NAME",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.tokenize",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.tokenize",
        "peekOfCode": "NAME = 'NAME'\nPREPROCESSOR = 'PREPROCESSOR'\n# Where the token originated from.  This can be used for backtracking.\n# It is always set to WHENCE_STREAM in this code.\nWHENCE_STREAM, WHENCE_QUEUE = range(2)\nclass Token(object):\n    \"\"\"Data container to represent a C++ token.\n    Tokens can be identifiers, syntax char(s), constants, or\n    pre-processor directives.\n    start contains the index of the first char of the token in the source",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.tokenize",
        "documentation": {}
    },
    {
        "label": "PREPROCESSOR",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.tokenize",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.tokenize",
        "peekOfCode": "PREPROCESSOR = 'PREPROCESSOR'\n# Where the token originated from.  This can be used for backtracking.\n# It is always set to WHENCE_STREAM in this code.\nWHENCE_STREAM, WHENCE_QUEUE = range(2)\nclass Token(object):\n    \"\"\"Data container to represent a C++ token.\n    Tokens can be identifiers, syntax char(s), constants, or\n    pre-processor directives.\n    start contains the index of the first char of the token in the source\n    end contains the index of the last char of the token in the source",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.tokenize",
        "documentation": {}
    },
    {
        "label": "ReadFile",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.utils",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.utils",
        "peekOfCode": "def ReadFile(filename, print_error=True):\n    \"\"\"Returns the contents of a file.\"\"\"\n    try:\n        fp = open(filename)\n        try:\n            return fp.read()\n        finally:\n            fp.close()\n    except IOError:\n        if print_error:",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.utils",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.utils",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.utils",
        "peekOfCode": "DEBUG = True\ndef ReadFile(filename, print_error=True):\n    \"\"\"Returns the contents of a file.\"\"\"\n    try:\n        fp = open(filename)\n        try:\n            return fp.read()\n        finally:\n            fp.close()\n    except IOError:",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.generator.cpp.utils",
        "documentation": {}
    },
    {
        "label": "GetGTestRootDir",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.fuse_gmock_files",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.fuse_gmock_files",
        "peekOfCode": "def GetGTestRootDir(gmock_root):\n  \"\"\"Returns the root directory of Google Test.\"\"\"\n  return os.path.join(gmock_root, '../googletest')\ndef ValidateGMockRootDir(gmock_root):\n  \"\"\"Makes sure gmock_root points to a valid gmock root directory.\n  The function aborts the program on failure.\n  Args:\n    gmock_root: A string with the mock root directory.\n  \"\"\"\n  gtest.ValidateGTestRootDir(GetGTestRootDir(gmock_root))",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.fuse_gmock_files",
        "documentation": {}
    },
    {
        "label": "ValidateGMockRootDir",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.fuse_gmock_files",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.fuse_gmock_files",
        "peekOfCode": "def ValidateGMockRootDir(gmock_root):\n  \"\"\"Makes sure gmock_root points to a valid gmock root directory.\n  The function aborts the program on failure.\n  Args:\n    gmock_root: A string with the mock root directory.\n  \"\"\"\n  gtest.ValidateGTestRootDir(GetGTestRootDir(gmock_root))\n  gtest.VerifyFileExists(gmock_root, GMOCK_H_SEED)\n  gtest.VerifyFileExists(gmock_root, GMOCK_ALL_CC_SEED)\ndef ValidateOutputDir(output_dir):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.fuse_gmock_files",
        "documentation": {}
    },
    {
        "label": "ValidateOutputDir",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.fuse_gmock_files",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.fuse_gmock_files",
        "peekOfCode": "def ValidateOutputDir(output_dir):\n  \"\"\"Makes sure output_dir points to a valid output directory.\n  The function aborts the program on failure.\n  Args:\n    output_dir: A string representing the output directory.\n  \"\"\"\n  gtest.VerifyOutputFile(output_dir, gtest.GTEST_H_OUTPUT)\n  gtest.VerifyOutputFile(output_dir, GMOCK_H_OUTPUT)\n  gtest.VerifyOutputFile(output_dir, GMOCK_GTEST_ALL_CC_OUTPUT)\ndef FuseGMockH(gmock_root, output_dir):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.fuse_gmock_files",
        "documentation": {}
    },
    {
        "label": "FuseGMockH",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.fuse_gmock_files",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.fuse_gmock_files",
        "peekOfCode": "def FuseGMockH(gmock_root, output_dir):\n  \"\"\"Scans folder gmock_root to generate gmock/gmock.h in output_dir.\"\"\"\n  output_file = open(os.path.join(output_dir, GMOCK_H_OUTPUT), 'w')\n  processed_files = set()  # Holds all gmock headers we've processed.\n  def ProcessFile(gmock_header_path):\n    \"\"\"Processes the given gmock header file.\"\"\"\n    # We don't process the same header twice.\n    if gmock_header_path in processed_files:\n      return\n    processed_files.add(gmock_header_path)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.fuse_gmock_files",
        "documentation": {}
    },
    {
        "label": "FuseGMockAllCcToFile",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.fuse_gmock_files",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.fuse_gmock_files",
        "peekOfCode": "def FuseGMockAllCcToFile(gmock_root, output_file):\n  \"\"\"Scans folder gmock_root to fuse gmock-all.cc into output_file.\"\"\"\n  processed_files = set()\n  def ProcessFile(gmock_source_file):\n    \"\"\"Processes the given gmock source file.\"\"\"\n    # We don't process the same #included file twice.\n    if gmock_source_file in processed_files:\n      return\n    processed_files.add(gmock_source_file)\n    # Reads each line in the given gmock source file.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.fuse_gmock_files",
        "documentation": {}
    },
    {
        "label": "FuseGMockGTestAllCc",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.fuse_gmock_files",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.fuse_gmock_files",
        "peekOfCode": "def FuseGMockGTestAllCc(gmock_root, output_dir):\n  \"\"\"Scans folder gmock_root to generate gmock-gtest-all.cc in output_dir.\"\"\"\n  with open(os.path.join(output_dir, GMOCK_GTEST_ALL_CC_OUTPUT),\n            'w') as output_file:\n    # First, fuse gtest-all.cc into gmock-gtest-all.cc.\n    gtest.FuseGTestAllCcToFile(GetGTestRootDir(gmock_root), output_file)\n    # Next, append fused gmock-all.cc to gmock-gtest-all.cc.\n    FuseGMockAllCcToFile(gmock_root, output_file)\ndef FuseGMock(gmock_root, output_dir):\n  \"\"\"Fuses gtest.h, gmock.h, and gmock-gtest-all.h.\"\"\"",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.fuse_gmock_files",
        "documentation": {}
    },
    {
        "label": "FuseGMock",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.fuse_gmock_files",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.fuse_gmock_files",
        "peekOfCode": "def FuseGMock(gmock_root, output_dir):\n  \"\"\"Fuses gtest.h, gmock.h, and gmock-gtest-all.h.\"\"\"\n  ValidateGMockRootDir(gmock_root)\n  ValidateOutputDir(output_dir)\n  gtest.FuseGTestH(GetGTestRootDir(gmock_root), output_dir)\n  FuseGMockH(gmock_root, output_dir)\n  FuseGMockGTestAllCc(gmock_root, output_dir)\ndef main():\n  argc = len(sys.argv)\n  if argc == 2:",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.fuse_gmock_files",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.fuse_gmock_files",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.fuse_gmock_files",
        "peekOfCode": "def main():\n  argc = len(sys.argv)\n  if argc == 2:\n    # fuse_gmock_files.py OUTPUT_DIR\n    FuseGMock(DEFAULT_GMOCK_ROOT_DIR, sys.argv[1])\n  elif argc == 3:\n    # fuse_gmock_files.py GMOCK_ROOT_DIR OUTPUT_DIR\n    FuseGMock(sys.argv[1], sys.argv[2])\n  else:\n    print(__doc__)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.fuse_gmock_files",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.fuse_gmock_files",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.fuse_gmock_files",
        "peekOfCode": "__author__ = 'wan@google.com (Zhanyong Wan)'\n# We assume that this file is in the scripts/ directory in the Google\n# Mock root directory.\nDEFAULT_GMOCK_ROOT_DIR = os.path.join(os.path.dirname(__file__), '..')\n# We need to call into googletest/scripts/fuse_gtest_files.py.\nsys.path.append(os.path.join(DEFAULT_GMOCK_ROOT_DIR, '../googletest/scripts'))\nimport fuse_gtest_files as gtest  # pylint:disable=g-import-not-at-top\n# Regex for matching\n# '#include \"gmock/...\"'.\nINCLUDE_GMOCK_FILE_REGEX = re.compile(r'^\\s*#\\s*include\\s*\"(gmock/.+)\"')",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.fuse_gmock_files",
        "documentation": {}
    },
    {
        "label": "DEFAULT_GMOCK_ROOT_DIR",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.fuse_gmock_files",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.fuse_gmock_files",
        "peekOfCode": "DEFAULT_GMOCK_ROOT_DIR = os.path.join(os.path.dirname(__file__), '..')\n# We need to call into googletest/scripts/fuse_gtest_files.py.\nsys.path.append(os.path.join(DEFAULT_GMOCK_ROOT_DIR, '../googletest/scripts'))\nimport fuse_gtest_files as gtest  # pylint:disable=g-import-not-at-top\n# Regex for matching\n# '#include \"gmock/...\"'.\nINCLUDE_GMOCK_FILE_REGEX = re.compile(r'^\\s*#\\s*include\\s*\"(gmock/.+)\"')\n# Where to find the source seed files.\nGMOCK_H_SEED = 'include/gmock/gmock.h'\nGMOCK_ALL_CC_SEED = 'src/gmock-all.cc'",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.fuse_gmock_files",
        "documentation": {}
    },
    {
        "label": "INCLUDE_GMOCK_FILE_REGEX",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.fuse_gmock_files",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.fuse_gmock_files",
        "peekOfCode": "INCLUDE_GMOCK_FILE_REGEX = re.compile(r'^\\s*#\\s*include\\s*\"(gmock/.+)\"')\n# Where to find the source seed files.\nGMOCK_H_SEED = 'include/gmock/gmock.h'\nGMOCK_ALL_CC_SEED = 'src/gmock-all.cc'\n# Where to put the generated files.\nGTEST_H_OUTPUT = 'gtest/gtest.h'\nGMOCK_H_OUTPUT = 'gmock/gmock.h'\nGMOCK_GTEST_ALL_CC_OUTPUT = 'gmock-gtest-all.cc'\ndef GetGTestRootDir(gmock_root):\n  \"\"\"Returns the root directory of Google Test.\"\"\"",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.fuse_gmock_files",
        "documentation": {}
    },
    {
        "label": "GMOCK_H_SEED",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.fuse_gmock_files",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.fuse_gmock_files",
        "peekOfCode": "GMOCK_H_SEED = 'include/gmock/gmock.h'\nGMOCK_ALL_CC_SEED = 'src/gmock-all.cc'\n# Where to put the generated files.\nGTEST_H_OUTPUT = 'gtest/gtest.h'\nGMOCK_H_OUTPUT = 'gmock/gmock.h'\nGMOCK_GTEST_ALL_CC_OUTPUT = 'gmock-gtest-all.cc'\ndef GetGTestRootDir(gmock_root):\n  \"\"\"Returns the root directory of Google Test.\"\"\"\n  return os.path.join(gmock_root, '../googletest')\ndef ValidateGMockRootDir(gmock_root):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.fuse_gmock_files",
        "documentation": {}
    },
    {
        "label": "GMOCK_ALL_CC_SEED",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.fuse_gmock_files",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.fuse_gmock_files",
        "peekOfCode": "GMOCK_ALL_CC_SEED = 'src/gmock-all.cc'\n# Where to put the generated files.\nGTEST_H_OUTPUT = 'gtest/gtest.h'\nGMOCK_H_OUTPUT = 'gmock/gmock.h'\nGMOCK_GTEST_ALL_CC_OUTPUT = 'gmock-gtest-all.cc'\ndef GetGTestRootDir(gmock_root):\n  \"\"\"Returns the root directory of Google Test.\"\"\"\n  return os.path.join(gmock_root, '../googletest')\ndef ValidateGMockRootDir(gmock_root):\n  \"\"\"Makes sure gmock_root points to a valid gmock root directory.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.fuse_gmock_files",
        "documentation": {}
    },
    {
        "label": "GTEST_H_OUTPUT",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.fuse_gmock_files",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.fuse_gmock_files",
        "peekOfCode": "GTEST_H_OUTPUT = 'gtest/gtest.h'\nGMOCK_H_OUTPUT = 'gmock/gmock.h'\nGMOCK_GTEST_ALL_CC_OUTPUT = 'gmock-gtest-all.cc'\ndef GetGTestRootDir(gmock_root):\n  \"\"\"Returns the root directory of Google Test.\"\"\"\n  return os.path.join(gmock_root, '../googletest')\ndef ValidateGMockRootDir(gmock_root):\n  \"\"\"Makes sure gmock_root points to a valid gmock root directory.\n  The function aborts the program on failure.\n  Args:",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.fuse_gmock_files",
        "documentation": {}
    },
    {
        "label": "GMOCK_H_OUTPUT",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.fuse_gmock_files",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.fuse_gmock_files",
        "peekOfCode": "GMOCK_H_OUTPUT = 'gmock/gmock.h'\nGMOCK_GTEST_ALL_CC_OUTPUT = 'gmock-gtest-all.cc'\ndef GetGTestRootDir(gmock_root):\n  \"\"\"Returns the root directory of Google Test.\"\"\"\n  return os.path.join(gmock_root, '../googletest')\ndef ValidateGMockRootDir(gmock_root):\n  \"\"\"Makes sure gmock_root points to a valid gmock root directory.\n  The function aborts the program on failure.\n  Args:\n    gmock_root: A string with the mock root directory.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.fuse_gmock_files",
        "documentation": {}
    },
    {
        "label": "GMOCK_GTEST_ALL_CC_OUTPUT",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.fuse_gmock_files",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.fuse_gmock_files",
        "peekOfCode": "GMOCK_GTEST_ALL_CC_OUTPUT = 'gmock-gtest-all.cc'\ndef GetGTestRootDir(gmock_root):\n  \"\"\"Returns the root directory of Google Test.\"\"\"\n  return os.path.join(gmock_root, '../googletest')\ndef ValidateGMockRootDir(gmock_root):\n  \"\"\"Makes sure gmock_root points to a valid gmock root directory.\n  The function aborts the program on failure.\n  Args:\n    gmock_root: A string with the mock root directory.\n  \"\"\"",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.scripts.fuse_gmock_files",
        "documentation": {}
    },
    {
        "label": "GMockLeakTest",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_leak_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_leak_test",
        "peekOfCode": "class GMockLeakTest(gmock_test_utils.TestCase):\n  def testCatchesLeakedMockByDefault(self):\n    self.assertNotEqual(\n        0,\n        gmock_test_utils.Subprocess(TEST_WITH_EXPECT_CALL,\n                                    env=environ).exit_code)\n    self.assertNotEqual(\n        0,\n        gmock_test_utils.Subprocess(TEST_WITH_ON_CALL,\n                                    env=environ).exit_code)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_leak_test",
        "documentation": {}
    },
    {
        "label": "PROGRAM_PATH",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_leak_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_leak_test",
        "peekOfCode": "PROGRAM_PATH = gmock_test_utils.GetTestExecutablePath('gmock_leak_test_')\nTEST_WITH_EXPECT_CALL = [PROGRAM_PATH, '--gtest_filter=*ExpectCall*']\nTEST_WITH_ON_CALL = [PROGRAM_PATH, '--gtest_filter=*OnCall*']\nTEST_MULTIPLE_LEAKS = [PROGRAM_PATH, '--gtest_filter=*MultipleLeaked*']\nenviron = gmock_test_utils.environ\nSetEnvVar = gmock_test_utils.SetEnvVar\n# Tests in this file run a Google-Test-based test program and expect it\n# to terminate prematurely.  Therefore they are incompatible with\n# the premature-exit-file protocol by design.  Unset the\n# premature-exit filepath to prevent Google Test from creating",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_leak_test",
        "documentation": {}
    },
    {
        "label": "TEST_WITH_EXPECT_CALL",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_leak_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_leak_test",
        "peekOfCode": "TEST_WITH_EXPECT_CALL = [PROGRAM_PATH, '--gtest_filter=*ExpectCall*']\nTEST_WITH_ON_CALL = [PROGRAM_PATH, '--gtest_filter=*OnCall*']\nTEST_MULTIPLE_LEAKS = [PROGRAM_PATH, '--gtest_filter=*MultipleLeaked*']\nenviron = gmock_test_utils.environ\nSetEnvVar = gmock_test_utils.SetEnvVar\n# Tests in this file run a Google-Test-based test program and expect it\n# to terminate prematurely.  Therefore they are incompatible with\n# the premature-exit-file protocol by design.  Unset the\n# premature-exit filepath to prevent Google Test from creating\n# the file.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_leak_test",
        "documentation": {}
    },
    {
        "label": "TEST_WITH_ON_CALL",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_leak_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_leak_test",
        "peekOfCode": "TEST_WITH_ON_CALL = [PROGRAM_PATH, '--gtest_filter=*OnCall*']\nTEST_MULTIPLE_LEAKS = [PROGRAM_PATH, '--gtest_filter=*MultipleLeaked*']\nenviron = gmock_test_utils.environ\nSetEnvVar = gmock_test_utils.SetEnvVar\n# Tests in this file run a Google-Test-based test program and expect it\n# to terminate prematurely.  Therefore they are incompatible with\n# the premature-exit-file protocol by design.  Unset the\n# premature-exit filepath to prevent Google Test from creating\n# the file.\nSetEnvVar(gmock_test_utils.PREMATURE_EXIT_FILE_ENV_VAR, None)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_leak_test",
        "documentation": {}
    },
    {
        "label": "TEST_MULTIPLE_LEAKS",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_leak_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_leak_test",
        "peekOfCode": "TEST_MULTIPLE_LEAKS = [PROGRAM_PATH, '--gtest_filter=*MultipleLeaked*']\nenviron = gmock_test_utils.environ\nSetEnvVar = gmock_test_utils.SetEnvVar\n# Tests in this file run a Google-Test-based test program and expect it\n# to terminate prematurely.  Therefore they are incompatible with\n# the premature-exit-file protocol by design.  Unset the\n# premature-exit filepath to prevent Google Test from creating\n# the file.\nSetEnvVar(gmock_test_utils.PREMATURE_EXIT_FILE_ENV_VAR, None)\nclass GMockLeakTest(gmock_test_utils.TestCase):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_leak_test",
        "documentation": {}
    },
    {
        "label": "environ",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_leak_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_leak_test",
        "peekOfCode": "environ = gmock_test_utils.environ\nSetEnvVar = gmock_test_utils.SetEnvVar\n# Tests in this file run a Google-Test-based test program and expect it\n# to terminate prematurely.  Therefore they are incompatible with\n# the premature-exit-file protocol by design.  Unset the\n# premature-exit filepath to prevent Google Test from creating\n# the file.\nSetEnvVar(gmock_test_utils.PREMATURE_EXIT_FILE_ENV_VAR, None)\nclass GMockLeakTest(gmock_test_utils.TestCase):\n  def testCatchesLeakedMockByDefault(self):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_leak_test",
        "documentation": {}
    },
    {
        "label": "SetEnvVar",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_leak_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_leak_test",
        "peekOfCode": "SetEnvVar = gmock_test_utils.SetEnvVar\n# Tests in this file run a Google-Test-based test program and expect it\n# to terminate prematurely.  Therefore they are incompatible with\n# the premature-exit-file protocol by design.  Unset the\n# premature-exit filepath to prevent Google Test from creating\n# the file.\nSetEnvVar(gmock_test_utils.PREMATURE_EXIT_FILE_ENV_VAR, None)\nclass GMockLeakTest(gmock_test_utils.TestCase):\n  def testCatchesLeakedMockByDefault(self):\n    self.assertNotEqual(",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_leak_test",
        "documentation": {}
    },
    {
        "label": "GMockOutputTest",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_output_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_output_test",
        "peekOfCode": "class GMockOutputTest(gmock_test_utils.TestCase):\n  def testOutput(self):\n    (output, leaky_tests) = GetNormalizedCommandOutputAndLeakyTests(COMMAND)\n    golden_file = open(GOLDEN_PATH, 'rb')\n    golden = golden_file.read().decode('utf-8')\n    golden_file.close()\n    # The normalized output should match the golden file.\n    self.assertEquals(golden, output)\n    # The raw output should contain 2 leaked mock object errors for\n    # test GMockOutputTest.CatchesLeakedMocks.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_output_test",
        "documentation": {}
    },
    {
        "label": "ToUnixLineEnding",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_output_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_output_test",
        "peekOfCode": "def ToUnixLineEnding(s):\n  \"\"\"Changes all Windows/Mac line endings in s to UNIX line endings.\"\"\"\n  return s.replace('\\r\\n', '\\n').replace('\\r', '\\n')\ndef RemoveReportHeaderAndFooter(output):\n  \"\"\"Removes Google Test result report's header and footer from the output.\"\"\"\n  output = re.sub(r'.*gtest_main.*\\n', '', output)\n  output = re.sub(r'\\[.*\\d+ tests.*\\n', '', output)\n  output = re.sub(r'\\[.* test environment .*\\n', '', output)\n  output = re.sub(r'\\[=+\\] \\d+ tests .* ran.*', '', output)\n  output = re.sub(r'.* FAILED TESTS\\n', '', output)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_output_test",
        "documentation": {}
    },
    {
        "label": "RemoveReportHeaderAndFooter",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_output_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_output_test",
        "peekOfCode": "def RemoveReportHeaderAndFooter(output):\n  \"\"\"Removes Google Test result report's header and footer from the output.\"\"\"\n  output = re.sub(r'.*gtest_main.*\\n', '', output)\n  output = re.sub(r'\\[.*\\d+ tests.*\\n', '', output)\n  output = re.sub(r'\\[.* test environment .*\\n', '', output)\n  output = re.sub(r'\\[=+\\] \\d+ tests .* ran.*', '', output)\n  output = re.sub(r'.* FAILED TESTS\\n', '', output)\n  return output\ndef RemoveLocations(output):\n  \"\"\"Removes all file location info from a Google Test program's output.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_output_test",
        "documentation": {}
    },
    {
        "label": "RemoveLocations",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_output_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_output_test",
        "peekOfCode": "def RemoveLocations(output):\n  \"\"\"Removes all file location info from a Google Test program's output.\n  Args:\n       output:  the output of a Google Test program.\n  Returns:\n       output with all file location info (in the form of\n       'DIRECTORY/FILE_NAME:LINE_NUMBER: 'or\n       'DIRECTORY\\\\FILE_NAME(LINE_NUMBER): ') replaced by\n       'FILE:#: '.\n  \"\"\"",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_output_test",
        "documentation": {}
    },
    {
        "label": "NormalizeErrorMarker",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_output_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_output_test",
        "peekOfCode": "def NormalizeErrorMarker(output):\n  \"\"\"Normalizes the error marker, which is different on Windows vs on Linux.\"\"\"\n  return re.sub(r' error: ', ' Failure\\n', output)\ndef RemoveMemoryAddresses(output):\n  \"\"\"Removes memory addresses from the test output.\"\"\"\n  return re.sub(r'@\\w+', '@0x#', output)\ndef RemoveTestNamesOfLeakedMocks(output):\n  \"\"\"Removes the test names of leaked mock objects from the test output.\"\"\"\n  return re.sub(r'\\(used in test .+\\) ', '', output)\ndef GetLeakyTests(output):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_output_test",
        "documentation": {}
    },
    {
        "label": "RemoveMemoryAddresses",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_output_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_output_test",
        "peekOfCode": "def RemoveMemoryAddresses(output):\n  \"\"\"Removes memory addresses from the test output.\"\"\"\n  return re.sub(r'@\\w+', '@0x#', output)\ndef RemoveTestNamesOfLeakedMocks(output):\n  \"\"\"Removes the test names of leaked mock objects from the test output.\"\"\"\n  return re.sub(r'\\(used in test .+\\) ', '', output)\ndef GetLeakyTests(output):\n  \"\"\"Returns a list of test names that leak mock objects.\"\"\"\n  # findall() returns a list of all matches of the regex in output.\n  # For example, if '(used in test FooTest.Bar)' is in output, the",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_output_test",
        "documentation": {}
    },
    {
        "label": "RemoveTestNamesOfLeakedMocks",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_output_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_output_test",
        "peekOfCode": "def RemoveTestNamesOfLeakedMocks(output):\n  \"\"\"Removes the test names of leaked mock objects from the test output.\"\"\"\n  return re.sub(r'\\(used in test .+\\) ', '', output)\ndef GetLeakyTests(output):\n  \"\"\"Returns a list of test names that leak mock objects.\"\"\"\n  # findall() returns a list of all matches of the regex in output.\n  # For example, if '(used in test FooTest.Bar)' is in output, the\n  # list will contain 'FooTest.Bar'.\n  return re.findall(r'\\(used in test (.+)\\)', output)\ndef GetNormalizedOutputAndLeakyTests(output):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_output_test",
        "documentation": {}
    },
    {
        "label": "GetLeakyTests",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_output_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_output_test",
        "peekOfCode": "def GetLeakyTests(output):\n  \"\"\"Returns a list of test names that leak mock objects.\"\"\"\n  # findall() returns a list of all matches of the regex in output.\n  # For example, if '(used in test FooTest.Bar)' is in output, the\n  # list will contain 'FooTest.Bar'.\n  return re.findall(r'\\(used in test (.+)\\)', output)\ndef GetNormalizedOutputAndLeakyTests(output):\n  \"\"\"Normalizes the output of gmock_output_test_.\n  Args:\n    output: The test output.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_output_test",
        "documentation": {}
    },
    {
        "label": "GetNormalizedOutputAndLeakyTests",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_output_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_output_test",
        "peekOfCode": "def GetNormalizedOutputAndLeakyTests(output):\n  \"\"\"Normalizes the output of gmock_output_test_.\n  Args:\n    output: The test output.\n  Returns:\n    A tuple (the normalized test output, the list of test names that have\n    leaked mocks).\n  \"\"\"\n  output = ToUnixLineEnding(output)\n  output = RemoveReportHeaderAndFooter(output)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_output_test",
        "documentation": {}
    },
    {
        "label": "GetShellCommandOutput",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_output_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_output_test",
        "peekOfCode": "def GetShellCommandOutput(cmd):\n  \"\"\"Runs a command in a sub-process, and returns its STDOUT in a string.\"\"\"\n  return gmock_test_utils.Subprocess(cmd, capture_stderr=False).output\ndef GetNormalizedCommandOutputAndLeakyTests(cmd):\n  \"\"\"Runs a command and returns its normalized output and a list of leaky tests.\n  Args:\n    cmd:  the shell command.\n  \"\"\"\n  # Disables exception pop-ups on Windows.\n  os.environ['GTEST_CATCH_EXCEPTIONS'] = '1'",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_output_test",
        "documentation": {}
    },
    {
        "label": "GetNormalizedCommandOutputAndLeakyTests",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_output_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_output_test",
        "peekOfCode": "def GetNormalizedCommandOutputAndLeakyTests(cmd):\n  \"\"\"Runs a command and returns its normalized output and a list of leaky tests.\n  Args:\n    cmd:  the shell command.\n  \"\"\"\n  # Disables exception pop-ups on Windows.\n  os.environ['GTEST_CATCH_EXCEPTIONS'] = '1'\n  return GetNormalizedOutputAndLeakyTests(GetShellCommandOutput(cmd))\nclass GMockOutputTest(gmock_test_utils.TestCase):\n  def testOutput(self):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_output_test",
        "documentation": {}
    },
    {
        "label": "GENGOLDEN_FLAG",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_output_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_output_test",
        "peekOfCode": "GENGOLDEN_FLAG = '--gengolden'\nPROGRAM_PATH = gmock_test_utils.GetTestExecutablePath('gmock_output_test_')\nCOMMAND = [PROGRAM_PATH, '--gtest_stack_trace_depth=0', '--gtest_print_time=0']\nGOLDEN_NAME = 'gmock_output_test_golden.txt'\nGOLDEN_PATH = os.path.join(gmock_test_utils.GetSourceDir(), GOLDEN_NAME)\ndef ToUnixLineEnding(s):\n  \"\"\"Changes all Windows/Mac line endings in s to UNIX line endings.\"\"\"\n  return s.replace('\\r\\n', '\\n').replace('\\r', '\\n')\ndef RemoveReportHeaderAndFooter(output):\n  \"\"\"Removes Google Test result report's header and footer from the output.\"\"\"",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_output_test",
        "documentation": {}
    },
    {
        "label": "PROGRAM_PATH",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_output_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_output_test",
        "peekOfCode": "PROGRAM_PATH = gmock_test_utils.GetTestExecutablePath('gmock_output_test_')\nCOMMAND = [PROGRAM_PATH, '--gtest_stack_trace_depth=0', '--gtest_print_time=0']\nGOLDEN_NAME = 'gmock_output_test_golden.txt'\nGOLDEN_PATH = os.path.join(gmock_test_utils.GetSourceDir(), GOLDEN_NAME)\ndef ToUnixLineEnding(s):\n  \"\"\"Changes all Windows/Mac line endings in s to UNIX line endings.\"\"\"\n  return s.replace('\\r\\n', '\\n').replace('\\r', '\\n')\ndef RemoveReportHeaderAndFooter(output):\n  \"\"\"Removes Google Test result report's header and footer from the output.\"\"\"\n  output = re.sub(r'.*gtest_main.*\\n', '', output)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_output_test",
        "documentation": {}
    },
    {
        "label": "COMMAND",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_output_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_output_test",
        "peekOfCode": "COMMAND = [PROGRAM_PATH, '--gtest_stack_trace_depth=0', '--gtest_print_time=0']\nGOLDEN_NAME = 'gmock_output_test_golden.txt'\nGOLDEN_PATH = os.path.join(gmock_test_utils.GetSourceDir(), GOLDEN_NAME)\ndef ToUnixLineEnding(s):\n  \"\"\"Changes all Windows/Mac line endings in s to UNIX line endings.\"\"\"\n  return s.replace('\\r\\n', '\\n').replace('\\r', '\\n')\ndef RemoveReportHeaderAndFooter(output):\n  \"\"\"Removes Google Test result report's header and footer from the output.\"\"\"\n  output = re.sub(r'.*gtest_main.*\\n', '', output)\n  output = re.sub(r'\\[.*\\d+ tests.*\\n', '', output)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_output_test",
        "documentation": {}
    },
    {
        "label": "GOLDEN_NAME",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_output_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_output_test",
        "peekOfCode": "GOLDEN_NAME = 'gmock_output_test_golden.txt'\nGOLDEN_PATH = os.path.join(gmock_test_utils.GetSourceDir(), GOLDEN_NAME)\ndef ToUnixLineEnding(s):\n  \"\"\"Changes all Windows/Mac line endings in s to UNIX line endings.\"\"\"\n  return s.replace('\\r\\n', '\\n').replace('\\r', '\\n')\ndef RemoveReportHeaderAndFooter(output):\n  \"\"\"Removes Google Test result report's header and footer from the output.\"\"\"\n  output = re.sub(r'.*gtest_main.*\\n', '', output)\n  output = re.sub(r'\\[.*\\d+ tests.*\\n', '', output)\n  output = re.sub(r'\\[.* test environment .*\\n', '', output)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_output_test",
        "documentation": {}
    },
    {
        "label": "GOLDEN_PATH",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_output_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_output_test",
        "peekOfCode": "GOLDEN_PATH = os.path.join(gmock_test_utils.GetSourceDir(), GOLDEN_NAME)\ndef ToUnixLineEnding(s):\n  \"\"\"Changes all Windows/Mac line endings in s to UNIX line endings.\"\"\"\n  return s.replace('\\r\\n', '\\n').replace('\\r', '\\n')\ndef RemoveReportHeaderAndFooter(output):\n  \"\"\"Removes Google Test result report's header and footer from the output.\"\"\"\n  output = re.sub(r'.*gtest_main.*\\n', '', output)\n  output = re.sub(r'\\[.*\\d+ tests.*\\n', '', output)\n  output = re.sub(r'\\[.* test environment .*\\n', '', output)\n  output = re.sub(r'\\[=+\\] \\d+ tests .* ran.*', '', output)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_output_test",
        "documentation": {}
    },
    {
        "label": "GetSourceDir",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_test_utils",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_test_utils",
        "peekOfCode": "def GetSourceDir():\n  \"\"\"Returns the absolute path of the directory where the .py files are.\"\"\"\n  return gtest_test_utils.GetSourceDir()\ndef GetTestExecutablePath(executable_name):\n  \"\"\"Returns the absolute path of the test binary given its name.\n  The function will print a message and abort the program if the resulting file\n  doesn't exist.\n  Args:\n    executable_name: name of the test binary that the test script runs.\n  Returns:",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_test_utils",
        "documentation": {}
    },
    {
        "label": "GetTestExecutablePath",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_test_utils",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_test_utils",
        "peekOfCode": "def GetTestExecutablePath(executable_name):\n  \"\"\"Returns the absolute path of the test binary given its name.\n  The function will print a message and abort the program if the resulting file\n  doesn't exist.\n  Args:\n    executable_name: name of the test binary that the test script runs.\n  Returns:\n    The absolute path of the test binary.\n  \"\"\"\n  return gtest_test_utils.GetTestExecutablePath(executable_name)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_test_utils",
        "documentation": {}
    },
    {
        "label": "GetExitStatus",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_test_utils",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_test_utils",
        "peekOfCode": "def GetExitStatus(exit_code):\n  \"\"\"Returns the argument to exit(), or -1 if exit() wasn't called.\n  Args:\n    exit_code: the result value of os.system(command).\n  \"\"\"\n  if os.name == 'nt':\n    # On Windows, os.WEXITSTATUS() doesn't work and os.system() returns\n    # the argument to exit() directly.\n    return exit_code\n  else:",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_test_utils",
        "documentation": {}
    },
    {
        "label": "Main",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_test_utils",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_test_utils",
        "peekOfCode": "def Main():\n  \"\"\"Runs the unit test.\"\"\"\n  gtest_test_utils.Main()",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_test_utils",
        "documentation": {}
    },
    {
        "label": "SCRIPT_DIR",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_test_utils",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_test_utils",
        "peekOfCode": "SCRIPT_DIR = os.path.dirname(__file__) or '.'\n# isdir resolves symbolic links.\ngtest_tests_util_dir = os.path.join(SCRIPT_DIR, '../../googletest/test')\nif os.path.isdir(gtest_tests_util_dir):\n  GTEST_TESTS_UTIL_DIR = gtest_tests_util_dir\nelse:\n  GTEST_TESTS_UTIL_DIR = os.path.join(SCRIPT_DIR, '../../googletest/test')\nsys.path.append(GTEST_TESTS_UTIL_DIR)\n# pylint: disable=C6204\nimport gtest_test_utils",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_test_utils",
        "documentation": {}
    },
    {
        "label": "gtest_tests_util_dir",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_test_utils",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_test_utils",
        "peekOfCode": "gtest_tests_util_dir = os.path.join(SCRIPT_DIR, '../../googletest/test')\nif os.path.isdir(gtest_tests_util_dir):\n  GTEST_TESTS_UTIL_DIR = gtest_tests_util_dir\nelse:\n  GTEST_TESTS_UTIL_DIR = os.path.join(SCRIPT_DIR, '../../googletest/test')\nsys.path.append(GTEST_TESTS_UTIL_DIR)\n# pylint: disable=C6204\nimport gtest_test_utils\ndef GetSourceDir():\n  \"\"\"Returns the absolute path of the directory where the .py files are.\"\"\"",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_test_utils",
        "documentation": {}
    },
    {
        "label": "Subprocess",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_test_utils",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_test_utils",
        "peekOfCode": "Subprocess = gtest_test_utils.Subprocess\nTestCase = gtest_test_utils.TestCase\nenviron = gtest_test_utils.environ\nSetEnvVar = gtest_test_utils.SetEnvVar\nPREMATURE_EXIT_FILE_ENV_VAR = gtest_test_utils.PREMATURE_EXIT_FILE_ENV_VAR\n# pylint: enable-msg=C6409\ndef Main():\n  \"\"\"Runs the unit test.\"\"\"\n  gtest_test_utils.Main()",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_test_utils",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_test_utils",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_test_utils",
        "peekOfCode": "TestCase = gtest_test_utils.TestCase\nenviron = gtest_test_utils.environ\nSetEnvVar = gtest_test_utils.SetEnvVar\nPREMATURE_EXIT_FILE_ENV_VAR = gtest_test_utils.PREMATURE_EXIT_FILE_ENV_VAR\n# pylint: enable-msg=C6409\ndef Main():\n  \"\"\"Runs the unit test.\"\"\"\n  gtest_test_utils.Main()",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_test_utils",
        "documentation": {}
    },
    {
        "label": "environ",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_test_utils",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_test_utils",
        "peekOfCode": "environ = gtest_test_utils.environ\nSetEnvVar = gtest_test_utils.SetEnvVar\nPREMATURE_EXIT_FILE_ENV_VAR = gtest_test_utils.PREMATURE_EXIT_FILE_ENV_VAR\n# pylint: enable-msg=C6409\ndef Main():\n  \"\"\"Runs the unit test.\"\"\"\n  gtest_test_utils.Main()",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_test_utils",
        "documentation": {}
    },
    {
        "label": "SetEnvVar",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_test_utils",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_test_utils",
        "peekOfCode": "SetEnvVar = gtest_test_utils.SetEnvVar\nPREMATURE_EXIT_FILE_ENV_VAR = gtest_test_utils.PREMATURE_EXIT_FILE_ENV_VAR\n# pylint: enable-msg=C6409\ndef Main():\n  \"\"\"Runs the unit test.\"\"\"\n  gtest_test_utils.Main()",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_test_utils",
        "documentation": {}
    },
    {
        "label": "PREMATURE_EXIT_FILE_ENV_VAR",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_test_utils",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_test_utils",
        "peekOfCode": "PREMATURE_EXIT_FILE_ENV_VAR = gtest_test_utils.PREMATURE_EXIT_FILE_ENV_VAR\n# pylint: enable-msg=C6409\ndef Main():\n  \"\"\"Runs the unit test.\"\"\"\n  gtest_test_utils.Main()",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googlemock.test.gmock_test_utils",
        "documentation": {}
    },
    {
        "label": "GetCommandOutput",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.common",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.common",
        "peekOfCode": "def GetCommandOutput(command):\n  \"\"\"Runs the shell command and returns its stdout as a list of lines.\"\"\"\n  f = os.popen(command, 'r')\n  lines = [line.strip() for line in f.readlines()]\n  f.close()\n  return lines\ndef GetSvnInfo():\n  \"\"\"Returns the project name and the current SVN workspace's root path.\"\"\"\n  for line in GetCommandOutput('svn info .'):\n    m = _SVN_INFO_URL_RE.match(line)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.common",
        "documentation": {}
    },
    {
        "label": "GetSvnInfo",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.common",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.common",
        "peekOfCode": "def GetSvnInfo():\n  \"\"\"Returns the project name and the current SVN workspace's root path.\"\"\"\n  for line in GetCommandOutput('svn info .'):\n    m = _SVN_INFO_URL_RE.match(line)\n    if m:\n      project = m.group(1)  # googletest or googlemock\n      rel_path = m.group(2)\n      root = os.path.realpath(rel_path.count('/') * '../')\n      return project, root\n  return None, None",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.common",
        "documentation": {}
    },
    {
        "label": "GetSvnTrunk",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.common",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.common",
        "peekOfCode": "def GetSvnTrunk():\n  \"\"\"Returns the current SVN workspace's trunk root path.\"\"\"\n  _, root = GetSvnInfo()\n  return root + '/trunk' if root else None\ndef IsInGTestSvn():\n  project, _ = GetSvnInfo()\n  return project == 'googletest'\ndef IsInGMockSvn():\n  project, _ = GetSvnInfo()\n  return project == 'googlemock'",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.common",
        "documentation": {}
    },
    {
        "label": "IsInGTestSvn",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.common",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.common",
        "peekOfCode": "def IsInGTestSvn():\n  project, _ = GetSvnInfo()\n  return project == 'googletest'\ndef IsInGMockSvn():\n  project, _ = GetSvnInfo()\n  return project == 'googlemock'",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.common",
        "documentation": {}
    },
    {
        "label": "IsInGMockSvn",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.common",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.common",
        "peekOfCode": "def IsInGMockSvn():\n  project, _ = GetSvnInfo()\n  return project == 'googlemock'",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.common",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.common",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.common",
        "peekOfCode": "__author__ = 'wan@google.com (Zhanyong Wan)'\nimport os\nimport re\n# Matches the line from 'svn info .' output that describes what SVN\n# path the current local directory corresponds to.  For example, in\n# a googletest SVN workspace's trunk/test directory, the output will be:\n#\n# URL: https://googletest.googlecode.com/svn/trunk/test\n_SVN_INFO_URL_RE = re.compile(r'^URL: https://(\\w+)\\.googlecode\\.com/svn(.*)')\ndef GetCommandOutput(command):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.common",
        "documentation": {}
    },
    {
        "label": "_SVN_INFO_URL_RE",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.common",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.common",
        "peekOfCode": "_SVN_INFO_URL_RE = re.compile(r'^URL: https://(\\w+)\\.googlecode\\.com/svn(.*)')\ndef GetCommandOutput(command):\n  \"\"\"Runs the shell command and returns its stdout as a list of lines.\"\"\"\n  f = os.popen(command, 'r')\n  lines = [line.strip() for line in f.readlines()]\n  f.close()\n  return lines\ndef GetSvnInfo():\n  \"\"\"Returns the project name and the current SVN workspace's root path.\"\"\"\n  for line in GetCommandOutput('svn info .'):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.common",
        "documentation": {}
    },
    {
        "label": "VerifyFileExists",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "peekOfCode": "def VerifyFileExists(directory, relative_path):\n  \"\"\"Verifies that the given file exists; aborts on failure.\n  relative_path is the file path relative to the given directory.\n  \"\"\"\n  if not os.path.isfile(os.path.join(directory, relative_path)):\n    print('ERROR: Cannot find %s in directory %s.' % (relative_path,\n                                                      directory))\n    print('Please either specify a valid project root directory '\n          'or omit it on the command line.')\n    sys.exit(1)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "documentation": {}
    },
    {
        "label": "ValidateGTestRootDir",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "peekOfCode": "def ValidateGTestRootDir(gtest_root):\n  \"\"\"Makes sure gtest_root points to a valid gtest root directory.\n  The function aborts the program on failure.\n  \"\"\"\n  VerifyFileExists(gtest_root, GTEST_H_SEED)\n  VerifyFileExists(gtest_root, GTEST_ALL_CC_SEED)\ndef VerifyOutputFile(output_dir, relative_path):\n  \"\"\"Verifies that the given output file path is valid.\n  relative_path is relative to the output_dir directory.\n  \"\"\"",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "documentation": {}
    },
    {
        "label": "VerifyOutputFile",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "peekOfCode": "def VerifyOutputFile(output_dir, relative_path):\n  \"\"\"Verifies that the given output file path is valid.\n  relative_path is relative to the output_dir directory.\n  \"\"\"\n  # Makes sure the output file either doesn't exist or can be overwritten.\n  output_file = os.path.join(output_dir, relative_path)\n  if os.path.exists(output_file):\n    # TODO(wan@google.com): The following user-interaction doesn't\n    # work with automated processes.  We should provide a way for the\n    # Makefile to force overwriting the files.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "documentation": {}
    },
    {
        "label": "ValidateOutputDir",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "peekOfCode": "def ValidateOutputDir(output_dir):\n  \"\"\"Makes sure output_dir points to a valid output directory.\n  The function aborts the program on failure.\n  \"\"\"\n  VerifyOutputFile(output_dir, GTEST_H_OUTPUT)\n  VerifyOutputFile(output_dir, GTEST_ALL_CC_OUTPUT)\ndef FuseGTestH(gtest_root, output_dir):\n  \"\"\"Scans folder gtest_root to generate gtest/gtest.h in output_dir.\"\"\"\n  output_file = open(os.path.join(output_dir, GTEST_H_OUTPUT), 'w')\n  processed_files = set()  # Holds all gtest headers we've processed.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "documentation": {}
    },
    {
        "label": "FuseGTestH",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "peekOfCode": "def FuseGTestH(gtest_root, output_dir):\n  \"\"\"Scans folder gtest_root to generate gtest/gtest.h in output_dir.\"\"\"\n  output_file = open(os.path.join(output_dir, GTEST_H_OUTPUT), 'w')\n  processed_files = set()  # Holds all gtest headers we've processed.\n  def ProcessFile(gtest_header_path):\n    \"\"\"Processes the given gtest header file.\"\"\"\n    # We don't process the same header twice.\n    if gtest_header_path in processed_files:\n      return\n    processed_files.add(gtest_header_path)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "documentation": {}
    },
    {
        "label": "FuseGTestAllCcToFile",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "peekOfCode": "def FuseGTestAllCcToFile(gtest_root, output_file):\n  \"\"\"Scans folder gtest_root to generate gtest/gtest-all.cc in output_file.\"\"\"\n  processed_files = set()\n  def ProcessFile(gtest_source_file):\n    \"\"\"Processes the given gtest source file.\"\"\"\n    # We don't process the same #included file twice.\n    if gtest_source_file in processed_files:\n      return\n    processed_files.add(gtest_source_file)\n    # Reads each line in the given gtest source file.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "documentation": {}
    },
    {
        "label": "FuseGTestAllCc",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "peekOfCode": "def FuseGTestAllCc(gtest_root, output_dir):\n  \"\"\"Scans folder gtest_root to generate gtest/gtest-all.cc in output_dir.\"\"\"\n  output_file = open(os.path.join(output_dir, GTEST_ALL_CC_OUTPUT), 'w')\n  FuseGTestAllCcToFile(gtest_root, output_file)\n  output_file.close()\ndef FuseGTest(gtest_root, output_dir):\n  \"\"\"Fuses gtest.h and gtest-all.cc.\"\"\"\n  ValidateGTestRootDir(gtest_root)\n  ValidateOutputDir(output_dir)\n  FuseGTestH(gtest_root, output_dir)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "documentation": {}
    },
    {
        "label": "FuseGTest",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "peekOfCode": "def FuseGTest(gtest_root, output_dir):\n  \"\"\"Fuses gtest.h and gtest-all.cc.\"\"\"\n  ValidateGTestRootDir(gtest_root)\n  ValidateOutputDir(output_dir)\n  FuseGTestH(gtest_root, output_dir)\n  FuseGTestAllCc(gtest_root, output_dir)\ndef main():\n  argc = len(sys.argv)\n  if argc == 2:\n    # fuse_gtest_files.py OUTPUT_DIR",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "peekOfCode": "def main():\n  argc = len(sys.argv)\n  if argc == 2:\n    # fuse_gtest_files.py OUTPUT_DIR\n    FuseGTest(DEFAULT_GTEST_ROOT_DIR, sys.argv[1])\n  elif argc == 3:\n    # fuse_gtest_files.py GTEST_ROOT_DIR OUTPUT_DIR\n    FuseGTest(sys.argv[1], sys.argv[2])\n  else:\n    print(__doc__)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "peekOfCode": "__author__ = 'wan@google.com (Zhanyong Wan)'\nimport os\nimport re\ntry:\n  from sets import Set as set  # For Python 2.3 compatibility\nexcept ImportError:\n  pass\nimport sys\n# We assume that this file is in the scripts/ directory in the Google\n# Test root directory.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "documentation": {}
    },
    {
        "label": "DEFAULT_GTEST_ROOT_DIR",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "peekOfCode": "DEFAULT_GTEST_ROOT_DIR = os.path.join(os.path.dirname(__file__), '..')\n# Regex for matching '#include \"gtest/...\"'.\nINCLUDE_GTEST_FILE_REGEX = re.compile(r'^\\s*#\\s*include\\s*\"(gtest/.+)\"')\n# Regex for matching '#include \"src/...\"'.\nINCLUDE_SRC_FILE_REGEX = re.compile(r'^\\s*#\\s*include\\s*\"(src/.+)\"')\n# Where to find the source seed files.\nGTEST_H_SEED = 'include/gtest/gtest.h'\nGTEST_SPI_H_SEED = 'include/gtest/gtest-spi.h'\nGTEST_ALL_CC_SEED = 'src/gtest-all.cc'\n# Where to put the generated files.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "documentation": {}
    },
    {
        "label": "INCLUDE_GTEST_FILE_REGEX",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "peekOfCode": "INCLUDE_GTEST_FILE_REGEX = re.compile(r'^\\s*#\\s*include\\s*\"(gtest/.+)\"')\n# Regex for matching '#include \"src/...\"'.\nINCLUDE_SRC_FILE_REGEX = re.compile(r'^\\s*#\\s*include\\s*\"(src/.+)\"')\n# Where to find the source seed files.\nGTEST_H_SEED = 'include/gtest/gtest.h'\nGTEST_SPI_H_SEED = 'include/gtest/gtest-spi.h'\nGTEST_ALL_CC_SEED = 'src/gtest-all.cc'\n# Where to put the generated files.\nGTEST_H_OUTPUT = 'gtest/gtest.h'\nGTEST_ALL_CC_OUTPUT = 'gtest/gtest-all.cc'",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "documentation": {}
    },
    {
        "label": "INCLUDE_SRC_FILE_REGEX",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "peekOfCode": "INCLUDE_SRC_FILE_REGEX = re.compile(r'^\\s*#\\s*include\\s*\"(src/.+)\"')\n# Where to find the source seed files.\nGTEST_H_SEED = 'include/gtest/gtest.h'\nGTEST_SPI_H_SEED = 'include/gtest/gtest-spi.h'\nGTEST_ALL_CC_SEED = 'src/gtest-all.cc'\n# Where to put the generated files.\nGTEST_H_OUTPUT = 'gtest/gtest.h'\nGTEST_ALL_CC_OUTPUT = 'gtest/gtest-all.cc'\ndef VerifyFileExists(directory, relative_path):\n  \"\"\"Verifies that the given file exists; aborts on failure.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "documentation": {}
    },
    {
        "label": "GTEST_H_SEED",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "peekOfCode": "GTEST_H_SEED = 'include/gtest/gtest.h'\nGTEST_SPI_H_SEED = 'include/gtest/gtest-spi.h'\nGTEST_ALL_CC_SEED = 'src/gtest-all.cc'\n# Where to put the generated files.\nGTEST_H_OUTPUT = 'gtest/gtest.h'\nGTEST_ALL_CC_OUTPUT = 'gtest/gtest-all.cc'\ndef VerifyFileExists(directory, relative_path):\n  \"\"\"Verifies that the given file exists; aborts on failure.\n  relative_path is the file path relative to the given directory.\n  \"\"\"",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "documentation": {}
    },
    {
        "label": "GTEST_SPI_H_SEED",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "peekOfCode": "GTEST_SPI_H_SEED = 'include/gtest/gtest-spi.h'\nGTEST_ALL_CC_SEED = 'src/gtest-all.cc'\n# Where to put the generated files.\nGTEST_H_OUTPUT = 'gtest/gtest.h'\nGTEST_ALL_CC_OUTPUT = 'gtest/gtest-all.cc'\ndef VerifyFileExists(directory, relative_path):\n  \"\"\"Verifies that the given file exists; aborts on failure.\n  relative_path is the file path relative to the given directory.\n  \"\"\"\n  if not os.path.isfile(os.path.join(directory, relative_path)):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "documentation": {}
    },
    {
        "label": "GTEST_ALL_CC_SEED",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "peekOfCode": "GTEST_ALL_CC_SEED = 'src/gtest-all.cc'\n# Where to put the generated files.\nGTEST_H_OUTPUT = 'gtest/gtest.h'\nGTEST_ALL_CC_OUTPUT = 'gtest/gtest-all.cc'\ndef VerifyFileExists(directory, relative_path):\n  \"\"\"Verifies that the given file exists; aborts on failure.\n  relative_path is the file path relative to the given directory.\n  \"\"\"\n  if not os.path.isfile(os.path.join(directory, relative_path)):\n    print('ERROR: Cannot find %s in directory %s.' % (relative_path,",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "documentation": {}
    },
    {
        "label": "GTEST_H_OUTPUT",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "peekOfCode": "GTEST_H_OUTPUT = 'gtest/gtest.h'\nGTEST_ALL_CC_OUTPUT = 'gtest/gtest-all.cc'\ndef VerifyFileExists(directory, relative_path):\n  \"\"\"Verifies that the given file exists; aborts on failure.\n  relative_path is the file path relative to the given directory.\n  \"\"\"\n  if not os.path.isfile(os.path.join(directory, relative_path)):\n    print('ERROR: Cannot find %s in directory %s.' % (relative_path,\n                                                      directory))\n    print('Please either specify a valid project root directory '",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "documentation": {}
    },
    {
        "label": "GTEST_ALL_CC_OUTPUT",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "peekOfCode": "GTEST_ALL_CC_OUTPUT = 'gtest/gtest-all.cc'\ndef VerifyFileExists(directory, relative_path):\n  \"\"\"Verifies that the given file exists; aborts on failure.\n  relative_path is the file path relative to the given directory.\n  \"\"\"\n  if not os.path.isfile(os.path.join(directory, relative_path)):\n    print('ERROR: Cannot find %s in directory %s.' % (relative_path,\n                                                      directory))\n    print('Please either specify a valid project root directory '\n          'or omit it on the command line.')",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.fuse_gtest_files",
        "documentation": {}
    },
    {
        "label": "Predicate%",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "peekOfCode": "class Predicate%(n)sTest : public testing::Test {\n protected:\n  void SetUp() override {\n    expected_to_finish_ = true;\n    finished_ = false;\"\"\" % DEFS\n  tests += \"\"\"\n    \"\"\" + Iter(n, 'n%s_ = ') + \"\"\"0;\n  }\n\"\"\"\n  tests += \"\"\"",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "documentation": {}
    },
    {
        "label": "HeaderPreamble",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "peekOfCode": "def HeaderPreamble(n):\n  \"\"\"Returns the preamble for the header file.\n  Args:\n    n:  the maximum arity of the predicate macros to be generated.\n  \"\"\"\n  # A map that defines the values used in the preamble template.\n  DEFS = {\n    'today' : time.strftime('%m/%d/%Y'),\n    'year' : time.strftime('%Y'),\n    'command' : '%s %s' % (os.path.basename(sys.argv[0]), n),",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "documentation": {}
    },
    {
        "label": "Arity",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "peekOfCode": "def Arity(n):\n  \"\"\"Returns the English name of the given arity.\"\"\"\n  if n < 0:\n    return None\n  elif n <= 3:\n    return ['nullary', 'unary', 'binary', 'ternary'][n]\n  else:\n    return '%s-ary' % n\ndef Title(word):\n  \"\"\"Returns the given word in title case.  The difference between",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "documentation": {}
    },
    {
        "label": "Title",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "peekOfCode": "def Title(word):\n  \"\"\"Returns the given word in title case.  The difference between\n  this and string's title() method is that Title('4-ary') is '4-ary'\n  while '4-ary'.title() is '4-Ary'.\"\"\"\n  return word[0].upper() + word[1:]\ndef OneTo(n):\n  \"\"\"Returns the list [1, 2, 3, ..., n].\"\"\"\n  return range(1, n + 1)\ndef Iter(n, format, sep=''):\n  \"\"\"Given a positive integer n, a format string that contains 0 or",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "documentation": {}
    },
    {
        "label": "OneTo",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "peekOfCode": "def OneTo(n):\n  \"\"\"Returns the list [1, 2, 3, ..., n].\"\"\"\n  return range(1, n + 1)\ndef Iter(n, format, sep=''):\n  \"\"\"Given a positive integer n, a format string that contains 0 or\n  more '%s' format specs, and optionally a separator string, returns\n  the join of n strings, each formatted with the format string on an\n  iterator ranged from 1 to n.\n  Example:\n  Iter(3, 'v%s', sep=', ') returns 'v1, v2, v3'.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "documentation": {}
    },
    {
        "label": "Iter",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "peekOfCode": "def Iter(n, format, sep=''):\n  \"\"\"Given a positive integer n, a format string that contains 0 or\n  more '%s' format specs, and optionally a separator string, returns\n  the join of n strings, each formatted with the format string on an\n  iterator ranged from 1 to n.\n  Example:\n  Iter(3, 'v%s', sep=', ') returns 'v1, v2, v3'.\n  \"\"\"\n  # How many '%s' specs are in format?\n  spec_count = len(format.split('%s')) - 1",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "documentation": {}
    },
    {
        "label": "ImplementationForArity",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "peekOfCode": "def ImplementationForArity(n):\n  \"\"\"Returns the implementation of n-ary predicate assertions.\"\"\"\n  # A map the defines the values used in the implementation template.\n  DEFS = {\n    'n' : str(n),\n    'vs' : Iter(n, 'v%s', sep=', '),\n    'vts' : Iter(n, '#v%s', sep=', '),\n    'arity' : Arity(n),\n    'Arity' : Title(Arity(n))\n    }",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "documentation": {}
    },
    {
        "label": "HeaderPostamble",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "peekOfCode": "def HeaderPostamble():\n  \"\"\"Returns the postamble for the header file.\"\"\"\n  return \"\"\"\n}  // namespace testing\n#endif  // GTEST_INCLUDE_GTEST_GTEST_PRED_IMPL_H_\n\"\"\"\ndef GenerateFile(path, content):\n  \"\"\"Given a file path and a content string\n     overwrites it with the given content.\n  \"\"\"",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "documentation": {}
    },
    {
        "label": "GenerateFile",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "peekOfCode": "def GenerateFile(path, content):\n  \"\"\"Given a file path and a content string\n     overwrites it with the given content.\n  \"\"\"\n  print 'Updating file %s . . .' % path\n  f = file(path, 'w+')\n  print >>f, content,\n  f.close()\n  print 'File %s has been updated.' % path\ndef GenerateHeader(n):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "documentation": {}
    },
    {
        "label": "GenerateHeader",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "peekOfCode": "def GenerateHeader(n):\n  \"\"\"Given the maximum arity n, updates the header file that implements\n  the predicate assertions.\n  \"\"\"\n  GenerateFile(HEADER,\n               HeaderPreamble(n)\n               + ''.join([ImplementationForArity(i) for i in OneTo(n)])\n               + HeaderPostamble())\ndef UnitTestPreamble():\n  \"\"\"Returns the preamble for the unit test file.\"\"\"",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "documentation": {}
    },
    {
        "label": "UnitTestPreamble",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "peekOfCode": "def UnitTestPreamble():\n  \"\"\"Returns the preamble for the unit test file.\"\"\"\n  # A map that defines the values used in the preamble template.\n  DEFS = {\n    'today' : time.strftime('%m/%d/%Y'),\n    'year' : time.strftime('%Y'),\n    'command' : '%s %s' % (os.path.basename(sys.argv[0]), sys.argv[1]),\n    }\n  return (\n  \"\"\"// Copyright 2006, Google Inc.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "documentation": {}
    },
    {
        "label": "TestsForArity",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "peekOfCode": "def TestsForArity(n):\n  \"\"\"Returns the tests for n-ary predicate assertions.\"\"\"\n  # A map that defines the values used in the template for the tests.\n  DEFS = {\n    'n' : n,\n    'es' : Iter(n, 'e%s', sep=', '),\n    'vs' : Iter(n, 'v%s', sep=', '),\n    'vts' : Iter(n, '#v%s', sep=', '),\n    'tvs' : Iter(n, 'T%s v%s', sep=', '),\n    'int_vs' : Iter(n, 'int v%s', sep=', '),",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "documentation": {}
    },
    {
        "label": "UnitTestPostamble",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "peekOfCode": "def UnitTestPostamble():\n  \"\"\"Returns the postamble for the tests.\"\"\"\n  return ''\ndef GenerateUnitTest(n):\n  \"\"\"Returns the tests for up-to n-ary predicate assertions.\"\"\"\n  GenerateFile(UNIT_TEST,\n               UnitTestPreamble()\n               + ''.join([TestsForArity(i) for i in OneTo(n)])\n               + UnitTestPostamble())\ndef _Main():",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "documentation": {}
    },
    {
        "label": "GenerateUnitTest",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "peekOfCode": "def GenerateUnitTest(n):\n  \"\"\"Returns the tests for up-to n-ary predicate assertions.\"\"\"\n  GenerateFile(UNIT_TEST,\n               UnitTestPreamble()\n               + ''.join([TestsForArity(i) for i in OneTo(n)])\n               + UnitTestPostamble())\ndef _Main():\n  \"\"\"The entry point of the script.  Generates the header file and its\n  unit test.\"\"\"\n  if len(sys.argv) != 2:",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "peekOfCode": "__author__ = 'wan@google.com (Zhanyong Wan)'\nimport os\nimport sys\nimport time\n# Where this script is.\nSCRIPT_DIR = os.path.dirname(sys.argv[0])\n# Where to store the generated header.\nHEADER = os.path.join(SCRIPT_DIR, '../include/gtest/gtest_pred_impl.h')\n# Where to store the generated unit test.\nUNIT_TEST = os.path.join(SCRIPT_DIR, '../test/gtest_pred_impl_unittest.cc')",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "documentation": {}
    },
    {
        "label": "SCRIPT_DIR",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "peekOfCode": "SCRIPT_DIR = os.path.dirname(sys.argv[0])\n# Where to store the generated header.\nHEADER = os.path.join(SCRIPT_DIR, '../include/gtest/gtest_pred_impl.h')\n# Where to store the generated unit test.\nUNIT_TEST = os.path.join(SCRIPT_DIR, '../test/gtest_pred_impl_unittest.cc')\ndef HeaderPreamble(n):\n  \"\"\"Returns the preamble for the header file.\n  Args:\n    n:  the maximum arity of the predicate macros to be generated.\n  \"\"\"",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "documentation": {}
    },
    {
        "label": "HEADER",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "peekOfCode": "HEADER = os.path.join(SCRIPT_DIR, '../include/gtest/gtest_pred_impl.h')\n# Where to store the generated unit test.\nUNIT_TEST = os.path.join(SCRIPT_DIR, '../test/gtest_pred_impl_unittest.cc')\ndef HeaderPreamble(n):\n  \"\"\"Returns the preamble for the header file.\n  Args:\n    n:  the maximum arity of the predicate macros to be generated.\n  \"\"\"\n  # A map that defines the values used in the preamble template.\n  DEFS = {",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "documentation": {}
    },
    {
        "label": "UNIT_TEST",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "peekOfCode": "UNIT_TEST = os.path.join(SCRIPT_DIR, '../test/gtest_pred_impl_unittest.cc')\ndef HeaderPreamble(n):\n  \"\"\"Returns the preamble for the header file.\n  Args:\n    n:  the maximum arity of the predicate macros to be generated.\n  \"\"\"\n  # A map that defines the values used in the preamble template.\n  DEFS = {\n    'today' : time.strftime('%m/%d/%Y'),\n    'year' : time.strftime('%Y'),",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.gen_gtest_pred_impl",
        "documentation": {}
    },
    {
        "label": "WikiBrancher",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.release_docs",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.release_docs",
        "peekOfCode": "class WikiBrancher(object):\n  \"\"\"Branches ...\"\"\"\n  def __init__(self, dot_version):\n    self.project, svn_root_path = common.GetSvnInfo()\n    if self.project not in ('googletest', 'googlemock'):\n      sys.exit('This script must be run in a gtest or gmock SVN workspace.')\n    self.wiki_dir = svn_root_path + '/wiki'\n    # Turn '2.6' to 'V2_6_'.\n    self.version_prefix = 'V' + dot_version.replace('.', '_') + '_'\n    self.files_to_branch = self.GetFilesToBranch()",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.release_docs",
        "documentation": {}
    },
    {
        "label": "DropWikiSuffix",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.release_docs",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.release_docs",
        "peekOfCode": "def DropWikiSuffix(wiki_filename):\n  \"\"\"Removes the .wiki suffix (if any) from the given filename.\"\"\"\n  return (wiki_filename[:-len('.wiki')] if wiki_filename.endswith('.wiki')\n          else wiki_filename)\nclass WikiBrancher(object):\n  \"\"\"Branches ...\"\"\"\n  def __init__(self, dot_version):\n    self.project, svn_root_path = common.GetSvnInfo()\n    if self.project not in ('googletest', 'googlemock'):\n      sys.exit('This script must be run in a gtest or gmock SVN workspace.')",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.release_docs",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.release_docs",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.release_docs",
        "peekOfCode": "def main():\n  if len(sys.argv) != 2:\n    sys.exit(__doc__)\n  brancher = WikiBrancher(sys.argv[1])\n  brancher.BranchFiles()\n  brancher.UpdateLinksInBranchedFiles()\nif __name__ == '__main__':\n  main()",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.release_docs",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.release_docs",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.release_docs",
        "peekOfCode": "__author__ = 'wan@google.com (Zhanyong Wan)'\nimport os\nimport re\nimport sys\nimport common\n# Wiki pages that shouldn't be branched for every gtest/gmock release.\nGTEST_UNVERSIONED_WIKIS = ['DevGuide.wiki']\nGMOCK_UNVERSIONED_WIKIS = [\n    'DesignDoc.wiki',\n    'DevGuide.wiki',",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.release_docs",
        "documentation": {}
    },
    {
        "label": "GTEST_UNVERSIONED_WIKIS",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.release_docs",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.release_docs",
        "peekOfCode": "GTEST_UNVERSIONED_WIKIS = ['DevGuide.wiki']\nGMOCK_UNVERSIONED_WIKIS = [\n    'DesignDoc.wiki',\n    'DevGuide.wiki',\n    'KnownIssues.wiki'\n    ]\ndef DropWikiSuffix(wiki_filename):\n  \"\"\"Removes the .wiki suffix (if any) from the given filename.\"\"\"\n  return (wiki_filename[:-len('.wiki')] if wiki_filename.endswith('.wiki')\n          else wiki_filename)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.release_docs",
        "documentation": {}
    },
    {
        "label": "GMOCK_UNVERSIONED_WIKIS",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.release_docs",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.release_docs",
        "peekOfCode": "GMOCK_UNVERSIONED_WIKIS = [\n    'DesignDoc.wiki',\n    'DevGuide.wiki',\n    'KnownIssues.wiki'\n    ]\ndef DropWikiSuffix(wiki_filename):\n  \"\"\"Removes the .wiki suffix (if any) from the given filename.\"\"\"\n  return (wiki_filename[:-len('.wiki')] if wiki_filename.endswith('.wiki')\n          else wiki_filename)\nclass WikiBrancher(object):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.release_docs",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.run_with_path",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.run_with_path",
        "peekOfCode": "def main():\n  if SUBST_PATH_ENV_VAR_NAME in os.environ:\n    os.environ[\"PATH\"] = os.environ[SUBST_PATH_ENV_VAR_NAME]\n  exit_code = subprocess.Popen(sys.argv[1:]).wait()\n  # exit_code is negative (-signal) if the process has been terminated by\n  # a signal. Returning negative exit code is not portable and so we return\n  # 100 instead.\n  if exit_code < 0:\n    exit_code = 100\n  sys.exit(exit_code)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.run_with_path",
        "documentation": {}
    },
    {
        "label": "SUBST_PATH_ENV_VAR_NAME",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.run_with_path",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.run_with_path",
        "peekOfCode": "SUBST_PATH_ENV_VAR_NAME = \"SUBST_PATH\"\ndef main():\n  if SUBST_PATH_ENV_VAR_NAME in os.environ:\n    os.environ[\"PATH\"] = os.environ[SUBST_PATH_ENV_VAR_NAME]\n  exit_code = subprocess.Popen(sys.argv[1:]).wait()\n  # exit_code is negative (-signal) if the process has been terminated by\n  # a signal. Returning negative exit code is not portable and so we return\n  # 100 instead.\n  if exit_code < 0:\n    exit_code = 100",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.run_with_path",
        "documentation": {}
    },
    {
        "label": "ClientLoginError",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "peekOfCode": "class ClientLoginError(urllib2.HTTPError):\n  \"\"\"Raised to indicate there was an error authenticating with ClientLogin.\"\"\"\n  def __init__(self, url, code, msg, headers, args):\n    urllib2.HTTPError.__init__(self, url, code, msg, headers, None)\n    self.args = args\n    self.reason = args[\"Error\"]\nclass AbstractRpcServer(object):\n  \"\"\"Provides a common interface for a simple RPC server.\"\"\"\n  def __init__(self, host, auth_function, host_override=None, extra_headers={},\n               save_cookies=False):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "AbstractRpcServer",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "peekOfCode": "class AbstractRpcServer(object):\n  \"\"\"Provides a common interface for a simple RPC server.\"\"\"\n  def __init__(self, host, auth_function, host_override=None, extra_headers={},\n               save_cookies=False):\n    \"\"\"Creates a new HttpRpcServer.\n    Args:\n      host: The host to send requests to.\n      auth_function: A function that takes no arguments and returns an\n        (email, password) tuple when called. Will be called if authentication\n        is required.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "HttpRpcServer",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "peekOfCode": "class HttpRpcServer(AbstractRpcServer):\n  \"\"\"Provides a simplified RPC-style interface for HTTP requests.\"\"\"\n  def _Authenticate(self):\n    \"\"\"Save the cookie jar after authentication.\"\"\"\n    super(HttpRpcServer, self)._Authenticate()\n    if self.save_cookies:\n      StatusUpdate(\"Saving authentication cookies to %s\" % self.cookie_file)\n      self.cookie_jar.save()\n  def _GetOpener(self):\n    \"\"\"Returns an OpenerDirector that supports cookies and ignores redirects.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "VersionControlSystem",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "peekOfCode": "class VersionControlSystem(object):\n  \"\"\"Abstract base class providing an interface to the VCS.\"\"\"\n  def __init__(self, options):\n    \"\"\"Constructor.\n    Args:\n      options: Command line options.\n    \"\"\"\n    self.options = options\n  def GenerateDiff(self, args):\n    \"\"\"Return the current diff as a string.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "SubversionVCS",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "peekOfCode": "class SubversionVCS(VersionControlSystem):\n  \"\"\"Implementation of the VersionControlSystem interface for Subversion.\"\"\"\n  def __init__(self, options):\n    super(SubversionVCS, self).__init__(options)\n    if self.options.revision:\n      match = re.match(r\"(\\d+)(:(\\d+))?\", self.options.revision)\n      if not match:\n        ErrorExit(\"Invalid Subversion revision %s.\" % self.options.revision)\n      self.rev_start = match.group(1)\n      self.rev_end = match.group(3)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "GitVCS",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "peekOfCode": "class GitVCS(VersionControlSystem):\n  \"\"\"Implementation of the VersionControlSystem interface for Git.\"\"\"\n  def __init__(self, options):\n    super(GitVCS, self).__init__(options)\n    # Map of filename -> hash of base file.\n    self.base_hashes = {}\n  def GenerateDiff(self, extra_args):\n    # This is more complicated than svn's GenerateDiff because we must convert\n    # the diff output to include an svn-style \"Index:\" line as well as record\n    # the hashes of the base files, so we can upload them along with our diff.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "MercurialVCS",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "peekOfCode": "class MercurialVCS(VersionControlSystem):\n  \"\"\"Implementation of the VersionControlSystem interface for Mercurial.\"\"\"\n  def __init__(self, options, repo_dir):\n    super(MercurialVCS, self).__init__(options)\n    # Absolute path to repository (we can be in a subdir)\n    self.repo_dir = os.path.normpath(repo_dir)\n    # Compute the subdir\n    cwd = os.path.normpath(os.getcwd())\n    assert cwd.startswith(self.repo_dir)\n    self.subdir = cwd[len(self.repo_dir):].lstrip(r\"\\/\")",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "GetEmail",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "peekOfCode": "def GetEmail(prompt):\n  \"\"\"Prompts the user for their email address and returns it.\n  The last used email address is saved to a file and offered up as a suggestion\n  to the user. If the user presses enter without typing in anything the last\n  used email address is used. If the user enters a new address, it is saved\n  for next time we prompt.\n  \"\"\"\n  last_email_file_name = os.path.expanduser(\"~/.last_codereview_email_address\")\n  last_email = \"\"\n  if os.path.exists(last_email_file_name):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "StatusUpdate",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "peekOfCode": "def StatusUpdate(msg):\n  \"\"\"Print a status message to stdout.\n  If 'verbosity' is greater than 0, print the message.\n  Args:\n    msg: The string to print.\n  \"\"\"\n  if verbosity > 0:\n    print msg\ndef ErrorExit(msg):\n  \"\"\"Print an error message to stderr and exit.\"\"\"",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "ErrorExit",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "peekOfCode": "def ErrorExit(msg):\n  \"\"\"Print an error message to stderr and exit.\"\"\"\n  print >>sys.stderr, msg\n  sys.exit(1)\nclass ClientLoginError(urllib2.HTTPError):\n  \"\"\"Raised to indicate there was an error authenticating with ClientLogin.\"\"\"\n  def __init__(self, url, code, msg, headers, args):\n    urllib2.HTTPError.__init__(self, url, code, msg, headers, None)\n    self.args = args\n    self.reason = args[\"Error\"]",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "GetRpcServer",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "peekOfCode": "def GetRpcServer(options):\n  \"\"\"Returns an instance of an AbstractRpcServer.\n  Returns:\n    A new AbstractRpcServer, on which RPC calls can be made.\n  \"\"\"\n  rpc_server_class = HttpRpcServer\n  def GetUserCredentials():\n    \"\"\"Prompts the user for a username and password.\"\"\"\n    email = options.email\n    if email is None:",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "EncodeMultipartFormData",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "peekOfCode": "def EncodeMultipartFormData(fields, files):\n  \"\"\"Encode form fields for multipart/form-data.\n  Args:\n    fields: A sequence of (name, value) elements for regular form fields.\n    files: A sequence of (name, filename, value) elements for data to be\n           uploaded as files.\n  Returns:\n    (content_type, body) ready for httplib.HTTP instance.\n  Source:\n    https://web.archive.org/web/20160116052001/code.activestate.com/recipes/146306",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "GetContentType",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "peekOfCode": "def GetContentType(filename):\n  \"\"\"Helper to guess the content-type from the filename.\"\"\"\n  return mimetypes.guess_type(filename)[0] or 'application/octet-stream'\n# Use a shell for subcommands on Windows to get a PATH search.\nuse_shell = sys.platform.startswith(\"win\")\ndef RunShellWithReturnCode(command, print_output=False,\n                           universal_newlines=True):\n  \"\"\"Executes a command and returns the output from stdout and the return code.\n  Args:\n    command: Command to execute.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "RunShellWithReturnCode",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "peekOfCode": "def RunShellWithReturnCode(command, print_output=False,\n                           universal_newlines=True):\n  \"\"\"Executes a command and returns the output from stdout and the return code.\n  Args:\n    command: Command to execute.\n    print_output: If True, the output is printed to stdout.\n                  If False, both stdout and stderr are ignored.\n    universal_newlines: Use universal_newlines flag (default: True).\n  Returns:\n    Tuple (output, return code)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "RunShell",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "peekOfCode": "def RunShell(command, silent_ok=False, universal_newlines=True,\n             print_output=False):\n  data, retcode = RunShellWithReturnCode(command, print_output,\n                                         universal_newlines)\n  if retcode:\n    ErrorExit(\"Got error status from %s:\\n%s\" % (command, data))\n  if not silent_ok and not data:\n    ErrorExit(\"No output from %s\" % command)\n  return data\nclass VersionControlSystem(object):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "SplitPatch",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "peekOfCode": "def SplitPatch(data):\n  \"\"\"Splits a patch into separate pieces for each file.\n  Args:\n    data: A string containing the output of svn diff.\n  Returns:\n    A list of 2-tuple (filename, text) where text is the svn diff output\n      pertaining to filename.\n  \"\"\"\n  patches = []\n  filename = None",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "UploadSeparatePatches",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "peekOfCode": "def UploadSeparatePatches(issue, rpc_server, patchset, data, options):\n  \"\"\"Uploads a separate patch for each file in the diff output.\n  Returns a list of [patch_key, filename] for each file.\n  \"\"\"\n  patches = SplitPatch(data)\n  rv = []\n  for patch in patches:\n    if len(patch[1]) > MAX_UPLOAD_SIZE:\n      print (\"Not uploading the patch for \" + patch[0] +\n             \" because the file is too large.\")",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "GuessVCS",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "peekOfCode": "def GuessVCS(options):\n  \"\"\"Helper to guess the version control system.\n  This examines the current directory, guesses which VersionControlSystem\n  we're using, and returns an instance of the appropriate class.  Exit with an\n  error if we can't figure it out.\n  Returns:\n    A VersionControlSystem instance. Exits if the VCS can't be guessed.\n  \"\"\"\n  # Mercurial has a command to get the base directory of a repository\n  # Try running it, but don't die if we don't have hg installed.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "RealMain",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "peekOfCode": "def RealMain(argv, data=None):\n  \"\"\"The real main function.\n  Args:\n    argv: Command line arguments.\n    data: Diff contents. If None (default) the diff is generated by\n      the VersionControlSystem implementation returned by GuessVCS().\n  Returns:\n    A 2-tuple (issue id, patchset id).\n    The patchset id is None if the base files are not uploaded by this\n    script (applies only to SVN checkouts).",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "peekOfCode": "def main():\n  try:\n    RealMain(sys.argv)\n  except KeyboardInterrupt:\n    print\n    StatusUpdate(\"Interrupted.\")\n    sys.exit(1)\nif __name__ == \"__main__\":\n  main()",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "verbosity",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "peekOfCode": "verbosity = 1\n# Max size of patch or base file.\nMAX_UPLOAD_SIZE = 900 * 1024\ndef GetEmail(prompt):\n  \"\"\"Prompts the user for their email address and returns it.\n  The last used email address is saved to a file and offered up as a suggestion\n  to the user. If the user presses enter without typing in anything the last\n  used email address is used. If the user enters a new address, it is saved\n  for next time we prompt.\n  \"\"\"",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "MAX_UPLOAD_SIZE",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "peekOfCode": "MAX_UPLOAD_SIZE = 900 * 1024\ndef GetEmail(prompt):\n  \"\"\"Prompts the user for their email address and returns it.\n  The last used email address is saved to a file and offered up as a suggestion\n  to the user. If the user presses enter without typing in anything the last\n  used email address is used. If the user enters a new address, it is saved\n  for next time we prompt.\n  \"\"\"\n  last_email_file_name = os.path.expanduser(\"~/.last_codereview_email_address\")\n  last_email = \"\"",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "peekOfCode": "parser = optparse.OptionParser(usage=\"%prog [options] [-- diff_options]\")\nparser.add_option(\"-y\", \"--assume_yes\", action=\"store_true\",\n                  dest=\"assume_yes\", default=False,\n                  help=\"Assume that the answer to yes/no questions is 'yes'.\")\n# Logging\ngroup = parser.add_option_group(\"Logging options\")\ngroup.add_option(\"-q\", \"--quiet\", action=\"store_const\", const=0,\n                 dest=\"verbose\", help=\"Print errors only.\")\ngroup.add_option(\"-v\", \"--verbose\", action=\"store_const\", const=2,\n                 dest=\"verbose\", default=1,",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "group",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "peekOfCode": "group = parser.add_option_group(\"Logging options\")\ngroup.add_option(\"-q\", \"--quiet\", action=\"store_const\", const=0,\n                 dest=\"verbose\", help=\"Print errors only.\")\ngroup.add_option(\"-v\", \"--verbose\", action=\"store_const\", const=2,\n                 dest=\"verbose\", default=1,\n                 help=\"Print info level logs (default).\")\ngroup.add_option(\"--noisy\", action=\"store_const\", const=3,\n                 dest=\"verbose\", help=\"Print all logs.\")\n# Review server\ngroup = parser.add_option_group(\"Review server options\")",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "group",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "peekOfCode": "group = parser.add_option_group(\"Review server options\")\ngroup.add_option(\"-s\", \"--server\", action=\"store\", dest=\"server\",\n                 default=\"codereview.appspot.com\",\n                 metavar=\"SERVER\",\n                 help=(\"The server to upload to. The format is host[:port]. \"\n                       \"Defaults to 'codereview.appspot.com'.\"))\ngroup.add_option(\"-e\", \"--email\", action=\"store\", dest=\"email\",\n                 metavar=\"EMAIL\", default=None,\n                 help=\"The username to use. Will prompt if omitted.\")\ngroup.add_option(\"-H\", \"--host\", action=\"store\", dest=\"host\",",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "group",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "peekOfCode": "group = parser.add_option_group(\"Issue options\")\ngroup.add_option(\"-d\", \"--description\", action=\"store\", dest=\"description\",\n                 metavar=\"DESCRIPTION\", default=None,\n                 help=\"Optional description when creating an issue.\")\ngroup.add_option(\"-f\", \"--description_file\", action=\"store\",\n                 dest=\"description_file\", metavar=\"DESCRIPTION_FILE\",\n                 default=None,\n                 help=\"Optional path of a file that contains \"\n                      \"the description when creating an issue.\")\ngroup.add_option(\"-r\", \"--reviewers\", action=\"store\", dest=\"reviewers\",",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "group",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "peekOfCode": "group = parser.add_option_group(\"Patch options\")\ngroup.add_option(\"-m\", \"--message\", action=\"store\", dest=\"message\",\n                 metavar=\"MESSAGE\", default=None,\n                 help=\"A message to identify the patch. \"\n                      \"Will prompt if omitted.\")\ngroup.add_option(\"-i\", \"--issue\", type=\"int\", action=\"store\",\n                 metavar=\"ISSUE\", default=None,\n                 help=\"Issue number to which to add. Defaults to new issue.\")\ngroup.add_option(\"--download_base\", action=\"store_true\",\n                 dest=\"download_base\", default=False,",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "use_shell",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "peekOfCode": "use_shell = sys.platform.startswith(\"win\")\ndef RunShellWithReturnCode(command, print_output=False,\n                           universal_newlines=True):\n  \"\"\"Executes a command and returns the output from stdout and the return code.\n  Args:\n    command: Command to execute.\n    print_output: If True, the output is printed to stdout.\n                  If False, both stdout and stderr are ignored.\n    universal_newlines: Use universal_newlines flag (default: True).\n  Returns:",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload_gtest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload_gtest",
        "peekOfCode": "def main():\n  # Finds the path to upload.py, assuming it is in the same directory\n  # as this file.\n  my_dir = os.path.dirname(os.path.abspath(__file__))\n  upload_py_path = os.path.join(my_dir, 'upload.py')\n  # Adds Google Test discussion group to the cc line if it's not there\n  # already.\n  upload_py_argv = [upload_py_path]\n  found_cc_flag = False\n  for arg in sys.argv[1:]:",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload_gtest",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload_gtest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload_gtest",
        "peekOfCode": "__author__ = 'wan@google.com (Zhanyong Wan)'\nimport os\nimport sys\nCC_FLAG = '--cc='\nGTEST_GROUP = 'googletestframework@googlegroups.com'\ndef main():\n  # Finds the path to upload.py, assuming it is in the same directory\n  # as this file.\n  my_dir = os.path.dirname(os.path.abspath(__file__))\n  upload_py_path = os.path.join(my_dir, 'upload.py')",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload_gtest",
        "documentation": {}
    },
    {
        "label": "CC_FLAG",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload_gtest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload_gtest",
        "peekOfCode": "CC_FLAG = '--cc='\nGTEST_GROUP = 'googletestframework@googlegroups.com'\ndef main():\n  # Finds the path to upload.py, assuming it is in the same directory\n  # as this file.\n  my_dir = os.path.dirname(os.path.abspath(__file__))\n  upload_py_path = os.path.join(my_dir, 'upload.py')\n  # Adds Google Test discussion group to the cc line if it's not there\n  # already.\n  upload_py_argv = [upload_py_path]",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload_gtest",
        "documentation": {}
    },
    {
        "label": "GTEST_GROUP",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload_gtest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload_gtest",
        "peekOfCode": "GTEST_GROUP = 'googletestframework@googlegroups.com'\ndef main():\n  # Finds the path to upload.py, assuming it is in the same directory\n  # as this file.\n  my_dir = os.path.dirname(os.path.abspath(__file__))\n  upload_py_path = os.path.join(my_dir, 'upload.py')\n  # Adds Google Test discussion group to the cc line if it's not there\n  # already.\n  upload_py_argv = [upload_py_path]\n  found_cc_flag = False",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.scripts.upload_gtest",
        "documentation": {}
    },
    {
        "label": "GTestBreakOnFailureUnitTest",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-break-on-failure-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-break-on-failure-unittest",
        "peekOfCode": "class GTestBreakOnFailureUnitTest(gtest_test_utils.TestCase):\n  \"\"\"Tests using the GTEST_BREAK_ON_FAILURE environment variable or\n  the --gtest_break_on_failure flag to turn assertion failures into\n  segmentation faults.\n  \"\"\"\n  def RunAndVerify(self, env_var_value, flag_value, expect_seg_fault):\n    \"\"\"Runs googletest-break-on-failure-unittest_ and verifies that it does\n    (or does not) have a seg-fault.\n    Args:\n      env_var_value:    value of the GTEST_BREAK_ON_FAILURE environment",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-break-on-failure-unittest",
        "documentation": {}
    },
    {
        "label": "Run",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-break-on-failure-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-break-on-failure-unittest",
        "peekOfCode": "def Run(command):\n  \"\"\"Runs a command; returns 1 if it was killed by a signal, or 0 otherwise.\"\"\"\n  p = gtest_test_utils.Subprocess(command, env=environ)\n  if p.terminated_by_signal:\n    return 1\n  else:\n    return 0\n# The tests.\nclass GTestBreakOnFailureUnitTest(gtest_test_utils.TestCase):\n  \"\"\"Tests using the GTEST_BREAK_ON_FAILURE environment variable or",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-break-on-failure-unittest",
        "documentation": {}
    },
    {
        "label": "IS_WINDOWS",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-break-on-failure-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-break-on-failure-unittest",
        "peekOfCode": "IS_WINDOWS = os.name == 'nt'\n# The environment variable for enabling/disabling the break-on-failure mode.\nBREAK_ON_FAILURE_ENV_VAR = 'GTEST_BREAK_ON_FAILURE'\n# The command line flag for enabling/disabling the break-on-failure mode.\nBREAK_ON_FAILURE_FLAG = 'gtest_break_on_failure'\n# The environment variable for enabling/disabling the throw-on-failure mode.\nTHROW_ON_FAILURE_ENV_VAR = 'GTEST_THROW_ON_FAILURE'\n# The environment variable for enabling/disabling the catch-exceptions mode.\nCATCH_EXCEPTIONS_ENV_VAR = 'GTEST_CATCH_EXCEPTIONS'\n# Path to the googletest-break-on-failure-unittest_ program.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-break-on-failure-unittest",
        "documentation": {}
    },
    {
        "label": "BREAK_ON_FAILURE_ENV_VAR",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-break-on-failure-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-break-on-failure-unittest",
        "peekOfCode": "BREAK_ON_FAILURE_ENV_VAR = 'GTEST_BREAK_ON_FAILURE'\n# The command line flag for enabling/disabling the break-on-failure mode.\nBREAK_ON_FAILURE_FLAG = 'gtest_break_on_failure'\n# The environment variable for enabling/disabling the throw-on-failure mode.\nTHROW_ON_FAILURE_ENV_VAR = 'GTEST_THROW_ON_FAILURE'\n# The environment variable for enabling/disabling the catch-exceptions mode.\nCATCH_EXCEPTIONS_ENV_VAR = 'GTEST_CATCH_EXCEPTIONS'\n# Path to the googletest-break-on-failure-unittest_ program.\nEXE_PATH = gtest_test_utils.GetTestExecutablePath(\n    'googletest-break-on-failure-unittest_')",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-break-on-failure-unittest",
        "documentation": {}
    },
    {
        "label": "BREAK_ON_FAILURE_FLAG",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-break-on-failure-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-break-on-failure-unittest",
        "peekOfCode": "BREAK_ON_FAILURE_FLAG = 'gtest_break_on_failure'\n# The environment variable for enabling/disabling the throw-on-failure mode.\nTHROW_ON_FAILURE_ENV_VAR = 'GTEST_THROW_ON_FAILURE'\n# The environment variable for enabling/disabling the catch-exceptions mode.\nCATCH_EXCEPTIONS_ENV_VAR = 'GTEST_CATCH_EXCEPTIONS'\n# Path to the googletest-break-on-failure-unittest_ program.\nEXE_PATH = gtest_test_utils.GetTestExecutablePath(\n    'googletest-break-on-failure-unittest_')\nenviron = gtest_test_utils.environ\nSetEnvVar = gtest_test_utils.SetEnvVar",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-break-on-failure-unittest",
        "documentation": {}
    },
    {
        "label": "THROW_ON_FAILURE_ENV_VAR",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-break-on-failure-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-break-on-failure-unittest",
        "peekOfCode": "THROW_ON_FAILURE_ENV_VAR = 'GTEST_THROW_ON_FAILURE'\n# The environment variable for enabling/disabling the catch-exceptions mode.\nCATCH_EXCEPTIONS_ENV_VAR = 'GTEST_CATCH_EXCEPTIONS'\n# Path to the googletest-break-on-failure-unittest_ program.\nEXE_PATH = gtest_test_utils.GetTestExecutablePath(\n    'googletest-break-on-failure-unittest_')\nenviron = gtest_test_utils.environ\nSetEnvVar = gtest_test_utils.SetEnvVar\n# Tests in this file run a Google-Test-based test program and expect it\n# to terminate prematurely.  Therefore they are incompatible with",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-break-on-failure-unittest",
        "documentation": {}
    },
    {
        "label": "CATCH_EXCEPTIONS_ENV_VAR",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-break-on-failure-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-break-on-failure-unittest",
        "peekOfCode": "CATCH_EXCEPTIONS_ENV_VAR = 'GTEST_CATCH_EXCEPTIONS'\n# Path to the googletest-break-on-failure-unittest_ program.\nEXE_PATH = gtest_test_utils.GetTestExecutablePath(\n    'googletest-break-on-failure-unittest_')\nenviron = gtest_test_utils.environ\nSetEnvVar = gtest_test_utils.SetEnvVar\n# Tests in this file run a Google-Test-based test program and expect it\n# to terminate prematurely.  Therefore they are incompatible with\n# the premature-exit-file protocol by design.  Unset the\n# premature-exit filepath to prevent Google Test from creating",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-break-on-failure-unittest",
        "documentation": {}
    },
    {
        "label": "EXE_PATH",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-break-on-failure-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-break-on-failure-unittest",
        "peekOfCode": "EXE_PATH = gtest_test_utils.GetTestExecutablePath(\n    'googletest-break-on-failure-unittest_')\nenviron = gtest_test_utils.environ\nSetEnvVar = gtest_test_utils.SetEnvVar\n# Tests in this file run a Google-Test-based test program and expect it\n# to terminate prematurely.  Therefore they are incompatible with\n# the premature-exit-file protocol by design.  Unset the\n# premature-exit filepath to prevent Google Test from creating\n# the file.\nSetEnvVar(gtest_test_utils.PREMATURE_EXIT_FILE_ENV_VAR, None)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-break-on-failure-unittest",
        "documentation": {}
    },
    {
        "label": "environ",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-break-on-failure-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-break-on-failure-unittest",
        "peekOfCode": "environ = gtest_test_utils.environ\nSetEnvVar = gtest_test_utils.SetEnvVar\n# Tests in this file run a Google-Test-based test program and expect it\n# to terminate prematurely.  Therefore they are incompatible with\n# the premature-exit-file protocol by design.  Unset the\n# premature-exit filepath to prevent Google Test from creating\n# the file.\nSetEnvVar(gtest_test_utils.PREMATURE_EXIT_FILE_ENV_VAR, None)\ndef Run(command):\n  \"\"\"Runs a command; returns 1 if it was killed by a signal, or 0 otherwise.\"\"\"",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-break-on-failure-unittest",
        "documentation": {}
    },
    {
        "label": "SetEnvVar",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-break-on-failure-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-break-on-failure-unittest",
        "peekOfCode": "SetEnvVar = gtest_test_utils.SetEnvVar\n# Tests in this file run a Google-Test-based test program and expect it\n# to terminate prematurely.  Therefore they are incompatible with\n# the premature-exit-file protocol by design.  Unset the\n# premature-exit filepath to prevent Google Test from creating\n# the file.\nSetEnvVar(gtest_test_utils.PREMATURE_EXIT_FILE_ENV_VAR, None)\ndef Run(command):\n  \"\"\"Runs a command; returns 1 if it was killed by a signal, or 0 otherwise.\"\"\"\n  p = gtest_test_utils.Subprocess(command, env=environ)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-break-on-failure-unittest",
        "documentation": {}
    },
    {
        "label": "CatchCxxExceptionsTest",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-catch-exceptions-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-catch-exceptions-test",
        "peekOfCode": "class CatchCxxExceptionsTest(gtest_test_utils.TestCase):\n  \"\"\"Tests C++ exception-catching behavior.\n     Tests in this test case verify that:\n     * C++ exceptions are caught and logged as C++ (not SEH) exceptions\n     * Exception thrown affect the remainder of the test work flow in the\n       expected manner.\n  \"\"\"\n  def testCatchesCxxExceptionsInFixtureConstructor(self):\n    self.assertTrue(\n        'C++ exception with description '",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-catch-exceptions-test",
        "documentation": {}
    },
    {
        "label": "FLAG_PREFIX",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-catch-exceptions-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-catch-exceptions-test",
        "peekOfCode": "FLAG_PREFIX = '--gtest_'\nLIST_TESTS_FLAG = FLAG_PREFIX + 'list_tests'\nNO_CATCH_EXCEPTIONS_FLAG = FLAG_PREFIX + 'catch_exceptions=0'\nFILTER_FLAG = FLAG_PREFIX + 'filter'\n# Path to the googletest-catch-exceptions-ex-test_ binary, compiled with\n# exceptions enabled.\nEX_EXE_PATH = gtest_test_utils.GetTestExecutablePath(\n    'googletest-catch-exceptions-ex-test_')\n# Path to the googletest-catch-exceptions-test_ binary, compiled with\n# exceptions disabled.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-catch-exceptions-test",
        "documentation": {}
    },
    {
        "label": "LIST_TESTS_FLAG",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-catch-exceptions-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-catch-exceptions-test",
        "peekOfCode": "LIST_TESTS_FLAG = FLAG_PREFIX + 'list_tests'\nNO_CATCH_EXCEPTIONS_FLAG = FLAG_PREFIX + 'catch_exceptions=0'\nFILTER_FLAG = FLAG_PREFIX + 'filter'\n# Path to the googletest-catch-exceptions-ex-test_ binary, compiled with\n# exceptions enabled.\nEX_EXE_PATH = gtest_test_utils.GetTestExecutablePath(\n    'googletest-catch-exceptions-ex-test_')\n# Path to the googletest-catch-exceptions-test_ binary, compiled with\n# exceptions disabled.\nEXE_PATH = gtest_test_utils.GetTestExecutablePath(",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-catch-exceptions-test",
        "documentation": {}
    },
    {
        "label": "NO_CATCH_EXCEPTIONS_FLAG",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-catch-exceptions-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-catch-exceptions-test",
        "peekOfCode": "NO_CATCH_EXCEPTIONS_FLAG = FLAG_PREFIX + 'catch_exceptions=0'\nFILTER_FLAG = FLAG_PREFIX + 'filter'\n# Path to the googletest-catch-exceptions-ex-test_ binary, compiled with\n# exceptions enabled.\nEX_EXE_PATH = gtest_test_utils.GetTestExecutablePath(\n    'googletest-catch-exceptions-ex-test_')\n# Path to the googletest-catch-exceptions-test_ binary, compiled with\n# exceptions disabled.\nEXE_PATH = gtest_test_utils.GetTestExecutablePath(\n    'googletest-catch-exceptions-no-ex-test_')",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-catch-exceptions-test",
        "documentation": {}
    },
    {
        "label": "FILTER_FLAG",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-catch-exceptions-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-catch-exceptions-test",
        "peekOfCode": "FILTER_FLAG = FLAG_PREFIX + 'filter'\n# Path to the googletest-catch-exceptions-ex-test_ binary, compiled with\n# exceptions enabled.\nEX_EXE_PATH = gtest_test_utils.GetTestExecutablePath(\n    'googletest-catch-exceptions-ex-test_')\n# Path to the googletest-catch-exceptions-test_ binary, compiled with\n# exceptions disabled.\nEXE_PATH = gtest_test_utils.GetTestExecutablePath(\n    'googletest-catch-exceptions-no-ex-test_')\nenviron = gtest_test_utils.environ",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-catch-exceptions-test",
        "documentation": {}
    },
    {
        "label": "EX_EXE_PATH",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-catch-exceptions-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-catch-exceptions-test",
        "peekOfCode": "EX_EXE_PATH = gtest_test_utils.GetTestExecutablePath(\n    'googletest-catch-exceptions-ex-test_')\n# Path to the googletest-catch-exceptions-test_ binary, compiled with\n# exceptions disabled.\nEXE_PATH = gtest_test_utils.GetTestExecutablePath(\n    'googletest-catch-exceptions-no-ex-test_')\nenviron = gtest_test_utils.environ\nSetEnvVar = gtest_test_utils.SetEnvVar\n# Tests in this file run a Google-Test-based test program and expect it\n# to terminate prematurely.  Therefore they are incompatible with",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-catch-exceptions-test",
        "documentation": {}
    },
    {
        "label": "EXE_PATH",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-catch-exceptions-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-catch-exceptions-test",
        "peekOfCode": "EXE_PATH = gtest_test_utils.GetTestExecutablePath(\n    'googletest-catch-exceptions-no-ex-test_')\nenviron = gtest_test_utils.environ\nSetEnvVar = gtest_test_utils.SetEnvVar\n# Tests in this file run a Google-Test-based test program and expect it\n# to terminate prematurely.  Therefore they are incompatible with\n# the premature-exit-file protocol by design.  Unset the\n# premature-exit filepath to prevent Google Test from creating\n# the file.\nSetEnvVar(gtest_test_utils.PREMATURE_EXIT_FILE_ENV_VAR, None)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-catch-exceptions-test",
        "documentation": {}
    },
    {
        "label": "environ",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-catch-exceptions-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-catch-exceptions-test",
        "peekOfCode": "environ = gtest_test_utils.environ\nSetEnvVar = gtest_test_utils.SetEnvVar\n# Tests in this file run a Google-Test-based test program and expect it\n# to terminate prematurely.  Therefore they are incompatible with\n# the premature-exit-file protocol by design.  Unset the\n# premature-exit filepath to prevent Google Test from creating\n# the file.\nSetEnvVar(gtest_test_utils.PREMATURE_EXIT_FILE_ENV_VAR, None)\nTEST_LIST = gtest_test_utils.Subprocess(\n    [EXE_PATH, LIST_TESTS_FLAG], env=environ).output",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-catch-exceptions-test",
        "documentation": {}
    },
    {
        "label": "SetEnvVar",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-catch-exceptions-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-catch-exceptions-test",
        "peekOfCode": "SetEnvVar = gtest_test_utils.SetEnvVar\n# Tests in this file run a Google-Test-based test program and expect it\n# to terminate prematurely.  Therefore they are incompatible with\n# the premature-exit-file protocol by design.  Unset the\n# premature-exit filepath to prevent Google Test from creating\n# the file.\nSetEnvVar(gtest_test_utils.PREMATURE_EXIT_FILE_ENV_VAR, None)\nTEST_LIST = gtest_test_utils.Subprocess(\n    [EXE_PATH, LIST_TESTS_FLAG], env=environ).output\nSUPPORTS_SEH_EXCEPTIONS = 'ThrowsSehException' in TEST_LIST",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-catch-exceptions-test",
        "documentation": {}
    },
    {
        "label": "TEST_LIST",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-catch-exceptions-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-catch-exceptions-test",
        "peekOfCode": "TEST_LIST = gtest_test_utils.Subprocess(\n    [EXE_PATH, LIST_TESTS_FLAG], env=environ).output\nSUPPORTS_SEH_EXCEPTIONS = 'ThrowsSehException' in TEST_LIST\nif SUPPORTS_SEH_EXCEPTIONS:\n  BINARY_OUTPUT = gtest_test_utils.Subprocess([EXE_PATH], env=environ).output\nEX_BINARY_OUTPUT = gtest_test_utils.Subprocess(\n    [EX_EXE_PATH], env=environ).output\n# The tests.\nif SUPPORTS_SEH_EXCEPTIONS:\n  # pylint:disable-msg=C6302",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-catch-exceptions-test",
        "documentation": {}
    },
    {
        "label": "SUPPORTS_SEH_EXCEPTIONS",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-catch-exceptions-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-catch-exceptions-test",
        "peekOfCode": "SUPPORTS_SEH_EXCEPTIONS = 'ThrowsSehException' in TEST_LIST\nif SUPPORTS_SEH_EXCEPTIONS:\n  BINARY_OUTPUT = gtest_test_utils.Subprocess([EXE_PATH], env=environ).output\nEX_BINARY_OUTPUT = gtest_test_utils.Subprocess(\n    [EX_EXE_PATH], env=environ).output\n# The tests.\nif SUPPORTS_SEH_EXCEPTIONS:\n  # pylint:disable-msg=C6302\n  class CatchSehExceptionsTest(gtest_test_utils.TestCase):\n    \"\"\"Tests exception-catching behavior.\"\"\"",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-catch-exceptions-test",
        "documentation": {}
    },
    {
        "label": "EX_BINARY_OUTPUT",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-catch-exceptions-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-catch-exceptions-test",
        "peekOfCode": "EX_BINARY_OUTPUT = gtest_test_utils.Subprocess(\n    [EX_EXE_PATH], env=environ).output\n# The tests.\nif SUPPORTS_SEH_EXCEPTIONS:\n  # pylint:disable-msg=C6302\n  class CatchSehExceptionsTest(gtest_test_utils.TestCase):\n    \"\"\"Tests exception-catching behavior.\"\"\"\n    def TestSehExceptions(self, test_output):\n      self.assert_('SEH exception with code 0x2a thrown '\n                   'in the test fixture\\'s constructor'",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-catch-exceptions-test",
        "documentation": {}
    },
    {
        "label": "GTestColorTest",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-color-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-color-test",
        "peekOfCode": "class GTestColorTest(gtest_test_utils.TestCase):\n  def testNoEnvVarNoFlag(self):\n    \"\"\"Tests the case when there's neither GTEST_COLOR nor --gtest_color.\"\"\"\n    if not IS_WINDOWS:\n      self.assert_(not UsesColor('dumb', None, None))\n      self.assert_(not UsesColor('emacs', None, None))\n      self.assert_(not UsesColor('xterm-mono', None, None))\n      self.assert_(not UsesColor('unknown', None, None))\n      self.assert_(not UsesColor(None, None, None))\n    self.assert_(UsesColor('linux', None, None))",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-color-test",
        "documentation": {}
    },
    {
        "label": "SetEnvVar",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-color-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-color-test",
        "peekOfCode": "def SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n  if value is not None:\n    os.environ[env_var] = value\n  elif env_var in os.environ:\n    del os.environ[env_var]\ndef UsesColor(term, color_env_var, color_flag):\n  \"\"\"Runs googletest-color-test_ and returns its exit code.\"\"\"\n  SetEnvVar('TERM', term)\n  SetEnvVar(COLOR_ENV_VAR, color_env_var)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-color-test",
        "documentation": {}
    },
    {
        "label": "UsesColor",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-color-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-color-test",
        "peekOfCode": "def UsesColor(term, color_env_var, color_flag):\n  \"\"\"Runs googletest-color-test_ and returns its exit code.\"\"\"\n  SetEnvVar('TERM', term)\n  SetEnvVar(COLOR_ENV_VAR, color_env_var)\n  if color_flag is None:\n    args = []\n  else:\n    args = ['--%s=%s' % (COLOR_FLAG, color_flag)]\n  p = gtest_test_utils.Subprocess([COMMAND] + args)\n  return not p.exited or p.exit_code",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-color-test",
        "documentation": {}
    },
    {
        "label": "IS_WINDOWS",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-color-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-color-test",
        "peekOfCode": "IS_WINDOWS = os.name == 'nt'\nCOLOR_ENV_VAR = 'GTEST_COLOR'\nCOLOR_FLAG = 'gtest_color'\nCOMMAND = gtest_test_utils.GetTestExecutablePath('googletest-color-test_')\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n  if value is not None:\n    os.environ[env_var] = value\n  elif env_var in os.environ:\n    del os.environ[env_var]",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-color-test",
        "documentation": {}
    },
    {
        "label": "COLOR_ENV_VAR",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-color-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-color-test",
        "peekOfCode": "COLOR_ENV_VAR = 'GTEST_COLOR'\nCOLOR_FLAG = 'gtest_color'\nCOMMAND = gtest_test_utils.GetTestExecutablePath('googletest-color-test_')\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n  if value is not None:\n    os.environ[env_var] = value\n  elif env_var in os.environ:\n    del os.environ[env_var]\ndef UsesColor(term, color_env_var, color_flag):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-color-test",
        "documentation": {}
    },
    {
        "label": "COLOR_FLAG",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-color-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-color-test",
        "peekOfCode": "COLOR_FLAG = 'gtest_color'\nCOMMAND = gtest_test_utils.GetTestExecutablePath('googletest-color-test_')\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n  if value is not None:\n    os.environ[env_var] = value\n  elif env_var in os.environ:\n    del os.environ[env_var]\ndef UsesColor(term, color_env_var, color_flag):\n  \"\"\"Runs googletest-color-test_ and returns its exit code.\"\"\"",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-color-test",
        "documentation": {}
    },
    {
        "label": "COMMAND",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-color-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-color-test",
        "peekOfCode": "COMMAND = gtest_test_utils.GetTestExecutablePath('googletest-color-test_')\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n  if value is not None:\n    os.environ[env_var] = value\n  elif env_var in os.environ:\n    del os.environ[env_var]\ndef UsesColor(term, color_env_var, color_flag):\n  \"\"\"Runs googletest-color-test_ and returns its exit code.\"\"\"\n  SetEnvVar('TERM', term)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-color-test",
        "documentation": {}
    },
    {
        "label": "GTestEnvVarTest",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-env-var-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-env-var-test",
        "peekOfCode": "class GTestEnvVarTest(gtest_test_utils.TestCase):\n  def testEnvVarAffectsFlag(self):\n    \"\"\"Tests that environment variable should affect the corresponding flag.\"\"\"\n    TestFlag('break_on_failure', '1', '0')\n    TestFlag('color', 'yes', 'auto')\n    SetEnvVar('TESTBRIDGE_TEST_RUNNER_FAIL_FAST', None)  # For 'fail_fast' test\n    TestFlag('fail_fast', '1', '0')\n    TestFlag('filter', 'FooTest.Bar', '*')\n    SetEnvVar('XML_OUTPUT_FILE', None)  # For 'output' test\n    TestFlag('output', 'xml:tmp/foo.xml', '')",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-env-var-test",
        "documentation": {}
    },
    {
        "label": "AssertEq",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-env-var-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-env-var-test",
        "peekOfCode": "def AssertEq(expected, actual):\n  if expected != actual:\n    print('Expected: %s' % (expected,))\n    print('  Actual: %s' % (actual,))\n    raise AssertionError\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n  if value is not None:\n    environ[env_var] = value\n  elif env_var in environ:",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-env-var-test",
        "documentation": {}
    },
    {
        "label": "SetEnvVar",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-env-var-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-env-var-test",
        "peekOfCode": "def SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n  if value is not None:\n    environ[env_var] = value\n  elif env_var in environ:\n    del environ[env_var]\ndef GetFlag(flag):\n  \"\"\"Runs googletest-env-var-test_ and returns its output.\"\"\"\n  args = [COMMAND]\n  if flag is not None:",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-env-var-test",
        "documentation": {}
    },
    {
        "label": "GetFlag",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-env-var-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-env-var-test",
        "peekOfCode": "def GetFlag(flag):\n  \"\"\"Runs googletest-env-var-test_ and returns its output.\"\"\"\n  args = [COMMAND]\n  if flag is not None:\n    args += [flag]\n  return gtest_test_utils.Subprocess(args, env=environ).output\ndef TestFlag(flag, test_val, default_val):\n  \"\"\"Verifies that the given flag is affected by the corresponding env var.\"\"\"\n  env_var = 'GTEST_' + flag.upper()\n  SetEnvVar(env_var, test_val)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-env-var-test",
        "documentation": {}
    },
    {
        "label": "TestFlag",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-env-var-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-env-var-test",
        "peekOfCode": "def TestFlag(flag, test_val, default_val):\n  \"\"\"Verifies that the given flag is affected by the corresponding env var.\"\"\"\n  env_var = 'GTEST_' + flag.upper()\n  SetEnvVar(env_var, test_val)\n  AssertEq(test_val, GetFlag(flag))\n  SetEnvVar(env_var, None)\n  AssertEq(default_val, GetFlag(flag))\nclass GTestEnvVarTest(gtest_test_utils.TestCase):\n  def testEnvVarAffectsFlag(self):\n    \"\"\"Tests that environment variable should affect the corresponding flag.\"\"\"",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-env-var-test",
        "documentation": {}
    },
    {
        "label": "IS_WINDOWS",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-env-var-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-env-var-test",
        "peekOfCode": "IS_WINDOWS = os.name == 'nt'\nIS_LINUX = os.name == 'posix' and os.uname()[0] == 'Linux'\nCOMMAND = gtest_test_utils.GetTestExecutablePath('googletest-env-var-test_')\nenviron = os.environ.copy()\ndef AssertEq(expected, actual):\n  if expected != actual:\n    print('Expected: %s' % (expected,))\n    print('  Actual: %s' % (actual,))\n    raise AssertionError\ndef SetEnvVar(env_var, value):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-env-var-test",
        "documentation": {}
    },
    {
        "label": "IS_LINUX",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-env-var-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-env-var-test",
        "peekOfCode": "IS_LINUX = os.name == 'posix' and os.uname()[0] == 'Linux'\nCOMMAND = gtest_test_utils.GetTestExecutablePath('googletest-env-var-test_')\nenviron = os.environ.copy()\ndef AssertEq(expected, actual):\n  if expected != actual:\n    print('Expected: %s' % (expected,))\n    print('  Actual: %s' % (actual,))\n    raise AssertionError\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-env-var-test",
        "documentation": {}
    },
    {
        "label": "COMMAND",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-env-var-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-env-var-test",
        "peekOfCode": "COMMAND = gtest_test_utils.GetTestExecutablePath('googletest-env-var-test_')\nenviron = os.environ.copy()\ndef AssertEq(expected, actual):\n  if expected != actual:\n    print('Expected: %s' % (expected,))\n    print('  Actual: %s' % (actual,))\n    raise AssertionError\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n  if value is not None:",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-env-var-test",
        "documentation": {}
    },
    {
        "label": "environ",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-env-var-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-env-var-test",
        "peekOfCode": "environ = os.environ.copy()\ndef AssertEq(expected, actual):\n  if expected != actual:\n    print('Expected: %s' % (expected,))\n    print('  Actual: %s' % (actual,))\n    raise AssertionError\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n  if value is not None:\n    environ[env_var] = value",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-env-var-test",
        "documentation": {}
    },
    {
        "label": "GTestFailFastUnitTest",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-failfast-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-failfast-unittest",
        "peekOfCode": "class GTestFailFastUnitTest(gtest_test_utils.TestCase):\n  \"\"\"Tests the env variable or the command line flag for fail_fast.\"\"\"\n  def testDefaultBehavior(self):\n    \"\"\"Tests the behavior of not specifying the fail_fast.\"\"\"\n    txt, _ = RunAndReturnOutput()\n    self.assertIn('22 FAILED TEST', txt)\n  def testGoogletestFlag(self):\n    txt, _ = RunAndReturnOutput(test_suite='HasSimpleTest', fail_fast=True)\n    self.assertIn('1 FAILED TEST', txt)\n    self.assertIn('[  SKIPPED ] 3 tests', txt)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-failfast-unittest",
        "documentation": {}
    },
    {
        "label": "SetEnvVar",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-failfast-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-failfast-unittest",
        "peekOfCode": "def SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n  if value is not None:\n    environ[env_var] = value\n  elif env_var in environ:\n    del environ[env_var]\ndef RunAndReturnOutput(test_suite=None, fail_fast=None, run_disabled=False):\n  \"\"\"Runs the test program and returns its output.\"\"\"\n  args = []\n  xml_path = os.path.join(gtest_test_utils.GetTempDir(),",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-failfast-unittest",
        "documentation": {}
    },
    {
        "label": "RunAndReturnOutput",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-failfast-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-failfast-unittest",
        "peekOfCode": "def RunAndReturnOutput(test_suite=None, fail_fast=None, run_disabled=False):\n  \"\"\"Runs the test program and returns its output.\"\"\"\n  args = []\n  xml_path = os.path.join(gtest_test_utils.GetTempDir(),\n                          '.GTestFailFastUnitTest.xml')\n  args += ['--gtest_output=xml:' + xml_path]\n  if fail_fast is not None:\n    if isinstance(fail_fast, str):\n      args += ['--%s=%s' % (FAIL_FAST_FLAG, fail_fast)]\n    elif fail_fast:",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-failfast-unittest",
        "documentation": {}
    },
    {
        "label": "BAZEL_FAIL_FAST_ENV_VAR",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-failfast-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-failfast-unittest",
        "peekOfCode": "BAZEL_FAIL_FAST_ENV_VAR = 'TESTBRIDGE_TEST_RUNNER_FAIL_FAST'\n# The environment variable for specifying fail fast.\nFAIL_FAST_ENV_VAR = 'GTEST_FAIL_FAST'\n# The command line flag for specifying fail fast.\nFAIL_FAST_FLAG = 'gtest_fail_fast'\n# The command line flag to run disabled tests.\nRUN_DISABLED_FLAG = 'gtest_also_run_disabled_tests'\n# The command line flag for specifying a filter.\nFILTER_FLAG = 'gtest_filter'\n# Command to run the googletest-failfast-unittest_ program.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-failfast-unittest",
        "documentation": {}
    },
    {
        "label": "FAIL_FAST_ENV_VAR",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-failfast-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-failfast-unittest",
        "peekOfCode": "FAIL_FAST_ENV_VAR = 'GTEST_FAIL_FAST'\n# The command line flag for specifying fail fast.\nFAIL_FAST_FLAG = 'gtest_fail_fast'\n# The command line flag to run disabled tests.\nRUN_DISABLED_FLAG = 'gtest_also_run_disabled_tests'\n# The command line flag for specifying a filter.\nFILTER_FLAG = 'gtest_filter'\n# Command to run the googletest-failfast-unittest_ program.\nCOMMAND = gtest_test_utils.GetTestExecutablePath(\n    'googletest-failfast-unittest_')",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-failfast-unittest",
        "documentation": {}
    },
    {
        "label": "FAIL_FAST_FLAG",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-failfast-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-failfast-unittest",
        "peekOfCode": "FAIL_FAST_FLAG = 'gtest_fail_fast'\n# The command line flag to run disabled tests.\nRUN_DISABLED_FLAG = 'gtest_also_run_disabled_tests'\n# The command line flag for specifying a filter.\nFILTER_FLAG = 'gtest_filter'\n# Command to run the googletest-failfast-unittest_ program.\nCOMMAND = gtest_test_utils.GetTestExecutablePath(\n    'googletest-failfast-unittest_')\n# The command line flag to tell Google Test to output the list of tests it\n# will run.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-failfast-unittest",
        "documentation": {}
    },
    {
        "label": "RUN_DISABLED_FLAG",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-failfast-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-failfast-unittest",
        "peekOfCode": "RUN_DISABLED_FLAG = 'gtest_also_run_disabled_tests'\n# The command line flag for specifying a filter.\nFILTER_FLAG = 'gtest_filter'\n# Command to run the googletest-failfast-unittest_ program.\nCOMMAND = gtest_test_utils.GetTestExecutablePath(\n    'googletest-failfast-unittest_')\n# The command line flag to tell Google Test to output the list of tests it\n# will run.\nLIST_TESTS_FLAG = '--gtest_list_tests'\n# Indicates whether Google Test supports death tests.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-failfast-unittest",
        "documentation": {}
    },
    {
        "label": "FILTER_FLAG",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-failfast-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-failfast-unittest",
        "peekOfCode": "FILTER_FLAG = 'gtest_filter'\n# Command to run the googletest-failfast-unittest_ program.\nCOMMAND = gtest_test_utils.GetTestExecutablePath(\n    'googletest-failfast-unittest_')\n# The command line flag to tell Google Test to output the list of tests it\n# will run.\nLIST_TESTS_FLAG = '--gtest_list_tests'\n# Indicates whether Google Test supports death tests.\nSUPPORTS_DEATH_TESTS = 'HasDeathTest' in gtest_test_utils.Subprocess(\n    [COMMAND, LIST_TESTS_FLAG]).output",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-failfast-unittest",
        "documentation": {}
    },
    {
        "label": "COMMAND",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-failfast-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-failfast-unittest",
        "peekOfCode": "COMMAND = gtest_test_utils.GetTestExecutablePath(\n    'googletest-failfast-unittest_')\n# The command line flag to tell Google Test to output the list of tests it\n# will run.\nLIST_TESTS_FLAG = '--gtest_list_tests'\n# Indicates whether Google Test supports death tests.\nSUPPORTS_DEATH_TESTS = 'HasDeathTest' in gtest_test_utils.Subprocess(\n    [COMMAND, LIST_TESTS_FLAG]).output\n# Utilities.\nenviron = os.environ.copy()",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-failfast-unittest",
        "documentation": {}
    },
    {
        "label": "LIST_TESTS_FLAG",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-failfast-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-failfast-unittest",
        "peekOfCode": "LIST_TESTS_FLAG = '--gtest_list_tests'\n# Indicates whether Google Test supports death tests.\nSUPPORTS_DEATH_TESTS = 'HasDeathTest' in gtest_test_utils.Subprocess(\n    [COMMAND, LIST_TESTS_FLAG]).output\n# Utilities.\nenviron = os.environ.copy()\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n  if value is not None:\n    environ[env_var] = value",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-failfast-unittest",
        "documentation": {}
    },
    {
        "label": "SUPPORTS_DEATH_TESTS",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-failfast-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-failfast-unittest",
        "peekOfCode": "SUPPORTS_DEATH_TESTS = 'HasDeathTest' in gtest_test_utils.Subprocess(\n    [COMMAND, LIST_TESTS_FLAG]).output\n# Utilities.\nenviron = os.environ.copy()\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n  if value is not None:\n    environ[env_var] = value\n  elif env_var in environ:\n    del environ[env_var]",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-failfast-unittest",
        "documentation": {}
    },
    {
        "label": "environ",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-failfast-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-failfast-unittest",
        "peekOfCode": "environ = os.environ.copy()\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n  if value is not None:\n    environ[env_var] = value\n  elif env_var in environ:\n    del environ[env_var]\ndef RunAndReturnOutput(test_suite=None, fail_fast=None, run_disabled=False):\n  \"\"\"Runs the test program and returns its output.\"\"\"\n  args = []",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-failfast-unittest",
        "documentation": {}
    },
    {
        "label": "GTestFilterUnitTest",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "peekOfCode": "class GTestFilterUnitTest(gtest_test_utils.TestCase):\n  \"\"\"Tests the env variable or the command line flag to filter tests.\"\"\"\n  # Utilities.\n  def AssertSetEqual(self, lhs, rhs):\n    \"\"\"Asserts that two sets are equal.\"\"\"\n    for elem in lhs:\n      self.assert_(elem in rhs, '%s in %s' % (elem, rhs))\n    for elem in rhs:\n      self.assert_(elem in lhs, '%s in %s' % (elem, lhs))\n  def AssertPartitionIsValid(self, set_var, list_of_sets):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "documentation": {}
    },
    {
        "label": "SetEnvVar",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "peekOfCode": "def SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n  if value is not None:\n    environ[env_var] = value\n  elif env_var in environ:\n    del environ[env_var]\ndef RunAndReturnOutput(args = None):\n  \"\"\"Runs the test program and returns its output.\"\"\"\n  return gtest_test_utils.Subprocess([COMMAND] + (args or []),\n                                     env=environ).output",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "documentation": {}
    },
    {
        "label": "RunAndReturnOutput",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "peekOfCode": "def RunAndReturnOutput(args = None):\n  \"\"\"Runs the test program and returns its output.\"\"\"\n  return gtest_test_utils.Subprocess([COMMAND] + (args or []),\n                                     env=environ).output\ndef RunAndExtractTestList(args = None):\n  \"\"\"Runs the test program and returns its exit code and a list of tests run.\"\"\"\n  p = gtest_test_utils.Subprocess([COMMAND] + (args or []), env=environ)\n  tests_run = []\n  test_case = ''\n  test = ''",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "documentation": {}
    },
    {
        "label": "RunAndExtractTestList",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "peekOfCode": "def RunAndExtractTestList(args = None):\n  \"\"\"Runs the test program and returns its exit code and a list of tests run.\"\"\"\n  p = gtest_test_utils.Subprocess([COMMAND] + (args or []), env=environ)\n  tests_run = []\n  test_case = ''\n  test = ''\n  for line in p.output.split('\\n'):\n    match = TEST_CASE_REGEX.match(line)\n    if match is not None:\n      test_case = match.group(1)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "documentation": {}
    },
    {
        "label": "InvokeWithModifiedEnv",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "peekOfCode": "def InvokeWithModifiedEnv(extra_env, function, *args, **kwargs):\n  \"\"\"Runs the given function and arguments in a modified environment.\"\"\"\n  try:\n    original_env = environ.copy()\n    environ.update(extra_env)\n    return function(*args, **kwargs)\n  finally:\n    environ.clear()\n    environ.update(original_env)\ndef RunWithSharding(total_shards, shard_index, command):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "documentation": {}
    },
    {
        "label": "RunWithSharding",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "peekOfCode": "def RunWithSharding(total_shards, shard_index, command):\n  \"\"\"Runs a test program shard and returns exit code and a list of tests run.\"\"\"\n  extra_env = {SHARD_INDEX_ENV_VAR: str(shard_index),\n               TOTAL_SHARDS_ENV_VAR: str(total_shards)}\n  return InvokeWithModifiedEnv(extra_env, RunAndExtractTestList, command)\n# The unit test.\nclass GTestFilterUnitTest(gtest_test_utils.TestCase):\n  \"\"\"Tests the env variable or the command line flag to filter tests.\"\"\"\n  # Utilities.\n  def AssertSetEqual(self, lhs, rhs):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "documentation": {}
    },
    {
        "label": "CAN_PASS_EMPTY_ENV",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "peekOfCode": "CAN_PASS_EMPTY_ENV = False\nif sys.executable:\n  os.environ['EMPTY_VAR'] = ''\n  child = gtest_test_utils.Subprocess(\n      [sys.executable, '-c', 'import os; print(\\'EMPTY_VAR\\' in os.environ)'])\n  CAN_PASS_EMPTY_ENV = eval(child.output)\n# Check if this platform can unset environment variables in child processes.\n# We set an env variable to a non-empty string, unset it, and invoke\n# a python script in a subprocess to print whether the variable\n# is NO LONGER in os.environ.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "documentation": {}
    },
    {
        "label": "CAN_UNSET_ENV",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "peekOfCode": "CAN_UNSET_ENV = False\nif sys.executable:\n  os.environ['UNSET_VAR'] = 'X'\n  del os.environ['UNSET_VAR']\n  child = gtest_test_utils.Subprocess(\n      [sys.executable, '-c', 'import os; print(\\'UNSET_VAR\\' not in os.environ)'\n      ])\n  CAN_UNSET_ENV = eval(child.output)\n# Checks if we should test with an empty filter. This doesn't\n# make sense on platforms that cannot pass empty env variables (Win32)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "documentation": {}
    },
    {
        "label": "CAN_TEST_EMPTY_FILTER",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "peekOfCode": "CAN_TEST_EMPTY_FILTER = (CAN_PASS_EMPTY_ENV and CAN_UNSET_ENV)\n# The environment variable for specifying the test filters.\nFILTER_ENV_VAR = 'GTEST_FILTER'\n# The environment variables for test sharding.\nTOTAL_SHARDS_ENV_VAR = 'GTEST_TOTAL_SHARDS'\nSHARD_INDEX_ENV_VAR = 'GTEST_SHARD_INDEX'\nSHARD_STATUS_FILE_ENV_VAR = 'GTEST_SHARD_STATUS_FILE'\n# The command line flag for specifying the test filters.\nFILTER_FLAG = 'gtest_filter'\n# The command line flag for including disabled tests.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "documentation": {}
    },
    {
        "label": "FILTER_ENV_VAR",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "peekOfCode": "FILTER_ENV_VAR = 'GTEST_FILTER'\n# The environment variables for test sharding.\nTOTAL_SHARDS_ENV_VAR = 'GTEST_TOTAL_SHARDS'\nSHARD_INDEX_ENV_VAR = 'GTEST_SHARD_INDEX'\nSHARD_STATUS_FILE_ENV_VAR = 'GTEST_SHARD_STATUS_FILE'\n# The command line flag for specifying the test filters.\nFILTER_FLAG = 'gtest_filter'\n# The command line flag for including disabled tests.\nALSO_RUN_DISABLED_TESTS_FLAG = 'gtest_also_run_disabled_tests'\n# Command to run the googletest-filter-unittest_ program.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "documentation": {}
    },
    {
        "label": "TOTAL_SHARDS_ENV_VAR",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "peekOfCode": "TOTAL_SHARDS_ENV_VAR = 'GTEST_TOTAL_SHARDS'\nSHARD_INDEX_ENV_VAR = 'GTEST_SHARD_INDEX'\nSHARD_STATUS_FILE_ENV_VAR = 'GTEST_SHARD_STATUS_FILE'\n# The command line flag for specifying the test filters.\nFILTER_FLAG = 'gtest_filter'\n# The command line flag for including disabled tests.\nALSO_RUN_DISABLED_TESTS_FLAG = 'gtest_also_run_disabled_tests'\n# Command to run the googletest-filter-unittest_ program.\nCOMMAND = gtest_test_utils.GetTestExecutablePath('googletest-filter-unittest_')\n# Regex for determining whether parameterized tests are enabled in the binary.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "documentation": {}
    },
    {
        "label": "SHARD_INDEX_ENV_VAR",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "peekOfCode": "SHARD_INDEX_ENV_VAR = 'GTEST_SHARD_INDEX'\nSHARD_STATUS_FILE_ENV_VAR = 'GTEST_SHARD_STATUS_FILE'\n# The command line flag for specifying the test filters.\nFILTER_FLAG = 'gtest_filter'\n# The command line flag for including disabled tests.\nALSO_RUN_DISABLED_TESTS_FLAG = 'gtest_also_run_disabled_tests'\n# Command to run the googletest-filter-unittest_ program.\nCOMMAND = gtest_test_utils.GetTestExecutablePath('googletest-filter-unittest_')\n# Regex for determining whether parameterized tests are enabled in the binary.\nPARAM_TEST_REGEX = re.compile(r'/ParamTest')",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "documentation": {}
    },
    {
        "label": "SHARD_STATUS_FILE_ENV_VAR",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "peekOfCode": "SHARD_STATUS_FILE_ENV_VAR = 'GTEST_SHARD_STATUS_FILE'\n# The command line flag for specifying the test filters.\nFILTER_FLAG = 'gtest_filter'\n# The command line flag for including disabled tests.\nALSO_RUN_DISABLED_TESTS_FLAG = 'gtest_also_run_disabled_tests'\n# Command to run the googletest-filter-unittest_ program.\nCOMMAND = gtest_test_utils.GetTestExecutablePath('googletest-filter-unittest_')\n# Regex for determining whether parameterized tests are enabled in the binary.\nPARAM_TEST_REGEX = re.compile(r'/ParamTest')\n# Regex for parsing test case names from Google Test's output.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "documentation": {}
    },
    {
        "label": "FILTER_FLAG",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "peekOfCode": "FILTER_FLAG = 'gtest_filter'\n# The command line flag for including disabled tests.\nALSO_RUN_DISABLED_TESTS_FLAG = 'gtest_also_run_disabled_tests'\n# Command to run the googletest-filter-unittest_ program.\nCOMMAND = gtest_test_utils.GetTestExecutablePath('googletest-filter-unittest_')\n# Regex for determining whether parameterized tests are enabled in the binary.\nPARAM_TEST_REGEX = re.compile(r'/ParamTest')\n# Regex for parsing test case names from Google Test's output.\nTEST_CASE_REGEX = re.compile(r'^\\[\\-+\\] \\d+ tests? from (\\w+(/\\w+)?)')\n# Regex for parsing test names from Google Test's output.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "documentation": {}
    },
    {
        "label": "ALSO_RUN_DISABLED_TESTS_FLAG",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "peekOfCode": "ALSO_RUN_DISABLED_TESTS_FLAG = 'gtest_also_run_disabled_tests'\n# Command to run the googletest-filter-unittest_ program.\nCOMMAND = gtest_test_utils.GetTestExecutablePath('googletest-filter-unittest_')\n# Regex for determining whether parameterized tests are enabled in the binary.\nPARAM_TEST_REGEX = re.compile(r'/ParamTest')\n# Regex for parsing test case names from Google Test's output.\nTEST_CASE_REGEX = re.compile(r'^\\[\\-+\\] \\d+ tests? from (\\w+(/\\w+)?)')\n# Regex for parsing test names from Google Test's output.\nTEST_REGEX = re.compile(r'^\\[\\s*RUN\\s*\\].*\\.(\\w+(/\\w+)?)')\n# The command line flag to tell Google Test to output the list of tests it",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "documentation": {}
    },
    {
        "label": "COMMAND",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "peekOfCode": "COMMAND = gtest_test_utils.GetTestExecutablePath('googletest-filter-unittest_')\n# Regex for determining whether parameterized tests are enabled in the binary.\nPARAM_TEST_REGEX = re.compile(r'/ParamTest')\n# Regex for parsing test case names from Google Test's output.\nTEST_CASE_REGEX = re.compile(r'^\\[\\-+\\] \\d+ tests? from (\\w+(/\\w+)?)')\n# Regex for parsing test names from Google Test's output.\nTEST_REGEX = re.compile(r'^\\[\\s*RUN\\s*\\].*\\.(\\w+(/\\w+)?)')\n# The command line flag to tell Google Test to output the list of tests it\n# will run.\nLIST_TESTS_FLAG = '--gtest_list_tests'",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "documentation": {}
    },
    {
        "label": "PARAM_TEST_REGEX",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "peekOfCode": "PARAM_TEST_REGEX = re.compile(r'/ParamTest')\n# Regex for parsing test case names from Google Test's output.\nTEST_CASE_REGEX = re.compile(r'^\\[\\-+\\] \\d+ tests? from (\\w+(/\\w+)?)')\n# Regex for parsing test names from Google Test's output.\nTEST_REGEX = re.compile(r'^\\[\\s*RUN\\s*\\].*\\.(\\w+(/\\w+)?)')\n# The command line flag to tell Google Test to output the list of tests it\n# will run.\nLIST_TESTS_FLAG = '--gtest_list_tests'\n# Indicates whether Google Test supports death tests.\nSUPPORTS_DEATH_TESTS = 'HasDeathTest' in gtest_test_utils.Subprocess(",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "documentation": {}
    },
    {
        "label": "TEST_CASE_REGEX",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "peekOfCode": "TEST_CASE_REGEX = re.compile(r'^\\[\\-+\\] \\d+ tests? from (\\w+(/\\w+)?)')\n# Regex for parsing test names from Google Test's output.\nTEST_REGEX = re.compile(r'^\\[\\s*RUN\\s*\\].*\\.(\\w+(/\\w+)?)')\n# The command line flag to tell Google Test to output the list of tests it\n# will run.\nLIST_TESTS_FLAG = '--gtest_list_tests'\n# Indicates whether Google Test supports death tests.\nSUPPORTS_DEATH_TESTS = 'HasDeathTest' in gtest_test_utils.Subprocess(\n    [COMMAND, LIST_TESTS_FLAG]).output\n# Full names of all tests in googletest-filter-unittests_.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "documentation": {}
    },
    {
        "label": "TEST_REGEX",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "peekOfCode": "TEST_REGEX = re.compile(r'^\\[\\s*RUN\\s*\\].*\\.(\\w+(/\\w+)?)')\n# The command line flag to tell Google Test to output the list of tests it\n# will run.\nLIST_TESTS_FLAG = '--gtest_list_tests'\n# Indicates whether Google Test supports death tests.\nSUPPORTS_DEATH_TESTS = 'HasDeathTest' in gtest_test_utils.Subprocess(\n    [COMMAND, LIST_TESTS_FLAG]).output\n# Full names of all tests in googletest-filter-unittests_.\nPARAM_TESTS = [\n    'SeqP/ParamTest.TestX/0',",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "documentation": {}
    },
    {
        "label": "LIST_TESTS_FLAG",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "peekOfCode": "LIST_TESTS_FLAG = '--gtest_list_tests'\n# Indicates whether Google Test supports death tests.\nSUPPORTS_DEATH_TESTS = 'HasDeathTest' in gtest_test_utils.Subprocess(\n    [COMMAND, LIST_TESTS_FLAG]).output\n# Full names of all tests in googletest-filter-unittests_.\nPARAM_TESTS = [\n    'SeqP/ParamTest.TestX/0',\n    'SeqP/ParamTest.TestX/1',\n    'SeqP/ParamTest.TestY/0',\n    'SeqP/ParamTest.TestY/1',",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "documentation": {}
    },
    {
        "label": "SUPPORTS_DEATH_TESTS",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "peekOfCode": "SUPPORTS_DEATH_TESTS = 'HasDeathTest' in gtest_test_utils.Subprocess(\n    [COMMAND, LIST_TESTS_FLAG]).output\n# Full names of all tests in googletest-filter-unittests_.\nPARAM_TESTS = [\n    'SeqP/ParamTest.TestX/0',\n    'SeqP/ParamTest.TestX/1',\n    'SeqP/ParamTest.TestY/0',\n    'SeqP/ParamTest.TestY/1',\n    'SeqQ/ParamTest.TestX/0',\n    'SeqQ/ParamTest.TestX/1',",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "documentation": {}
    },
    {
        "label": "PARAM_TESTS",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "peekOfCode": "PARAM_TESTS = [\n    'SeqP/ParamTest.TestX/0',\n    'SeqP/ParamTest.TestX/1',\n    'SeqP/ParamTest.TestY/0',\n    'SeqP/ParamTest.TestY/1',\n    'SeqQ/ParamTest.TestX/0',\n    'SeqQ/ParamTest.TestX/1',\n    'SeqQ/ParamTest.TestY/0',\n    'SeqQ/ParamTest.TestY/1',\n    ]",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "documentation": {}
    },
    {
        "label": "DISABLED_TESTS",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "peekOfCode": "DISABLED_TESTS = [\n    'BarTest.DISABLED_TestFour',\n    'BarTest.DISABLED_TestFive',\n    'BazTest.DISABLED_TestC',\n    'DISABLED_FoobarTest.Test1',\n    'DISABLED_FoobarTest.DISABLED_Test2',\n    'DISABLED_FoobarbazTest.TestA',\n    ]\nif SUPPORTS_DEATH_TESTS:\n  DEATH_TESTS = [",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "documentation": {}
    },
    {
        "label": "ACTIVE_TESTS",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "peekOfCode": "ACTIVE_TESTS = [\n    'FooTest.Abc',\n    'FooTest.Xyz',\n    'BarTest.TestOne',\n    'BarTest.TestTwo',\n    'BarTest.TestThree',\n    'BazTest.TestOne',\n    'BazTest.TestA',\n    'BazTest.TestB',\n    ] + DEATH_TESTS + PARAM_TESTS",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "documentation": {}
    },
    {
        "label": "param_tests_present",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "peekOfCode": "param_tests_present = None\n# Utilities.\nenviron = os.environ.copy()\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n  if value is not None:\n    environ[env_var] = value\n  elif env_var in environ:\n    del environ[env_var]\ndef RunAndReturnOutput(args = None):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "documentation": {}
    },
    {
        "label": "environ",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "peekOfCode": "environ = os.environ.copy()\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n  if value is not None:\n    environ[env_var] = value\n  elif env_var in environ:\n    del environ[env_var]\ndef RunAndReturnOutput(args = None):\n  \"\"\"Runs the test program and returns its output.\"\"\"\n  return gtest_test_utils.Subprocess([COMMAND] + (args or []),",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-filter-unittest",
        "documentation": {}
    },
    {
        "label": "GTestGlobalEnvironmentUnitTest",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-global-environment-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-global-environment-unittest",
        "peekOfCode": "class GTestGlobalEnvironmentUnitTest(gtest_test_utils.TestCase):\n  \"\"\"Tests global test environment failures.\"\"\"\n  def testEnvironmentSetUpFails(self):\n    \"\"\"Tests the behavior of not specifying the fail_fast.\"\"\"\n    # Run the test.\n    txt = RunAndReturnOutput()\n    # We should see the text of the global environment setup error.\n    self.assertIn('Canned environment setup error', txt)\n    # Our test should have been skipped due to the error, and not treated as a\n    # pass.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-global-environment-unittest",
        "documentation": {}
    },
    {
        "label": "RunAndReturnOutput",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-global-environment-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-global-environment-unittest",
        "peekOfCode": "def RunAndReturnOutput():\n  \"\"\"Runs the test program and returns its output.\"\"\"\n  return gtest_test_utils.Subprocess([\n      gtest_test_utils.GetTestExecutablePath(\n          'googletest-global-environment-unittest_')\n  ]).output\nclass GTestGlobalEnvironmentUnitTest(gtest_test_utils.TestCase):\n  \"\"\"Tests global test environment failures.\"\"\"\n  def testEnvironmentSetUpFails(self):\n    \"\"\"Tests the behavior of not specifying the fail_fast.\"\"\"",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-global-environment-unittest",
        "documentation": {}
    },
    {
        "label": "GTestJsonOutFilesTest",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-outfiles-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-outfiles-test",
        "peekOfCode": "class GTestJsonOutFilesTest(gtest_test_utils.TestCase):\n  \"\"\"Unit test for Google Test's JSON output functionality.\"\"\"\n  def setUp(self):\n    # We want the trailing '/' that the last \"\" provides in os.path.join, for\n    # telling Google Test to create an output directory instead of a single file\n    # for xml output.\n    self.output_dir_ = os.path.join(gtest_test_utils.GetTempDir(),\n                                    GTEST_OUTPUT_SUBDIR, '')\n    self.DeleteFilesAndDir()\n  def tearDown(self):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-outfiles-test",
        "documentation": {}
    },
    {
        "label": "GTEST_OUTPUT_SUBDIR",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-outfiles-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-outfiles-test",
        "peekOfCode": "GTEST_OUTPUT_SUBDIR = 'json_outfiles'\nGTEST_OUTPUT_1_TEST = 'gtest_xml_outfile1_test_'\nGTEST_OUTPUT_2_TEST = 'gtest_xml_outfile2_test_'\nEXPECTED_1 = {\n    u'tests':\n        1,\n    u'failures':\n        0,\n    u'disabled':\n        0,",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-outfiles-test",
        "documentation": {}
    },
    {
        "label": "GTEST_OUTPUT_1_TEST",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-outfiles-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-outfiles-test",
        "peekOfCode": "GTEST_OUTPUT_1_TEST = 'gtest_xml_outfile1_test_'\nGTEST_OUTPUT_2_TEST = 'gtest_xml_outfile2_test_'\nEXPECTED_1 = {\n    u'tests':\n        1,\n    u'failures':\n        0,\n    u'disabled':\n        0,\n    u'errors':",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-outfiles-test",
        "documentation": {}
    },
    {
        "label": "GTEST_OUTPUT_2_TEST",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-outfiles-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-outfiles-test",
        "peekOfCode": "GTEST_OUTPUT_2_TEST = 'gtest_xml_outfile2_test_'\nEXPECTED_1 = {\n    u'tests':\n        1,\n    u'failures':\n        0,\n    u'disabled':\n        0,\n    u'errors':\n        0,",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-outfiles-test",
        "documentation": {}
    },
    {
        "label": "EXPECTED_1",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-outfiles-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-outfiles-test",
        "peekOfCode": "EXPECTED_1 = {\n    u'tests':\n        1,\n    u'failures':\n        0,\n    u'disabled':\n        0,\n    u'errors':\n        0,\n    u'time':",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-outfiles-test",
        "documentation": {}
    },
    {
        "label": "EXPECTED_2",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-outfiles-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-outfiles-test",
        "peekOfCode": "EXPECTED_2 = {\n    u'tests':\n        1,\n    u'failures':\n        0,\n    u'disabled':\n        0,\n    u'errors':\n        0,\n    u'time':",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-outfiles-test",
        "documentation": {}
    },
    {
        "label": "GTestJsonOutputUnitTest",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-output-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-output-unittest",
        "peekOfCode": "class GTestJsonOutputUnitTest(gtest_test_utils.TestCase):\n  \"\"\"Unit test for Google Test's JSON output functionality.\n  \"\"\"\n  # This test currently breaks on platforms that do not support typed and\n  # type-parameterized tests, so we don't run it under them.\n  if SUPPORTS_TYPED_TESTS:\n    def testNonEmptyJsonOutput(self):\n      \"\"\"Verifies JSON output for a Google Test binary with non-empty output.\n      Runs a test program that generates a non-empty JSON output, and\n      tests that the JSON output is expected.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-output-unittest",
        "documentation": {}
    },
    {
        "label": "GTEST_FILTER_FLAG",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-output-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-output-unittest",
        "peekOfCode": "GTEST_FILTER_FLAG = '--gtest_filter'\nGTEST_LIST_TESTS_FLAG = '--gtest_list_tests'\nGTEST_OUTPUT_FLAG = '--gtest_output'\nGTEST_DEFAULT_OUTPUT_FILE = 'test_detail.json'\nGTEST_PROGRAM_NAME = 'gtest_xml_output_unittest_'\n# The flag indicating stacktraces are not supported\nNO_STACKTRACE_SUPPORT_FLAG = '--no_stacktrace_support'\nSUPPORTS_STACK_TRACES = NO_STACKTRACE_SUPPORT_FLAG not in sys.argv\nif SUPPORTS_STACK_TRACES:\n  STACK_TRACE_TEMPLATE = '\\nStack trace:\\n*'",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-output-unittest",
        "documentation": {}
    },
    {
        "label": "GTEST_LIST_TESTS_FLAG",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-output-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-output-unittest",
        "peekOfCode": "GTEST_LIST_TESTS_FLAG = '--gtest_list_tests'\nGTEST_OUTPUT_FLAG = '--gtest_output'\nGTEST_DEFAULT_OUTPUT_FILE = 'test_detail.json'\nGTEST_PROGRAM_NAME = 'gtest_xml_output_unittest_'\n# The flag indicating stacktraces are not supported\nNO_STACKTRACE_SUPPORT_FLAG = '--no_stacktrace_support'\nSUPPORTS_STACK_TRACES = NO_STACKTRACE_SUPPORT_FLAG not in sys.argv\nif SUPPORTS_STACK_TRACES:\n  STACK_TRACE_TEMPLATE = '\\nStack trace:\\n*'\nelse:",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-output-unittest",
        "documentation": {}
    },
    {
        "label": "GTEST_OUTPUT_FLAG",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-output-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-output-unittest",
        "peekOfCode": "GTEST_OUTPUT_FLAG = '--gtest_output'\nGTEST_DEFAULT_OUTPUT_FILE = 'test_detail.json'\nGTEST_PROGRAM_NAME = 'gtest_xml_output_unittest_'\n# The flag indicating stacktraces are not supported\nNO_STACKTRACE_SUPPORT_FLAG = '--no_stacktrace_support'\nSUPPORTS_STACK_TRACES = NO_STACKTRACE_SUPPORT_FLAG not in sys.argv\nif SUPPORTS_STACK_TRACES:\n  STACK_TRACE_TEMPLATE = '\\nStack trace:\\n*'\nelse:\n  STACK_TRACE_TEMPLATE = ''",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-output-unittest",
        "documentation": {}
    },
    {
        "label": "GTEST_DEFAULT_OUTPUT_FILE",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-output-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-output-unittest",
        "peekOfCode": "GTEST_DEFAULT_OUTPUT_FILE = 'test_detail.json'\nGTEST_PROGRAM_NAME = 'gtest_xml_output_unittest_'\n# The flag indicating stacktraces are not supported\nNO_STACKTRACE_SUPPORT_FLAG = '--no_stacktrace_support'\nSUPPORTS_STACK_TRACES = NO_STACKTRACE_SUPPORT_FLAG not in sys.argv\nif SUPPORTS_STACK_TRACES:\n  STACK_TRACE_TEMPLATE = '\\nStack trace:\\n*'\nelse:\n  STACK_TRACE_TEMPLATE = ''\nEXPECTED_NON_EMPTY = {",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-output-unittest",
        "documentation": {}
    },
    {
        "label": "GTEST_PROGRAM_NAME",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-output-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-output-unittest",
        "peekOfCode": "GTEST_PROGRAM_NAME = 'gtest_xml_output_unittest_'\n# The flag indicating stacktraces are not supported\nNO_STACKTRACE_SUPPORT_FLAG = '--no_stacktrace_support'\nSUPPORTS_STACK_TRACES = NO_STACKTRACE_SUPPORT_FLAG not in sys.argv\nif SUPPORTS_STACK_TRACES:\n  STACK_TRACE_TEMPLATE = '\\nStack trace:\\n*'\nelse:\n  STACK_TRACE_TEMPLATE = ''\nEXPECTED_NON_EMPTY = {\n    u'tests':",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-output-unittest",
        "documentation": {}
    },
    {
        "label": "NO_STACKTRACE_SUPPORT_FLAG",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-output-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-output-unittest",
        "peekOfCode": "NO_STACKTRACE_SUPPORT_FLAG = '--no_stacktrace_support'\nSUPPORTS_STACK_TRACES = NO_STACKTRACE_SUPPORT_FLAG not in sys.argv\nif SUPPORTS_STACK_TRACES:\n  STACK_TRACE_TEMPLATE = '\\nStack trace:\\n*'\nelse:\n  STACK_TRACE_TEMPLATE = ''\nEXPECTED_NON_EMPTY = {\n    u'tests':\n        26,\n    u'failures':",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-output-unittest",
        "documentation": {}
    },
    {
        "label": "SUPPORTS_STACK_TRACES",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-output-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-output-unittest",
        "peekOfCode": "SUPPORTS_STACK_TRACES = NO_STACKTRACE_SUPPORT_FLAG not in sys.argv\nif SUPPORTS_STACK_TRACES:\n  STACK_TRACE_TEMPLATE = '\\nStack trace:\\n*'\nelse:\n  STACK_TRACE_TEMPLATE = ''\nEXPECTED_NON_EMPTY = {\n    u'tests':\n        26,\n    u'failures':\n        5,",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-output-unittest",
        "documentation": {}
    },
    {
        "label": "EXPECTED_NON_EMPTY",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-output-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-output-unittest",
        "peekOfCode": "EXPECTED_NON_EMPTY = {\n    u'tests':\n        26,\n    u'failures':\n        5,\n    u'disabled':\n        2,\n    u'errors':\n        0,\n    u'timestamp':",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-output-unittest",
        "documentation": {}
    },
    {
        "label": "EXPECTED_FILTERED",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-output-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-output-unittest",
        "peekOfCode": "EXPECTED_FILTERED = {\n    u'tests':\n        1,\n    u'failures':\n        0,\n    u'disabled':\n        0,\n    u'errors':\n        0,\n    u'time':",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-output-unittest",
        "documentation": {}
    },
    {
        "label": "EXPECTED_NO_TEST",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-output-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-output-unittest",
        "peekOfCode": "EXPECTED_NO_TEST = {\n    u'tests':\n        0,\n    u'failures':\n        0,\n    u'disabled':\n        0,\n    u'errors':\n        0,\n    u'time':",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-output-unittest",
        "documentation": {}
    },
    {
        "label": "GTEST_PROGRAM_PATH",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-output-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-output-unittest",
        "peekOfCode": "GTEST_PROGRAM_PATH = gtest_test_utils.GetTestExecutablePath(GTEST_PROGRAM_NAME)\nSUPPORTS_TYPED_TESTS = 'TypedTest' in gtest_test_utils.Subprocess(\n    [GTEST_PROGRAM_PATH, GTEST_LIST_TESTS_FLAG], capture_stderr=False).output\nclass GTestJsonOutputUnitTest(gtest_test_utils.TestCase):\n  \"\"\"Unit test for Google Test's JSON output functionality.\n  \"\"\"\n  # This test currently breaks on platforms that do not support typed and\n  # type-parameterized tests, so we don't run it under them.\n  if SUPPORTS_TYPED_TESTS:\n    def testNonEmptyJsonOutput(self):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-output-unittest",
        "documentation": {}
    },
    {
        "label": "SUPPORTS_TYPED_TESTS",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-output-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-output-unittest",
        "peekOfCode": "SUPPORTS_TYPED_TESTS = 'TypedTest' in gtest_test_utils.Subprocess(\n    [GTEST_PROGRAM_PATH, GTEST_LIST_TESTS_FLAG], capture_stderr=False).output\nclass GTestJsonOutputUnitTest(gtest_test_utils.TestCase):\n  \"\"\"Unit test for Google Test's JSON output functionality.\n  \"\"\"\n  # This test currently breaks on platforms that do not support typed and\n  # type-parameterized tests, so we don't run it under them.\n  if SUPPORTS_TYPED_TESTS:\n    def testNonEmptyJsonOutput(self):\n      \"\"\"Verifies JSON output for a Google Test binary with non-empty output.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-json-output-unittest",
        "documentation": {}
    },
    {
        "label": "GTestListTestsUnitTest",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-list-tests-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-list-tests-unittest",
        "peekOfCode": "class GTestListTestsUnitTest(gtest_test_utils.TestCase):\n  \"\"\"Tests using the --gtest_list_tests flag to list all tests.\"\"\"\n  def RunAndVerify(self, flag_value, expected_output_re, other_flag):\n    \"\"\"Runs googletest-list-tests-unittest_ and verifies that it prints\n    the correct tests.\n    Args:\n      flag_value:         value of the --gtest_list_tests flag;\n                          None if the flag should not be present.\n      expected_output_re: regular expression that matches the expected\n                          output after running command;",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-list-tests-unittest",
        "documentation": {}
    },
    {
        "label": "Run",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-list-tests-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-list-tests-unittest",
        "peekOfCode": "def Run(args):\n  \"\"\"Runs googletest-list-tests-unittest_ and returns the list of tests printed.\"\"\"\n  return gtest_test_utils.Subprocess([EXE_PATH] + args,\n                                     capture_stderr=False).output\n# The unit test.\nclass GTestListTestsUnitTest(gtest_test_utils.TestCase):\n  \"\"\"Tests using the --gtest_list_tests flag to list all tests.\"\"\"\n  def RunAndVerify(self, flag_value, expected_output_re, other_flag):\n    \"\"\"Runs googletest-list-tests-unittest_ and verifies that it prints\n    the correct tests.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-list-tests-unittest",
        "documentation": {}
    },
    {
        "label": "LIST_TESTS_FLAG",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-list-tests-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-list-tests-unittest",
        "peekOfCode": "LIST_TESTS_FLAG = 'gtest_list_tests'\n# Path to the googletest-list-tests-unittest_ program.\nEXE_PATH = gtest_test_utils.GetTestExecutablePath('googletest-list-tests-unittest_')\n# The expected output when running googletest-list-tests-unittest_ with\n# --gtest_list_tests\nEXPECTED_OUTPUT_NO_FILTER_RE = re.compile(r\"\"\"FooDeathTest\\.\n  Test1\nFoo\\.\n  Bar1\n  Bar2",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-list-tests-unittest",
        "documentation": {}
    },
    {
        "label": "EXE_PATH",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-list-tests-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-list-tests-unittest",
        "peekOfCode": "EXE_PATH = gtest_test_utils.GetTestExecutablePath('googletest-list-tests-unittest_')\n# The expected output when running googletest-list-tests-unittest_ with\n# --gtest_list_tests\nEXPECTED_OUTPUT_NO_FILTER_RE = re.compile(r\"\"\"FooDeathTest\\.\n  Test1\nFoo\\.\n  Bar1\n  Bar2\n  DISABLED_Bar3\nAbc\\.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-list-tests-unittest",
        "documentation": {}
    },
    {
        "label": "EXPECTED_OUTPUT_NO_FILTER_RE",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-list-tests-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-list-tests-unittest",
        "peekOfCode": "EXPECTED_OUTPUT_NO_FILTER_RE = re.compile(r\"\"\"FooDeathTest\\.\n  Test1\nFoo\\.\n  Bar1\n  Bar2\n  DISABLED_Bar3\nAbc\\.\n  Xyz\n  Def\nFooBar\\.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-list-tests-unittest",
        "documentation": {}
    },
    {
        "label": "EXPECTED_OUTPUT_FILTER_FOO_RE",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-list-tests-unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-list-tests-unittest",
        "peekOfCode": "EXPECTED_OUTPUT_FILTER_FOO_RE = re.compile(r\"\"\"FooDeathTest\\.\n  Test1\nFoo\\.\n  Bar1\n  Bar2\n  DISABLED_Bar3\nFooBar\\.\n  Baz\nFooTest\\.\n  Test1",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-list-tests-unittest",
        "documentation": {}
    },
    {
        "label": "GTestOutputTest",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "peekOfCode": "class GTestOutputTest(gtest_test_utils.TestCase):\n  def RemoveUnsupportedTests(self, test_output):\n    if not SUPPORTS_DEATH_TESTS:\n      test_output = RemoveMatchingTests(test_output, 'DeathTest')\n    if not SUPPORTS_TYPED_TESTS:\n      test_output = RemoveMatchingTests(test_output, 'TypedTest')\n      test_output = RemoveMatchingTests(test_output, 'TypedDeathTest')\n      test_output = RemoveMatchingTests(test_output, 'TypeParamDeathTest')\n    if not SUPPORTS_THREADS:\n      test_output = RemoveMatchingTests(test_output,",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "ToUnixLineEnding",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "peekOfCode": "def ToUnixLineEnding(s):\n  \"\"\"Changes all Windows/Mac line endings in s to UNIX line endings.\"\"\"\n  return s.replace('\\r\\n', '\\n').replace('\\r', '\\n')\ndef RemoveLocations(test_output):\n  \"\"\"Removes all file location info from a Google Test program's output.\n  Args:\n       test_output:  the output of a Google Test program.\n  Returns:\n       output with all file location info (in the form of\n       'DIRECTORY/FILE_NAME:LINE_NUMBER: 'or",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "RemoveLocations",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "peekOfCode": "def RemoveLocations(test_output):\n  \"\"\"Removes all file location info from a Google Test program's output.\n  Args:\n       test_output:  the output of a Google Test program.\n  Returns:\n       output with all file location info (in the form of\n       'DIRECTORY/FILE_NAME:LINE_NUMBER: 'or\n       'DIRECTORY\\\\FILE_NAME(LINE_NUMBER): ') replaced by\n       'FILE_NAME:#: '.\n  \"\"\"",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "RemoveStackTraceDetails",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "peekOfCode": "def RemoveStackTraceDetails(output):\n  \"\"\"Removes all stack traces from a Google Test program's output.\"\"\"\n  # *? means \"find the shortest string that matches\".\n  return re.sub(r'Stack trace:(.|\\n)*?\\n\\n',\n                'Stack trace: (omitted)\\n\\n', output)\ndef RemoveStackTraces(output):\n  \"\"\"Removes all traces of stack traces from a Google Test program's output.\"\"\"\n  # *? means \"find the shortest string that matches\".\n  return re.sub(r'Stack trace:(.|\\n)*?\\n\\n', '', output)\ndef RemoveTime(output):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "RemoveStackTraces",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "peekOfCode": "def RemoveStackTraces(output):\n  \"\"\"Removes all traces of stack traces from a Google Test program's output.\"\"\"\n  # *? means \"find the shortest string that matches\".\n  return re.sub(r'Stack trace:(.|\\n)*?\\n\\n', '', output)\ndef RemoveTime(output):\n  \"\"\"Removes all time information from a Google Test program's output.\"\"\"\n  return re.sub(r'\\(\\d+ ms', '(? ms', output)\ndef RemoveTypeInfoDetails(test_output):\n  \"\"\"Removes compiler-specific type info from Google Test program's output.\n  Args:",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "RemoveTime",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "peekOfCode": "def RemoveTime(output):\n  \"\"\"Removes all time information from a Google Test program's output.\"\"\"\n  return re.sub(r'\\(\\d+ ms', '(? ms', output)\ndef RemoveTypeInfoDetails(test_output):\n  \"\"\"Removes compiler-specific type info from Google Test program's output.\n  Args:\n       test_output:  the output of a Google Test program.\n  Returns:\n       output with type information normalized to canonical form.\n  \"\"\"",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "RemoveTypeInfoDetails",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "peekOfCode": "def RemoveTypeInfoDetails(test_output):\n  \"\"\"Removes compiler-specific type info from Google Test program's output.\n  Args:\n       test_output:  the output of a Google Test program.\n  Returns:\n       output with type information normalized to canonical form.\n  \"\"\"\n  # some compilers output the name of type 'unsigned int' as 'unsigned'\n  return re.sub(r'unsigned int', 'unsigned', test_output)\ndef NormalizeToCurrentPlatform(test_output):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "NormalizeToCurrentPlatform",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "peekOfCode": "def NormalizeToCurrentPlatform(test_output):\n  \"\"\"Normalizes platform specific output details for easier comparison.\"\"\"\n  if IS_WINDOWS:\n    # Removes the color information that is not present on Windows.\n    test_output = re.sub('\\x1b\\\\[(0;3\\d)?m', '', test_output)\n    # Changes failure message headers into the Windows format.\n    test_output = re.sub(r': Failure\\n', r': error: ', test_output)\n    # Changes file(line_number) to file:line_number.\n    test_output = re.sub(r'((\\w|\\.)+)\\((\\d+)\\):', r'\\1:\\3:', test_output)\n  return test_output",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "RemoveTestCounts",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "peekOfCode": "def RemoveTestCounts(output):\n  \"\"\"Removes test counts from a Google Test program's output.\"\"\"\n  output = re.sub(r'\\d+ tests?, listed below',\n                  '? tests, listed below', output)\n  output = re.sub(r'\\d+ FAILED TESTS',\n                  '? FAILED TESTS', output)\n  output = re.sub(r'\\d+ tests? from \\d+ test cases?',\n                  '? tests from ? test cases', output)\n  output = re.sub(r'\\d+ tests? from ([a-zA-Z_])',\n                  r'? tests from \\1', output)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "RemoveMatchingTests",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "peekOfCode": "def RemoveMatchingTests(test_output, pattern):\n  \"\"\"Removes output of specified tests from a Google Test program's output.\n  This function strips not only the beginning and the end of a test but also\n  all output in between.\n  Args:\n    test_output:       A string containing the test output.\n    pattern:           A regex string that matches names of test cases or\n                       tests to remove.\n  Returns:\n    Contents of test_output with tests whose names match pattern removed.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "NormalizeOutput",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "peekOfCode": "def NormalizeOutput(output):\n  \"\"\"Normalizes output (the output of googletest-output-test_.exe).\"\"\"\n  output = ToUnixLineEnding(output)\n  output = RemoveLocations(output)\n  output = RemoveStackTraceDetails(output)\n  output = RemoveTime(output)\n  return output\ndef GetShellCommandOutput(env_cmd):\n  \"\"\"Runs a command in a sub-process, and returns its output in a string.\n  Args:",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "GetShellCommandOutput",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "peekOfCode": "def GetShellCommandOutput(env_cmd):\n  \"\"\"Runs a command in a sub-process, and returns its output in a string.\n  Args:\n    env_cmd: The shell command. A 2-tuple where element 0 is a dict of extra\n             environment variables to set, and element 1 is a string with\n             the command and any flags.\n  Returns:\n    A string with the command's combined standard and diagnostic output.\n  \"\"\"\n  # Spawns cmd in a sub-process, and gets its standard I/O file objects.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "GetCommandOutput",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "peekOfCode": "def GetCommandOutput(env_cmd):\n  \"\"\"Runs a command and returns its output with all file location\n  info stripped off.\n  Args:\n    env_cmd:  The shell command. A 2-tuple where element 0 is a dict of extra\n              environment variables to set, and element 1 is a string with\n              the command and any flags.\n  \"\"\"\n  # Disables exception pop-ups on Windows.\n  environ, cmdline = env_cmd",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "GetOutputOfAllCommands",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "peekOfCode": "def GetOutputOfAllCommands():\n  \"\"\"Returns concatenated output from several representative commands.\"\"\"\n  return (GetCommandOutput(COMMAND_WITH_COLOR) +\n          GetCommandOutput(COMMAND_WITH_TIME) +\n          GetCommandOutput(COMMAND_WITH_DISABLED) +\n          GetCommandOutput(COMMAND_WITH_SHARDING))\ntest_list = GetShellCommandOutput(COMMAND_LIST_TESTS)\nSUPPORTS_DEATH_TESTS = 'DeathTest' in test_list\nSUPPORTS_TYPED_TESTS = 'TypedTest' in test_list\nSUPPORTS_THREADS = 'ExpectFailureWithThreadsTest' in test_list",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "GENGOLDEN_FLAG",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "peekOfCode": "GENGOLDEN_FLAG = '--gengolden'\nCATCH_EXCEPTIONS_ENV_VAR_NAME = 'GTEST_CATCH_EXCEPTIONS'\n# The flag indicating stacktraces are not supported\nNO_STACKTRACE_SUPPORT_FLAG = '--no_stacktrace_support'\nIS_LINUX = os.name == 'posix' and os.uname()[0] == 'Linux'\nIS_WINDOWS = os.name == 'nt'\nGOLDEN_NAME = 'googletest-output-test-golden-lin.txt'\nPROGRAM_PATH = gtest_test_utils.GetTestExecutablePath('googletest-output-test_')\n# At least one command we exercise must not have the\n# 'internal_skip_environment_and_ad_hoc_tests' argument.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "CATCH_EXCEPTIONS_ENV_VAR_NAME",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "peekOfCode": "CATCH_EXCEPTIONS_ENV_VAR_NAME = 'GTEST_CATCH_EXCEPTIONS'\n# The flag indicating stacktraces are not supported\nNO_STACKTRACE_SUPPORT_FLAG = '--no_stacktrace_support'\nIS_LINUX = os.name == 'posix' and os.uname()[0] == 'Linux'\nIS_WINDOWS = os.name == 'nt'\nGOLDEN_NAME = 'googletest-output-test-golden-lin.txt'\nPROGRAM_PATH = gtest_test_utils.GetTestExecutablePath('googletest-output-test_')\n# At least one command we exercise must not have the\n# 'internal_skip_environment_and_ad_hoc_tests' argument.\nCOMMAND_LIST_TESTS = ({}, [PROGRAM_PATH, '--gtest_list_tests'])",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "NO_STACKTRACE_SUPPORT_FLAG",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "peekOfCode": "NO_STACKTRACE_SUPPORT_FLAG = '--no_stacktrace_support'\nIS_LINUX = os.name == 'posix' and os.uname()[0] == 'Linux'\nIS_WINDOWS = os.name == 'nt'\nGOLDEN_NAME = 'googletest-output-test-golden-lin.txt'\nPROGRAM_PATH = gtest_test_utils.GetTestExecutablePath('googletest-output-test_')\n# At least one command we exercise must not have the\n# 'internal_skip_environment_and_ad_hoc_tests' argument.\nCOMMAND_LIST_TESTS = ({}, [PROGRAM_PATH, '--gtest_list_tests'])\nCOMMAND_WITH_COLOR = ({}, [PROGRAM_PATH, '--gtest_color=yes'])\nCOMMAND_WITH_TIME = ({}, [PROGRAM_PATH,",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "IS_LINUX",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "peekOfCode": "IS_LINUX = os.name == 'posix' and os.uname()[0] == 'Linux'\nIS_WINDOWS = os.name == 'nt'\nGOLDEN_NAME = 'googletest-output-test-golden-lin.txt'\nPROGRAM_PATH = gtest_test_utils.GetTestExecutablePath('googletest-output-test_')\n# At least one command we exercise must not have the\n# 'internal_skip_environment_and_ad_hoc_tests' argument.\nCOMMAND_LIST_TESTS = ({}, [PROGRAM_PATH, '--gtest_list_tests'])\nCOMMAND_WITH_COLOR = ({}, [PROGRAM_PATH, '--gtest_color=yes'])\nCOMMAND_WITH_TIME = ({}, [PROGRAM_PATH,\n                          '--gtest_print_time',",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "IS_WINDOWS",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "peekOfCode": "IS_WINDOWS = os.name == 'nt'\nGOLDEN_NAME = 'googletest-output-test-golden-lin.txt'\nPROGRAM_PATH = gtest_test_utils.GetTestExecutablePath('googletest-output-test_')\n# At least one command we exercise must not have the\n# 'internal_skip_environment_and_ad_hoc_tests' argument.\nCOMMAND_LIST_TESTS = ({}, [PROGRAM_PATH, '--gtest_list_tests'])\nCOMMAND_WITH_COLOR = ({}, [PROGRAM_PATH, '--gtest_color=yes'])\nCOMMAND_WITH_TIME = ({}, [PROGRAM_PATH,\n                          '--gtest_print_time',\n                          'internal_skip_environment_and_ad_hoc_tests',",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "GOLDEN_NAME",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "peekOfCode": "GOLDEN_NAME = 'googletest-output-test-golden-lin.txt'\nPROGRAM_PATH = gtest_test_utils.GetTestExecutablePath('googletest-output-test_')\n# At least one command we exercise must not have the\n# 'internal_skip_environment_and_ad_hoc_tests' argument.\nCOMMAND_LIST_TESTS = ({}, [PROGRAM_PATH, '--gtest_list_tests'])\nCOMMAND_WITH_COLOR = ({}, [PROGRAM_PATH, '--gtest_color=yes'])\nCOMMAND_WITH_TIME = ({}, [PROGRAM_PATH,\n                          '--gtest_print_time',\n                          'internal_skip_environment_and_ad_hoc_tests',\n                          '--gtest_filter=FatalFailureTest.*:LoggingTest.*'])",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "PROGRAM_PATH",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "peekOfCode": "PROGRAM_PATH = gtest_test_utils.GetTestExecutablePath('googletest-output-test_')\n# At least one command we exercise must not have the\n# 'internal_skip_environment_and_ad_hoc_tests' argument.\nCOMMAND_LIST_TESTS = ({}, [PROGRAM_PATH, '--gtest_list_tests'])\nCOMMAND_WITH_COLOR = ({}, [PROGRAM_PATH, '--gtest_color=yes'])\nCOMMAND_WITH_TIME = ({}, [PROGRAM_PATH,\n                          '--gtest_print_time',\n                          'internal_skip_environment_and_ad_hoc_tests',\n                          '--gtest_filter=FatalFailureTest.*:LoggingTest.*'])\nCOMMAND_WITH_DISABLED = (",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "COMMAND_LIST_TESTS",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "peekOfCode": "COMMAND_LIST_TESTS = ({}, [PROGRAM_PATH, '--gtest_list_tests'])\nCOMMAND_WITH_COLOR = ({}, [PROGRAM_PATH, '--gtest_color=yes'])\nCOMMAND_WITH_TIME = ({}, [PROGRAM_PATH,\n                          '--gtest_print_time',\n                          'internal_skip_environment_and_ad_hoc_tests',\n                          '--gtest_filter=FatalFailureTest.*:LoggingTest.*'])\nCOMMAND_WITH_DISABLED = (\n    {}, [PROGRAM_PATH,\n         '--gtest_also_run_disabled_tests',\n         'internal_skip_environment_and_ad_hoc_tests',",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "COMMAND_WITH_COLOR",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "peekOfCode": "COMMAND_WITH_COLOR = ({}, [PROGRAM_PATH, '--gtest_color=yes'])\nCOMMAND_WITH_TIME = ({}, [PROGRAM_PATH,\n                          '--gtest_print_time',\n                          'internal_skip_environment_and_ad_hoc_tests',\n                          '--gtest_filter=FatalFailureTest.*:LoggingTest.*'])\nCOMMAND_WITH_DISABLED = (\n    {}, [PROGRAM_PATH,\n         '--gtest_also_run_disabled_tests',\n         'internal_skip_environment_and_ad_hoc_tests',\n         '--gtest_filter=*DISABLED_*'])",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "COMMAND_WITH_TIME",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "peekOfCode": "COMMAND_WITH_TIME = ({}, [PROGRAM_PATH,\n                          '--gtest_print_time',\n                          'internal_skip_environment_and_ad_hoc_tests',\n                          '--gtest_filter=FatalFailureTest.*:LoggingTest.*'])\nCOMMAND_WITH_DISABLED = (\n    {}, [PROGRAM_PATH,\n         '--gtest_also_run_disabled_tests',\n         'internal_skip_environment_and_ad_hoc_tests',\n         '--gtest_filter=*DISABLED_*'])\nCOMMAND_WITH_SHARDING = (",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "COMMAND_WITH_DISABLED",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "peekOfCode": "COMMAND_WITH_DISABLED = (\n    {}, [PROGRAM_PATH,\n         '--gtest_also_run_disabled_tests',\n         'internal_skip_environment_and_ad_hoc_tests',\n         '--gtest_filter=*DISABLED_*'])\nCOMMAND_WITH_SHARDING = (\n    {'GTEST_SHARD_INDEX': '1', 'GTEST_TOTAL_SHARDS': '2'},\n    [PROGRAM_PATH,\n     'internal_skip_environment_and_ad_hoc_tests',\n     '--gtest_filter=PassingTest.*'])",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "COMMAND_WITH_SHARDING",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "peekOfCode": "COMMAND_WITH_SHARDING = (\n    {'GTEST_SHARD_INDEX': '1', 'GTEST_TOTAL_SHARDS': '2'},\n    [PROGRAM_PATH,\n     'internal_skip_environment_and_ad_hoc_tests',\n     '--gtest_filter=PassingTest.*'])\nGOLDEN_PATH = os.path.join(gtest_test_utils.GetSourceDir(), GOLDEN_NAME)\ndef ToUnixLineEnding(s):\n  \"\"\"Changes all Windows/Mac line endings in s to UNIX line endings.\"\"\"\n  return s.replace('\\r\\n', '\\n').replace('\\r', '\\n')\ndef RemoveLocations(test_output):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "GOLDEN_PATH",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "peekOfCode": "GOLDEN_PATH = os.path.join(gtest_test_utils.GetSourceDir(), GOLDEN_NAME)\ndef ToUnixLineEnding(s):\n  \"\"\"Changes all Windows/Mac line endings in s to UNIX line endings.\"\"\"\n  return s.replace('\\r\\n', '\\n').replace('\\r', '\\n')\ndef RemoveLocations(test_output):\n  \"\"\"Removes all file location info from a Google Test program's output.\n  Args:\n       test_output:  the output of a Google Test program.\n  Returns:\n       output with all file location info (in the form of",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "test_list",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "peekOfCode": "test_list = GetShellCommandOutput(COMMAND_LIST_TESTS)\nSUPPORTS_DEATH_TESTS = 'DeathTest' in test_list\nSUPPORTS_TYPED_TESTS = 'TypedTest' in test_list\nSUPPORTS_THREADS = 'ExpectFailureWithThreadsTest' in test_list\nSUPPORTS_STACK_TRACES = NO_STACKTRACE_SUPPORT_FLAG not in sys.argv\nCAN_GENERATE_GOLDEN_FILE = (SUPPORTS_DEATH_TESTS and\n                            SUPPORTS_TYPED_TESTS and\n                            SUPPORTS_THREADS and\n                            SUPPORTS_STACK_TRACES)\nclass GTestOutputTest(gtest_test_utils.TestCase):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "SUPPORTS_DEATH_TESTS",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "peekOfCode": "SUPPORTS_DEATH_TESTS = 'DeathTest' in test_list\nSUPPORTS_TYPED_TESTS = 'TypedTest' in test_list\nSUPPORTS_THREADS = 'ExpectFailureWithThreadsTest' in test_list\nSUPPORTS_STACK_TRACES = NO_STACKTRACE_SUPPORT_FLAG not in sys.argv\nCAN_GENERATE_GOLDEN_FILE = (SUPPORTS_DEATH_TESTS and\n                            SUPPORTS_TYPED_TESTS and\n                            SUPPORTS_THREADS and\n                            SUPPORTS_STACK_TRACES)\nclass GTestOutputTest(gtest_test_utils.TestCase):\n  def RemoveUnsupportedTests(self, test_output):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "SUPPORTS_TYPED_TESTS",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "peekOfCode": "SUPPORTS_TYPED_TESTS = 'TypedTest' in test_list\nSUPPORTS_THREADS = 'ExpectFailureWithThreadsTest' in test_list\nSUPPORTS_STACK_TRACES = NO_STACKTRACE_SUPPORT_FLAG not in sys.argv\nCAN_GENERATE_GOLDEN_FILE = (SUPPORTS_DEATH_TESTS and\n                            SUPPORTS_TYPED_TESTS and\n                            SUPPORTS_THREADS and\n                            SUPPORTS_STACK_TRACES)\nclass GTestOutputTest(gtest_test_utils.TestCase):\n  def RemoveUnsupportedTests(self, test_output):\n    if not SUPPORTS_DEATH_TESTS:",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "SUPPORTS_THREADS",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "peekOfCode": "SUPPORTS_THREADS = 'ExpectFailureWithThreadsTest' in test_list\nSUPPORTS_STACK_TRACES = NO_STACKTRACE_SUPPORT_FLAG not in sys.argv\nCAN_GENERATE_GOLDEN_FILE = (SUPPORTS_DEATH_TESTS and\n                            SUPPORTS_TYPED_TESTS and\n                            SUPPORTS_THREADS and\n                            SUPPORTS_STACK_TRACES)\nclass GTestOutputTest(gtest_test_utils.TestCase):\n  def RemoveUnsupportedTests(self, test_output):\n    if not SUPPORTS_DEATH_TESTS:\n      test_output = RemoveMatchingTests(test_output, 'DeathTest')",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "SUPPORTS_STACK_TRACES",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "peekOfCode": "SUPPORTS_STACK_TRACES = NO_STACKTRACE_SUPPORT_FLAG not in sys.argv\nCAN_GENERATE_GOLDEN_FILE = (SUPPORTS_DEATH_TESTS and\n                            SUPPORTS_TYPED_TESTS and\n                            SUPPORTS_THREADS and\n                            SUPPORTS_STACK_TRACES)\nclass GTestOutputTest(gtest_test_utils.TestCase):\n  def RemoveUnsupportedTests(self, test_output):\n    if not SUPPORTS_DEATH_TESTS:\n      test_output = RemoveMatchingTests(test_output, 'DeathTest')\n    if not SUPPORTS_TYPED_TESTS:",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "CAN_GENERATE_GOLDEN_FILE",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "peekOfCode": "CAN_GENERATE_GOLDEN_FILE = (SUPPORTS_DEATH_TESTS and\n                            SUPPORTS_TYPED_TESTS and\n                            SUPPORTS_THREADS and\n                            SUPPORTS_STACK_TRACES)\nclass GTestOutputTest(gtest_test_utils.TestCase):\n  def RemoveUnsupportedTests(self, test_output):\n    if not SUPPORTS_DEATH_TESTS:\n      test_output = RemoveMatchingTests(test_output, 'DeathTest')\n    if not SUPPORTS_TYPED_TESTS:\n      test_output = RemoveMatchingTests(test_output, 'TypedTest')",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "GTestParamTestInvalidName1Test",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-param-test-invalid-name1-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-param-test-invalid-name1-test",
        "peekOfCode": "class GTestParamTestInvalidName1Test(gtest_test_utils.TestCase):\n  def testExitCodeAndOutput(self):\n    TestExitCodeAndOutput(COMMAND)\nif __name__ == '__main__':\n  gtest_test_utils.Main()",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-param-test-invalid-name1-test",
        "documentation": {}
    },
    {
        "label": "Assert",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-param-test-invalid-name1-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-param-test-invalid-name1-test",
        "peekOfCode": "def Assert(condition):\n  if not condition:\n    raise AssertionError\ndef TestExitCodeAndOutput(command):\n  \"\"\"Runs the given command and verifies its exit code and output.\"\"\"\n  err = ('Parameterized test name \\'\"InvalidWithQuotes\"\\' is invalid')\n  p = gtest_test_utils.Subprocess(command)\n  Assert(p.terminated_by_signal)\n  # Verify the output message contains appropriate output\n  Assert(err in p.output)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-param-test-invalid-name1-test",
        "documentation": {}
    },
    {
        "label": "TestExitCodeAndOutput",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-param-test-invalid-name1-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-param-test-invalid-name1-test",
        "peekOfCode": "def TestExitCodeAndOutput(command):\n  \"\"\"Runs the given command and verifies its exit code and output.\"\"\"\n  err = ('Parameterized test name \\'\"InvalidWithQuotes\"\\' is invalid')\n  p = gtest_test_utils.Subprocess(command)\n  Assert(p.terminated_by_signal)\n  # Verify the output message contains appropriate output\n  Assert(err in p.output)\nclass GTestParamTestInvalidName1Test(gtest_test_utils.TestCase):\n  def testExitCodeAndOutput(self):\n    TestExitCodeAndOutput(COMMAND)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-param-test-invalid-name1-test",
        "documentation": {}
    },
    {
        "label": "binary_name",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-param-test-invalid-name1-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-param-test-invalid-name1-test",
        "peekOfCode": "binary_name = 'googletest-param-test-invalid-name1-test_'\nCOMMAND = gtest_test_utils.GetTestExecutablePath(binary_name)\ndef Assert(condition):\n  if not condition:\n    raise AssertionError\ndef TestExitCodeAndOutput(command):\n  \"\"\"Runs the given command and verifies its exit code and output.\"\"\"\n  err = ('Parameterized test name \\'\"InvalidWithQuotes\"\\' is invalid')\n  p = gtest_test_utils.Subprocess(command)\n  Assert(p.terminated_by_signal)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-param-test-invalid-name1-test",
        "documentation": {}
    },
    {
        "label": "COMMAND",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-param-test-invalid-name1-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-param-test-invalid-name1-test",
        "peekOfCode": "COMMAND = gtest_test_utils.GetTestExecutablePath(binary_name)\ndef Assert(condition):\n  if not condition:\n    raise AssertionError\ndef TestExitCodeAndOutput(command):\n  \"\"\"Runs the given command and verifies its exit code and output.\"\"\"\n  err = ('Parameterized test name \\'\"InvalidWithQuotes\"\\' is invalid')\n  p = gtest_test_utils.Subprocess(command)\n  Assert(p.terminated_by_signal)\n  # Verify the output message contains appropriate output",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-param-test-invalid-name1-test",
        "documentation": {}
    },
    {
        "label": "GTestParamTestInvalidName2Test",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-param-test-invalid-name2-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-param-test-invalid-name2-test",
        "peekOfCode": "class GTestParamTestInvalidName2Test(gtest_test_utils.TestCase):\n  def testExitCodeAndOutput(self):\n    TestExitCodeAndOutput(COMMAND)\nif __name__ == '__main__':\n  gtest_test_utils.Main()",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-param-test-invalid-name2-test",
        "documentation": {}
    },
    {
        "label": "Assert",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-param-test-invalid-name2-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-param-test-invalid-name2-test",
        "peekOfCode": "def Assert(condition):\n  if not condition:\n    raise AssertionError\ndef TestExitCodeAndOutput(command):\n  \"\"\"Runs the given command and verifies its exit code and output.\"\"\"\n  err = ('Duplicate parameterized test name \\'a\\'')\n  p = gtest_test_utils.Subprocess(command)\n  Assert(p.terminated_by_signal)\n  # Check for appropriate output\n  Assert(err in p.output)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-param-test-invalid-name2-test",
        "documentation": {}
    },
    {
        "label": "TestExitCodeAndOutput",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-param-test-invalid-name2-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-param-test-invalid-name2-test",
        "peekOfCode": "def TestExitCodeAndOutput(command):\n  \"\"\"Runs the given command and verifies its exit code and output.\"\"\"\n  err = ('Duplicate parameterized test name \\'a\\'')\n  p = gtest_test_utils.Subprocess(command)\n  Assert(p.terminated_by_signal)\n  # Check for appropriate output\n  Assert(err in p.output)\nclass GTestParamTestInvalidName2Test(gtest_test_utils.TestCase):\n  def testExitCodeAndOutput(self):\n    TestExitCodeAndOutput(COMMAND)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-param-test-invalid-name2-test",
        "documentation": {}
    },
    {
        "label": "binary_name",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-param-test-invalid-name2-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-param-test-invalid-name2-test",
        "peekOfCode": "binary_name = 'googletest-param-test-invalid-name2-test_'\nCOMMAND = gtest_test_utils.GetTestExecutablePath(binary_name)\ndef Assert(condition):\n  if not condition:\n    raise AssertionError\ndef TestExitCodeAndOutput(command):\n  \"\"\"Runs the given command and verifies its exit code and output.\"\"\"\n  err = ('Duplicate parameterized test name \\'a\\'')\n  p = gtest_test_utils.Subprocess(command)\n  Assert(p.terminated_by_signal)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-param-test-invalid-name2-test",
        "documentation": {}
    },
    {
        "label": "COMMAND",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-param-test-invalid-name2-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-param-test-invalid-name2-test",
        "peekOfCode": "COMMAND = gtest_test_utils.GetTestExecutablePath(binary_name)\ndef Assert(condition):\n  if not condition:\n    raise AssertionError\ndef TestExitCodeAndOutput(command):\n  \"\"\"Runs the given command and verifies its exit code and output.\"\"\"\n  err = ('Duplicate parameterized test name \\'a\\'')\n  p = gtest_test_utils.Subprocess(command)\n  Assert(p.terminated_by_signal)\n  # Check for appropriate output",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-param-test-invalid-name2-test",
        "documentation": {}
    },
    {
        "label": "GTestSetUpTestSuiteTest",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-setuptestsuite-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-setuptestsuite-test",
        "peekOfCode": "class GTestSetUpTestSuiteTest(gtest_test_utils.TestCase):\n  def testSetupErrorAndTearDownError(self):\n    p = gtest_test_utils.Subprocess(COMMAND)\n    self.assertNotEqual(p.exit_code, 0, msg=p.output)\n    self.assertIn(\n        '[  FAILED  ] SetupFailTest: SetUpTestSuite or TearDownTestSuite\\n'\n        '[  FAILED  ] TearDownFailTest: SetUpTestSuite or TearDownTestSuite\\n'\n        '\\n'\n        ' 2 FAILED TEST SUITES\\n',\n        p.output)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-setuptestsuite-test",
        "documentation": {}
    },
    {
        "label": "COMMAND",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-setuptestsuite-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-setuptestsuite-test",
        "peekOfCode": "COMMAND = gtest_test_utils.GetTestExecutablePath(\n    'googletest-setuptestsuite-test_')\nclass GTestSetUpTestSuiteTest(gtest_test_utils.TestCase):\n  def testSetupErrorAndTearDownError(self):\n    p = gtest_test_utils.Subprocess(COMMAND)\n    self.assertNotEqual(p.exit_code, 0, msg=p.output)\n    self.assertIn(\n        '[  FAILED  ] SetupFailTest: SetUpTestSuite or TearDownTestSuite\\n'\n        '[  FAILED  ] TearDownFailTest: SetUpTestSuite or TearDownTestSuite\\n'\n        '\\n'",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-setuptestsuite-test",
        "documentation": {}
    },
    {
        "label": "GTestShuffleUnitTest",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "peekOfCode": "class GTestShuffleUnitTest(gtest_test_utils.TestCase):\n  \"\"\"Tests test shuffling.\"\"\"\n  def setUp(self):\n    CalculateTestLists()\n  def testShufflePreservesNumberOfTests(self):\n    self.assertEqual(len(ALL_TESTS), len(SHUFFLED_ALL_TESTS))\n    self.assertEqual(len(ACTIVE_TESTS), len(SHUFFLED_ACTIVE_TESTS))\n    self.assertEqual(len(FILTERED_TESTS), len(SHUFFLED_FILTERED_TESTS))\n    self.assertEqual(len(SHARDED_TESTS), len(SHUFFLED_SHARDED_TESTS))\n  def testShuffleChangesTestOrder(self):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "documentation": {}
    },
    {
        "label": "AlsoRunDisabledTestsFlag",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "peekOfCode": "def AlsoRunDisabledTestsFlag():\n  return '--gtest_also_run_disabled_tests'\ndef FilterFlag(test_filter):\n  return '--gtest_filter=%s' % (test_filter,)\ndef RepeatFlag(n):\n  return '--gtest_repeat=%s' % (n,)\ndef ShuffleFlag():\n  return '--gtest_shuffle'\ndef RandomSeedFlag(n):\n  return '--gtest_random_seed=%s' % (n,)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "documentation": {}
    },
    {
        "label": "FilterFlag",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "peekOfCode": "def FilterFlag(test_filter):\n  return '--gtest_filter=%s' % (test_filter,)\ndef RepeatFlag(n):\n  return '--gtest_repeat=%s' % (n,)\ndef ShuffleFlag():\n  return '--gtest_shuffle'\ndef RandomSeedFlag(n):\n  return '--gtest_random_seed=%s' % (n,)\ndef RunAndReturnOutput(extra_env, args):\n  \"\"\"Runs the test program and returns its output.\"\"\"",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "documentation": {}
    },
    {
        "label": "RepeatFlag",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "peekOfCode": "def RepeatFlag(n):\n  return '--gtest_repeat=%s' % (n,)\ndef ShuffleFlag():\n  return '--gtest_shuffle'\ndef RandomSeedFlag(n):\n  return '--gtest_random_seed=%s' % (n,)\ndef RunAndReturnOutput(extra_env, args):\n  \"\"\"Runs the test program and returns its output.\"\"\"\n  environ_copy = os.environ.copy()\n  environ_copy.update(extra_env)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "documentation": {}
    },
    {
        "label": "ShuffleFlag",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "peekOfCode": "def ShuffleFlag():\n  return '--gtest_shuffle'\ndef RandomSeedFlag(n):\n  return '--gtest_random_seed=%s' % (n,)\ndef RunAndReturnOutput(extra_env, args):\n  \"\"\"Runs the test program and returns its output.\"\"\"\n  environ_copy = os.environ.copy()\n  environ_copy.update(extra_env)\n  return gtest_test_utils.Subprocess([COMMAND] + args, env=environ_copy).output\ndef GetTestsForAllIterations(extra_env, args):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "documentation": {}
    },
    {
        "label": "RandomSeedFlag",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "peekOfCode": "def RandomSeedFlag(n):\n  return '--gtest_random_seed=%s' % (n,)\ndef RunAndReturnOutput(extra_env, args):\n  \"\"\"Runs the test program and returns its output.\"\"\"\n  environ_copy = os.environ.copy()\n  environ_copy.update(extra_env)\n  return gtest_test_utils.Subprocess([COMMAND] + args, env=environ_copy).output\ndef GetTestsForAllIterations(extra_env, args):\n  \"\"\"Runs the test program and returns a list of test lists.\n  Args:",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "documentation": {}
    },
    {
        "label": "RunAndReturnOutput",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "peekOfCode": "def RunAndReturnOutput(extra_env, args):\n  \"\"\"Runs the test program and returns its output.\"\"\"\n  environ_copy = os.environ.copy()\n  environ_copy.update(extra_env)\n  return gtest_test_utils.Subprocess([COMMAND] + args, env=environ_copy).output\ndef GetTestsForAllIterations(extra_env, args):\n  \"\"\"Runs the test program and returns a list of test lists.\n  Args:\n    extra_env: a map from environment variables to their values\n    args: command line flags to pass to googletest-shuffle-test_",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "documentation": {}
    },
    {
        "label": "GetTestsForAllIterations",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "peekOfCode": "def GetTestsForAllIterations(extra_env, args):\n  \"\"\"Runs the test program and returns a list of test lists.\n  Args:\n    extra_env: a map from environment variables to their values\n    args: command line flags to pass to googletest-shuffle-test_\n  Returns:\n    A list where the i-th element is the list of tests run in the i-th\n    test iteration.\n  \"\"\"\n  test_iterations = []",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "documentation": {}
    },
    {
        "label": "GetTestCases",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "peekOfCode": "def GetTestCases(tests):\n  \"\"\"Returns a list of test cases in the given full test names.\n  Args:\n    tests: a list of full test names\n  Returns:\n    A list of test cases from 'tests', in their original order.\n    Consecutive duplicates are removed.\n  \"\"\"\n  test_cases = []\n  for test in tests:",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "documentation": {}
    },
    {
        "label": "CalculateTestLists",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "peekOfCode": "def CalculateTestLists():\n  \"\"\"Calculates the list of tests run under different flags.\"\"\"\n  if not ALL_TESTS:\n    ALL_TESTS.extend(\n        GetTestsForAllIterations({}, [AlsoRunDisabledTestsFlag()])[0])\n  if not ACTIVE_TESTS:\n    ACTIVE_TESTS.extend(GetTestsForAllIterations({}, [])[0])\n  if not FILTERED_TESTS:\n    FILTERED_TESTS.extend(\n        GetTestsForAllIterations({}, [FilterFlag(TEST_FILTER)])[0])",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "documentation": {}
    },
    {
        "label": "COMMAND",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "peekOfCode": "COMMAND = gtest_test_utils.GetTestExecutablePath('googletest-shuffle-test_')\n# The environment variables for test sharding.\nTOTAL_SHARDS_ENV_VAR = 'GTEST_TOTAL_SHARDS'\nSHARD_INDEX_ENV_VAR = 'GTEST_SHARD_INDEX'\nTEST_FILTER = 'A*.A:A*.B:C*'\nALL_TESTS = []\nACTIVE_TESTS = []\nFILTERED_TESTS = []\nSHARDED_TESTS = []\nSHUFFLED_ALL_TESTS = []",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "documentation": {}
    },
    {
        "label": "TOTAL_SHARDS_ENV_VAR",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "peekOfCode": "TOTAL_SHARDS_ENV_VAR = 'GTEST_TOTAL_SHARDS'\nSHARD_INDEX_ENV_VAR = 'GTEST_SHARD_INDEX'\nTEST_FILTER = 'A*.A:A*.B:C*'\nALL_TESTS = []\nACTIVE_TESTS = []\nFILTERED_TESTS = []\nSHARDED_TESTS = []\nSHUFFLED_ALL_TESTS = []\nSHUFFLED_ACTIVE_TESTS = []\nSHUFFLED_FILTERED_TESTS = []",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "documentation": {}
    },
    {
        "label": "SHARD_INDEX_ENV_VAR",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "peekOfCode": "SHARD_INDEX_ENV_VAR = 'GTEST_SHARD_INDEX'\nTEST_FILTER = 'A*.A:A*.B:C*'\nALL_TESTS = []\nACTIVE_TESTS = []\nFILTERED_TESTS = []\nSHARDED_TESTS = []\nSHUFFLED_ALL_TESTS = []\nSHUFFLED_ACTIVE_TESTS = []\nSHUFFLED_FILTERED_TESTS = []\nSHUFFLED_SHARDED_TESTS = []",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "documentation": {}
    },
    {
        "label": "TEST_FILTER",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "peekOfCode": "TEST_FILTER = 'A*.A:A*.B:C*'\nALL_TESTS = []\nACTIVE_TESTS = []\nFILTERED_TESTS = []\nSHARDED_TESTS = []\nSHUFFLED_ALL_TESTS = []\nSHUFFLED_ACTIVE_TESTS = []\nSHUFFLED_FILTERED_TESTS = []\nSHUFFLED_SHARDED_TESTS = []\ndef AlsoRunDisabledTestsFlag():",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "documentation": {}
    },
    {
        "label": "ALL_TESTS",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "peekOfCode": "ALL_TESTS = []\nACTIVE_TESTS = []\nFILTERED_TESTS = []\nSHARDED_TESTS = []\nSHUFFLED_ALL_TESTS = []\nSHUFFLED_ACTIVE_TESTS = []\nSHUFFLED_FILTERED_TESTS = []\nSHUFFLED_SHARDED_TESTS = []\ndef AlsoRunDisabledTestsFlag():\n  return '--gtest_also_run_disabled_tests'",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "documentation": {}
    },
    {
        "label": "ACTIVE_TESTS",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "peekOfCode": "ACTIVE_TESTS = []\nFILTERED_TESTS = []\nSHARDED_TESTS = []\nSHUFFLED_ALL_TESTS = []\nSHUFFLED_ACTIVE_TESTS = []\nSHUFFLED_FILTERED_TESTS = []\nSHUFFLED_SHARDED_TESTS = []\ndef AlsoRunDisabledTestsFlag():\n  return '--gtest_also_run_disabled_tests'\ndef FilterFlag(test_filter):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "documentation": {}
    },
    {
        "label": "FILTERED_TESTS",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "peekOfCode": "FILTERED_TESTS = []\nSHARDED_TESTS = []\nSHUFFLED_ALL_TESTS = []\nSHUFFLED_ACTIVE_TESTS = []\nSHUFFLED_FILTERED_TESTS = []\nSHUFFLED_SHARDED_TESTS = []\ndef AlsoRunDisabledTestsFlag():\n  return '--gtest_also_run_disabled_tests'\ndef FilterFlag(test_filter):\n  return '--gtest_filter=%s' % (test_filter,)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "documentation": {}
    },
    {
        "label": "SHARDED_TESTS",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "peekOfCode": "SHARDED_TESTS = []\nSHUFFLED_ALL_TESTS = []\nSHUFFLED_ACTIVE_TESTS = []\nSHUFFLED_FILTERED_TESTS = []\nSHUFFLED_SHARDED_TESTS = []\ndef AlsoRunDisabledTestsFlag():\n  return '--gtest_also_run_disabled_tests'\ndef FilterFlag(test_filter):\n  return '--gtest_filter=%s' % (test_filter,)\ndef RepeatFlag(n):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "documentation": {}
    },
    {
        "label": "SHUFFLED_ALL_TESTS",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "peekOfCode": "SHUFFLED_ALL_TESTS = []\nSHUFFLED_ACTIVE_TESTS = []\nSHUFFLED_FILTERED_TESTS = []\nSHUFFLED_SHARDED_TESTS = []\ndef AlsoRunDisabledTestsFlag():\n  return '--gtest_also_run_disabled_tests'\ndef FilterFlag(test_filter):\n  return '--gtest_filter=%s' % (test_filter,)\ndef RepeatFlag(n):\n  return '--gtest_repeat=%s' % (n,)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "documentation": {}
    },
    {
        "label": "SHUFFLED_ACTIVE_TESTS",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "peekOfCode": "SHUFFLED_ACTIVE_TESTS = []\nSHUFFLED_FILTERED_TESTS = []\nSHUFFLED_SHARDED_TESTS = []\ndef AlsoRunDisabledTestsFlag():\n  return '--gtest_also_run_disabled_tests'\ndef FilterFlag(test_filter):\n  return '--gtest_filter=%s' % (test_filter,)\ndef RepeatFlag(n):\n  return '--gtest_repeat=%s' % (n,)\ndef ShuffleFlag():",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "documentation": {}
    },
    {
        "label": "SHUFFLED_FILTERED_TESTS",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "peekOfCode": "SHUFFLED_FILTERED_TESTS = []\nSHUFFLED_SHARDED_TESTS = []\ndef AlsoRunDisabledTestsFlag():\n  return '--gtest_also_run_disabled_tests'\ndef FilterFlag(test_filter):\n  return '--gtest_filter=%s' % (test_filter,)\ndef RepeatFlag(n):\n  return '--gtest_repeat=%s' % (n,)\ndef ShuffleFlag():\n  return '--gtest_shuffle'",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "documentation": {}
    },
    {
        "label": "SHUFFLED_SHARDED_TESTS",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "peekOfCode": "SHUFFLED_SHARDED_TESTS = []\ndef AlsoRunDisabledTestsFlag():\n  return '--gtest_also_run_disabled_tests'\ndef FilterFlag(test_filter):\n  return '--gtest_filter=%s' % (test_filter,)\ndef RepeatFlag(n):\n  return '--gtest_repeat=%s' % (n,)\ndef ShuffleFlag():\n  return '--gtest_shuffle'\ndef RandomSeedFlag(n):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-shuffle-test",
        "documentation": {}
    },
    {
        "label": "ThrowOnFailureTest",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-throw-on-failure-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-throw-on-failure-test",
        "peekOfCode": "class ThrowOnFailureTest(gtest_test_utils.TestCase):\n  \"\"\"Tests the throw-on-failure mode.\"\"\"\n  def RunAndVerify(self, env_var_value, flag_value, should_fail):\n    \"\"\"Runs googletest-throw-on-failure-test_ and verifies that it does\n    (or does not) exit with a non-zero code.\n    Args:\n      env_var_value:    value of the GTEST_BREAK_ON_FAILURE environment\n                        variable; None if the variable should be unset.\n      flag_value:       value of the --gtest_break_on_failure flag;\n                        None if the flag should not be present.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-throw-on-failure-test",
        "documentation": {}
    },
    {
        "label": "SetEnvVar",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-throw-on-failure-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-throw-on-failure-test",
        "peekOfCode": "def SetEnvVar(env_var, value):\n  \"\"\"Sets an environment variable to a given value; unsets it when the\n  given value is None.\n  \"\"\"\n  env_var = env_var.upper()\n  if value is not None:\n    os.environ[env_var] = value\n  elif env_var in os.environ:\n    del os.environ[env_var]\ndef Run(command):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-throw-on-failure-test",
        "documentation": {}
    },
    {
        "label": "Run",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-throw-on-failure-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-throw-on-failure-test",
        "peekOfCode": "def Run(command):\n  \"\"\"Runs a command; returns True/False if its exit code is/isn't 0.\"\"\"\n  print('Running \"%s\". . .' % ' '.join(command))\n  p = gtest_test_utils.Subprocess(command)\n  return p.exited and p.exit_code == 0\n# The tests.\nclass ThrowOnFailureTest(gtest_test_utils.TestCase):\n  \"\"\"Tests the throw-on-failure mode.\"\"\"\n  def RunAndVerify(self, env_var_value, flag_value, should_fail):\n    \"\"\"Runs googletest-throw-on-failure-test_ and verifies that it does",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-throw-on-failure-test",
        "documentation": {}
    },
    {
        "label": "THROW_ON_FAILURE",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-throw-on-failure-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-throw-on-failure-test",
        "peekOfCode": "THROW_ON_FAILURE = 'gtest_throw_on_failure'\n# Path to the googletest-throw-on-failure-test_ program, compiled with\n# exceptions disabled.\nEXE_PATH = gtest_test_utils.GetTestExecutablePath(\n    'googletest-throw-on-failure-test_')\n# Utilities.\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets an environment variable to a given value; unsets it when the\n  given value is None.\n  \"\"\"",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-throw-on-failure-test",
        "documentation": {}
    },
    {
        "label": "EXE_PATH",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-throw-on-failure-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-throw-on-failure-test",
        "peekOfCode": "EXE_PATH = gtest_test_utils.GetTestExecutablePath(\n    'googletest-throw-on-failure-test_')\n# Utilities.\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets an environment variable to a given value; unsets it when the\n  given value is None.\n  \"\"\"\n  env_var = env_var.upper()\n  if value is not None:\n    os.environ[env_var] = value",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-throw-on-failure-test",
        "documentation": {}
    },
    {
        "label": "GTestUninitializedTest",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-uninitialized-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-uninitialized-test",
        "peekOfCode": "class GTestUninitializedTest(gtest_test_utils.TestCase):\n  def testExitCodeAndOutput(self):\n    TestExitCodeAndOutput(COMMAND)\nif __name__ == '__main__':\n  gtest_test_utils.Main()",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-uninitialized-test",
        "documentation": {}
    },
    {
        "label": "Assert",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-uninitialized-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-uninitialized-test",
        "peekOfCode": "def Assert(condition):\n  if not condition:\n    raise AssertionError\ndef AssertEq(expected, actual):\n  if expected != actual:\n    print('Expected: %s' % (expected,))\n    print('  Actual: %s' % (actual,))\n    raise AssertionError\ndef TestExitCodeAndOutput(command):\n  \"\"\"Runs the given command and verifies its exit code and output.\"\"\"",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-uninitialized-test",
        "documentation": {}
    },
    {
        "label": "AssertEq",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-uninitialized-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-uninitialized-test",
        "peekOfCode": "def AssertEq(expected, actual):\n  if expected != actual:\n    print('Expected: %s' % (expected,))\n    print('  Actual: %s' % (actual,))\n    raise AssertionError\ndef TestExitCodeAndOutput(command):\n  \"\"\"Runs the given command and verifies its exit code and output.\"\"\"\n  # Verifies that 'command' exits with code 1.\n  p = gtest_test_utils.Subprocess(command)\n  if p.exited and p.exit_code == 0:",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-uninitialized-test",
        "documentation": {}
    },
    {
        "label": "TestExitCodeAndOutput",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-uninitialized-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-uninitialized-test",
        "peekOfCode": "def TestExitCodeAndOutput(command):\n  \"\"\"Runs the given command and verifies its exit code and output.\"\"\"\n  # Verifies that 'command' exits with code 1.\n  p = gtest_test_utils.Subprocess(command)\n  if p.exited and p.exit_code == 0:\n    Assert('IMPORTANT NOTICE' in p.output);\n  Assert('InitGoogleTest' in p.output)\nclass GTestUninitializedTest(gtest_test_utils.TestCase):\n  def testExitCodeAndOutput(self):\n    TestExitCodeAndOutput(COMMAND)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-uninitialized-test",
        "documentation": {}
    },
    {
        "label": "COMMAND",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-uninitialized-test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-uninitialized-test",
        "peekOfCode": "COMMAND = gtest_test_utils.GetTestExecutablePath('googletest-uninitialized-test_')\ndef Assert(condition):\n  if not condition:\n    raise AssertionError\ndef AssertEq(expected, actual):\n  if expected != actual:\n    print('Expected: %s' % (expected,))\n    print('  Actual: %s' % (actual,))\n    raise AssertionError\ndef TestExitCodeAndOutput(command):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.googletest-uninitialized-test",
        "documentation": {}
    },
    {
        "label": "GTestHelpTest",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_help_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_help_test",
        "peekOfCode": "class GTestHelpTest(gtest_test_utils.TestCase):\n  \"\"\"Tests the --help flag and its equivalent forms.\"\"\"\n  def TestHelpFlag(self, flag):\n    \"\"\"Verifies correct behavior when help flag is specified.\n    The right message must be printed and the tests must\n    skipped when the given flag is specified.\n    Args:\n      flag:  A flag to pass to the binary or None.\n    \"\"\"\n    exit_code, output = RunWithFlag(flag)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_help_test",
        "documentation": {}
    },
    {
        "label": "RunWithFlag",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_help_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_help_test",
        "peekOfCode": "def RunWithFlag(flag):\n  \"\"\"Runs gtest_help_test_ with the given flag.\n  Returns:\n    the exit code and the text output as a tuple.\n  Args:\n    flag: the command-line flag to pass to gtest_help_test_, or None.\n  \"\"\"\n  if flag is None:\n    command = [PROGRAM_PATH]\n  else:",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_help_test",
        "documentation": {}
    },
    {
        "label": "IS_LINUX",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_help_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_help_test",
        "peekOfCode": "IS_LINUX = os.name == 'posix' and os.uname()[0] == 'Linux'\nIS_GNUKFREEBSD = os.name == 'posix' and os.uname()[0] == 'GNU/kFreeBSD'\nIS_WINDOWS = os.name == 'nt'\nPROGRAM_PATH = gtest_test_utils.GetTestExecutablePath('gtest_help_test_')\nFLAG_PREFIX = '--gtest_'\nDEATH_TEST_STYLE_FLAG = FLAG_PREFIX + 'death_test_style'\nSTREAM_RESULT_TO_FLAG = FLAG_PREFIX + 'stream_result_to'\nUNKNOWN_FLAG = FLAG_PREFIX + 'unknown_flag_for_testing'\nLIST_TESTS_FLAG = FLAG_PREFIX + 'list_tests'\nINCORRECT_FLAG_VARIANTS = [re.sub('^--', '-', LIST_TESTS_FLAG),",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_help_test",
        "documentation": {}
    },
    {
        "label": "IS_GNUKFREEBSD",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_help_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_help_test",
        "peekOfCode": "IS_GNUKFREEBSD = os.name == 'posix' and os.uname()[0] == 'GNU/kFreeBSD'\nIS_WINDOWS = os.name == 'nt'\nPROGRAM_PATH = gtest_test_utils.GetTestExecutablePath('gtest_help_test_')\nFLAG_PREFIX = '--gtest_'\nDEATH_TEST_STYLE_FLAG = FLAG_PREFIX + 'death_test_style'\nSTREAM_RESULT_TO_FLAG = FLAG_PREFIX + 'stream_result_to'\nUNKNOWN_FLAG = FLAG_PREFIX + 'unknown_flag_for_testing'\nLIST_TESTS_FLAG = FLAG_PREFIX + 'list_tests'\nINCORRECT_FLAG_VARIANTS = [re.sub('^--', '-', LIST_TESTS_FLAG),\n                           re.sub('^--', '/', LIST_TESTS_FLAG),",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_help_test",
        "documentation": {}
    },
    {
        "label": "IS_WINDOWS",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_help_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_help_test",
        "peekOfCode": "IS_WINDOWS = os.name == 'nt'\nPROGRAM_PATH = gtest_test_utils.GetTestExecutablePath('gtest_help_test_')\nFLAG_PREFIX = '--gtest_'\nDEATH_TEST_STYLE_FLAG = FLAG_PREFIX + 'death_test_style'\nSTREAM_RESULT_TO_FLAG = FLAG_PREFIX + 'stream_result_to'\nUNKNOWN_FLAG = FLAG_PREFIX + 'unknown_flag_for_testing'\nLIST_TESTS_FLAG = FLAG_PREFIX + 'list_tests'\nINCORRECT_FLAG_VARIANTS = [re.sub('^--', '-', LIST_TESTS_FLAG),\n                           re.sub('^--', '/', LIST_TESTS_FLAG),\n                           re.sub('_', '-', LIST_TESTS_FLAG)]",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_help_test",
        "documentation": {}
    },
    {
        "label": "PROGRAM_PATH",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_help_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_help_test",
        "peekOfCode": "PROGRAM_PATH = gtest_test_utils.GetTestExecutablePath('gtest_help_test_')\nFLAG_PREFIX = '--gtest_'\nDEATH_TEST_STYLE_FLAG = FLAG_PREFIX + 'death_test_style'\nSTREAM_RESULT_TO_FLAG = FLAG_PREFIX + 'stream_result_to'\nUNKNOWN_FLAG = FLAG_PREFIX + 'unknown_flag_for_testing'\nLIST_TESTS_FLAG = FLAG_PREFIX + 'list_tests'\nINCORRECT_FLAG_VARIANTS = [re.sub('^--', '-', LIST_TESTS_FLAG),\n                           re.sub('^--', '/', LIST_TESTS_FLAG),\n                           re.sub('_', '-', LIST_TESTS_FLAG)]\nINTERNAL_FLAG_FOR_TESTING = FLAG_PREFIX + 'internal_flag_for_testing'",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_help_test",
        "documentation": {}
    },
    {
        "label": "FLAG_PREFIX",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_help_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_help_test",
        "peekOfCode": "FLAG_PREFIX = '--gtest_'\nDEATH_TEST_STYLE_FLAG = FLAG_PREFIX + 'death_test_style'\nSTREAM_RESULT_TO_FLAG = FLAG_PREFIX + 'stream_result_to'\nUNKNOWN_FLAG = FLAG_PREFIX + 'unknown_flag_for_testing'\nLIST_TESTS_FLAG = FLAG_PREFIX + 'list_tests'\nINCORRECT_FLAG_VARIANTS = [re.sub('^--', '-', LIST_TESTS_FLAG),\n                           re.sub('^--', '/', LIST_TESTS_FLAG),\n                           re.sub('_', '-', LIST_TESTS_FLAG)]\nINTERNAL_FLAG_FOR_TESTING = FLAG_PREFIX + 'internal_flag_for_testing'\nSUPPORTS_DEATH_TESTS = \"DeathTest\" in gtest_test_utils.Subprocess(",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_help_test",
        "documentation": {}
    },
    {
        "label": "DEATH_TEST_STYLE_FLAG",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_help_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_help_test",
        "peekOfCode": "DEATH_TEST_STYLE_FLAG = FLAG_PREFIX + 'death_test_style'\nSTREAM_RESULT_TO_FLAG = FLAG_PREFIX + 'stream_result_to'\nUNKNOWN_FLAG = FLAG_PREFIX + 'unknown_flag_for_testing'\nLIST_TESTS_FLAG = FLAG_PREFIX + 'list_tests'\nINCORRECT_FLAG_VARIANTS = [re.sub('^--', '-', LIST_TESTS_FLAG),\n                           re.sub('^--', '/', LIST_TESTS_FLAG),\n                           re.sub('_', '-', LIST_TESTS_FLAG)]\nINTERNAL_FLAG_FOR_TESTING = FLAG_PREFIX + 'internal_flag_for_testing'\nSUPPORTS_DEATH_TESTS = \"DeathTest\" in gtest_test_utils.Subprocess(\n    [PROGRAM_PATH, LIST_TESTS_FLAG]).output",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_help_test",
        "documentation": {}
    },
    {
        "label": "STREAM_RESULT_TO_FLAG",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_help_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_help_test",
        "peekOfCode": "STREAM_RESULT_TO_FLAG = FLAG_PREFIX + 'stream_result_to'\nUNKNOWN_FLAG = FLAG_PREFIX + 'unknown_flag_for_testing'\nLIST_TESTS_FLAG = FLAG_PREFIX + 'list_tests'\nINCORRECT_FLAG_VARIANTS = [re.sub('^--', '-', LIST_TESTS_FLAG),\n                           re.sub('^--', '/', LIST_TESTS_FLAG),\n                           re.sub('_', '-', LIST_TESTS_FLAG)]\nINTERNAL_FLAG_FOR_TESTING = FLAG_PREFIX + 'internal_flag_for_testing'\nSUPPORTS_DEATH_TESTS = \"DeathTest\" in gtest_test_utils.Subprocess(\n    [PROGRAM_PATH, LIST_TESTS_FLAG]).output\n# The help message must match this regex.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_help_test",
        "documentation": {}
    },
    {
        "label": "UNKNOWN_FLAG",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_help_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_help_test",
        "peekOfCode": "UNKNOWN_FLAG = FLAG_PREFIX + 'unknown_flag_for_testing'\nLIST_TESTS_FLAG = FLAG_PREFIX + 'list_tests'\nINCORRECT_FLAG_VARIANTS = [re.sub('^--', '-', LIST_TESTS_FLAG),\n                           re.sub('^--', '/', LIST_TESTS_FLAG),\n                           re.sub('_', '-', LIST_TESTS_FLAG)]\nINTERNAL_FLAG_FOR_TESTING = FLAG_PREFIX + 'internal_flag_for_testing'\nSUPPORTS_DEATH_TESTS = \"DeathTest\" in gtest_test_utils.Subprocess(\n    [PROGRAM_PATH, LIST_TESTS_FLAG]).output\n# The help message must match this regex.\nHELP_REGEX = re.compile(",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_help_test",
        "documentation": {}
    },
    {
        "label": "LIST_TESTS_FLAG",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_help_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_help_test",
        "peekOfCode": "LIST_TESTS_FLAG = FLAG_PREFIX + 'list_tests'\nINCORRECT_FLAG_VARIANTS = [re.sub('^--', '-', LIST_TESTS_FLAG),\n                           re.sub('^--', '/', LIST_TESTS_FLAG),\n                           re.sub('_', '-', LIST_TESTS_FLAG)]\nINTERNAL_FLAG_FOR_TESTING = FLAG_PREFIX + 'internal_flag_for_testing'\nSUPPORTS_DEATH_TESTS = \"DeathTest\" in gtest_test_utils.Subprocess(\n    [PROGRAM_PATH, LIST_TESTS_FLAG]).output\n# The help message must match this regex.\nHELP_REGEX = re.compile(\n    FLAG_PREFIX + r'list_tests.*' +",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_help_test",
        "documentation": {}
    },
    {
        "label": "INCORRECT_FLAG_VARIANTS",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_help_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_help_test",
        "peekOfCode": "INCORRECT_FLAG_VARIANTS = [re.sub('^--', '-', LIST_TESTS_FLAG),\n                           re.sub('^--', '/', LIST_TESTS_FLAG),\n                           re.sub('_', '-', LIST_TESTS_FLAG)]\nINTERNAL_FLAG_FOR_TESTING = FLAG_PREFIX + 'internal_flag_for_testing'\nSUPPORTS_DEATH_TESTS = \"DeathTest\" in gtest_test_utils.Subprocess(\n    [PROGRAM_PATH, LIST_TESTS_FLAG]).output\n# The help message must match this regex.\nHELP_REGEX = re.compile(\n    FLAG_PREFIX + r'list_tests.*' +\n    FLAG_PREFIX + r'filter=.*' +",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_help_test",
        "documentation": {}
    },
    {
        "label": "INTERNAL_FLAG_FOR_TESTING",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_help_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_help_test",
        "peekOfCode": "INTERNAL_FLAG_FOR_TESTING = FLAG_PREFIX + 'internal_flag_for_testing'\nSUPPORTS_DEATH_TESTS = \"DeathTest\" in gtest_test_utils.Subprocess(\n    [PROGRAM_PATH, LIST_TESTS_FLAG]).output\n# The help message must match this regex.\nHELP_REGEX = re.compile(\n    FLAG_PREFIX + r'list_tests.*' +\n    FLAG_PREFIX + r'filter=.*' +\n    FLAG_PREFIX + r'also_run_disabled_tests.*' +\n    FLAG_PREFIX + r'repeat=.*' +\n    FLAG_PREFIX + r'shuffle.*' +",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_help_test",
        "documentation": {}
    },
    {
        "label": "SUPPORTS_DEATH_TESTS",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_help_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_help_test",
        "peekOfCode": "SUPPORTS_DEATH_TESTS = \"DeathTest\" in gtest_test_utils.Subprocess(\n    [PROGRAM_PATH, LIST_TESTS_FLAG]).output\n# The help message must match this regex.\nHELP_REGEX = re.compile(\n    FLAG_PREFIX + r'list_tests.*' +\n    FLAG_PREFIX + r'filter=.*' +\n    FLAG_PREFIX + r'also_run_disabled_tests.*' +\n    FLAG_PREFIX + r'repeat=.*' +\n    FLAG_PREFIX + r'shuffle.*' +\n    FLAG_PREFIX + r'random_seed=.*' +",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_help_test",
        "documentation": {}
    },
    {
        "label": "HELP_REGEX",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_help_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_help_test",
        "peekOfCode": "HELP_REGEX = re.compile(\n    FLAG_PREFIX + r'list_tests.*' +\n    FLAG_PREFIX + r'filter=.*' +\n    FLAG_PREFIX + r'also_run_disabled_tests.*' +\n    FLAG_PREFIX + r'repeat=.*' +\n    FLAG_PREFIX + r'shuffle.*' +\n    FLAG_PREFIX + r'random_seed=.*' +\n    FLAG_PREFIX + r'color=.*' +\n    FLAG_PREFIX + r'brief.*' +\n    FLAG_PREFIX + r'print_time.*' +",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_help_test",
        "documentation": {}
    },
    {
        "label": "normalize",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_json_test_utils",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_json_test_utils",
        "peekOfCode": "def normalize(obj):\n  \"\"\"Normalize output object.\n  Args:\n     obj: Google Test's JSON output object to normalize.\n  Returns:\n     Normalized output without any references to transient information that may\n     change from run to run.\n  \"\"\"\n  def _normalize(key, value):\n    if key == 'time':",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_json_test_utils",
        "documentation": {}
    },
    {
        "label": "GTestListTestsOutputUnitTest",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_list_output_unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_list_output_unittest",
        "peekOfCode": "class GTestListTestsOutputUnitTest(gtest_test_utils.TestCase):\n  \"\"\"Unit test for Google Test's list tests with output to file functionality.\n  \"\"\"\n  def testXml(self):\n    \"\"\"Verifies XML output for listing tests in a Google Test binary.\n    Runs a test program that generates an empty XML output, and\n    tests that the XML output is expected.\n    \"\"\"\n    self._TestOutput('xml', EXPECTED_XML)\n  def testJSON(self):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_list_output_unittest",
        "documentation": {}
    },
    {
        "label": "GTEST_LIST_TESTS_FLAG",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_list_output_unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_list_output_unittest",
        "peekOfCode": "GTEST_LIST_TESTS_FLAG = '--gtest_list_tests'\nGTEST_OUTPUT_FLAG = '--gtest_output'\nEXPECTED_XML = \"\"\"<\\?xml version=\"1.0\" encoding=\"UTF-8\"\\?>\n<testsuites tests=\"16\" name=\"AllTests\">\n  <testsuite name=\"FooTest\" tests=\"2\">\n    <testcase name=\"Test1\" file=\".*gtest_list_output_unittest_.cc\" line=\"43\" />\n    <testcase name=\"Test2\" file=\".*gtest_list_output_unittest_.cc\" line=\"45\" />\n  </testsuite>\n  <testsuite name=\"FooTestFixture\" tests=\"2\">\n    <testcase name=\"Test3\" file=\".*gtest_list_output_unittest_.cc\" line=\"48\" />",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_list_output_unittest",
        "documentation": {}
    },
    {
        "label": "GTEST_OUTPUT_FLAG",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_list_output_unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_list_output_unittest",
        "peekOfCode": "GTEST_OUTPUT_FLAG = '--gtest_output'\nEXPECTED_XML = \"\"\"<\\?xml version=\"1.0\" encoding=\"UTF-8\"\\?>\n<testsuites tests=\"16\" name=\"AllTests\">\n  <testsuite name=\"FooTest\" tests=\"2\">\n    <testcase name=\"Test1\" file=\".*gtest_list_output_unittest_.cc\" line=\"43\" />\n    <testcase name=\"Test2\" file=\".*gtest_list_output_unittest_.cc\" line=\"45\" />\n  </testsuite>\n  <testsuite name=\"FooTestFixture\" tests=\"2\">\n    <testcase name=\"Test3\" file=\".*gtest_list_output_unittest_.cc\" line=\"48\" />\n    <testcase name=\"Test4\" file=\".*gtest_list_output_unittest_.cc\" line=\"49\" />",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_list_output_unittest",
        "documentation": {}
    },
    {
        "label": "EXPECTED_XML",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_list_output_unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_list_output_unittest",
        "peekOfCode": "EXPECTED_XML = \"\"\"<\\?xml version=\"1.0\" encoding=\"UTF-8\"\\?>\n<testsuites tests=\"16\" name=\"AllTests\">\n  <testsuite name=\"FooTest\" tests=\"2\">\n    <testcase name=\"Test1\" file=\".*gtest_list_output_unittest_.cc\" line=\"43\" />\n    <testcase name=\"Test2\" file=\".*gtest_list_output_unittest_.cc\" line=\"45\" />\n  </testsuite>\n  <testsuite name=\"FooTestFixture\" tests=\"2\">\n    <testcase name=\"Test3\" file=\".*gtest_list_output_unittest_.cc\" line=\"48\" />\n    <testcase name=\"Test4\" file=\".*gtest_list_output_unittest_.cc\" line=\"49\" />\n  </testsuite>",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_list_output_unittest",
        "documentation": {}
    },
    {
        "label": "EXPECTED_JSON",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_list_output_unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_list_output_unittest",
        "peekOfCode": "EXPECTED_JSON = \"\"\"{\n  \"tests\": 16,\n  \"name\": \"AllTests\",\n  \"testsuites\": \\[\n    {\n      \"name\": \"FooTest\",\n      \"tests\": 2,\n      \"testsuite\": \\[\n        {\n          \"name\": \"Test1\",",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_list_output_unittest",
        "documentation": {}
    },
    {
        "label": "SkipEntireEnvironmentTest",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_skip_check_output_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_skip_check_output_test",
        "peekOfCode": "class SkipEntireEnvironmentTest(gtest_test_utils.TestCase):\n  def testSkipEntireEnvironmentTest(self):\n    self.assertIn('Skipped\\nskipping single test\\n', OUTPUT)\n    skip_fixture = 'Skipped\\nskipping all tests for this fixture\\n'\n    self.assertIsNotNone(\n        re.search(skip_fixture + '.*' + skip_fixture, OUTPUT, flags=re.DOTALL),\n        repr(OUTPUT))\n    self.assertNotIn('FAILED', OUTPUT)\nif __name__ == '__main__':\n  gtest_test_utils.Main()",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_skip_check_output_test",
        "documentation": {}
    },
    {
        "label": "EXE_PATH",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_skip_check_output_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_skip_check_output_test",
        "peekOfCode": "EXE_PATH = gtest_test_utils.GetTestExecutablePath('gtest_skip_test')\nOUTPUT = gtest_test_utils.Subprocess([EXE_PATH]).output\n# Test.\nclass SkipEntireEnvironmentTest(gtest_test_utils.TestCase):\n  def testSkipEntireEnvironmentTest(self):\n    self.assertIn('Skipped\\nskipping single test\\n', OUTPUT)\n    skip_fixture = 'Skipped\\nskipping all tests for this fixture\\n'\n    self.assertIsNotNone(\n        re.search(skip_fixture + '.*' + skip_fixture, OUTPUT, flags=re.DOTALL),\n        repr(OUTPUT))",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_skip_check_output_test",
        "documentation": {}
    },
    {
        "label": "OUTPUT",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_skip_check_output_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_skip_check_output_test",
        "peekOfCode": "OUTPUT = gtest_test_utils.Subprocess([EXE_PATH]).output\n# Test.\nclass SkipEntireEnvironmentTest(gtest_test_utils.TestCase):\n  def testSkipEntireEnvironmentTest(self):\n    self.assertIn('Skipped\\nskipping single test\\n', OUTPUT)\n    skip_fixture = 'Skipped\\nskipping all tests for this fixture\\n'\n    self.assertIsNotNone(\n        re.search(skip_fixture + '.*' + skip_fixture, OUTPUT, flags=re.DOTALL),\n        repr(OUTPUT))\n    self.assertNotIn('FAILED', OUTPUT)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_skip_check_output_test",
        "documentation": {}
    },
    {
        "label": "SkipEntireEnvironmentTest",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_skip_environment_check_output_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_skip_environment_check_output_test",
        "peekOfCode": "class SkipEntireEnvironmentTest(gtest_test_utils.TestCase):\n  def testSkipEntireEnvironmentTest(self):\n    self.assertIn('Skipping the entire environment', OUTPUT)\n    self.assertNotIn('FAILED', OUTPUT)\nif __name__ == '__main__':\n  gtest_test_utils.Main()",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_skip_environment_check_output_test",
        "documentation": {}
    },
    {
        "label": "EXE_PATH",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_skip_environment_check_output_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_skip_environment_check_output_test",
        "peekOfCode": "EXE_PATH = gtest_test_utils.GetTestExecutablePath(\n    'gtest_skip_in_environment_setup_test')\nOUTPUT = gtest_test_utils.Subprocess([EXE_PATH]).output\n# Test.\nclass SkipEntireEnvironmentTest(gtest_test_utils.TestCase):\n  def testSkipEntireEnvironmentTest(self):\n    self.assertIn('Skipping the entire environment', OUTPUT)\n    self.assertNotIn('FAILED', OUTPUT)\nif __name__ == '__main__':\n  gtest_test_utils.Main()",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_skip_environment_check_output_test",
        "documentation": {}
    },
    {
        "label": "OUTPUT",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_skip_environment_check_output_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_skip_environment_check_output_test",
        "peekOfCode": "OUTPUT = gtest_test_utils.Subprocess([EXE_PATH]).output\n# Test.\nclass SkipEntireEnvironmentTest(gtest_test_utils.TestCase):\n  def testSkipEntireEnvironmentTest(self):\n    self.assertIn('Skipping the entire environment', OUTPUT)\n    self.assertNotIn('FAILED', OUTPUT)\nif __name__ == '__main__':\n  gtest_test_utils.Main()",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_skip_environment_check_output_test",
        "documentation": {}
    },
    {
        "label": "GTestTestFilterTest",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_testbridge_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_testbridge_test",
        "peekOfCode": "class GTestTestFilterTest(gtest_test_utils.TestCase):\n  def testTestExecutionIsFiltered(self):\n    \"\"\"Tests that the test filter is picked up from the testbridge env var.\"\"\"\n    subprocess_env = os.environ.copy()\n    subprocess_env[TESTBRIDGE_NAME] = '*.TestThatSucceeds'\n    p = gtest_test_utils.Subprocess(COMMAND, env=subprocess_env)\n    self.assertEquals(0, p.exit_code)\n    Assert('filter = *.TestThatSucceeds' in p.output)\n    Assert('[       OK ] TestFilterTest.TestThatSucceeds' in p.output)\n    Assert('[  PASSED  ] 1 test.' in p.output)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_testbridge_test",
        "documentation": {}
    },
    {
        "label": "Assert",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_testbridge_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_testbridge_test",
        "peekOfCode": "def Assert(condition):\n  if not condition:\n    raise AssertionError\nclass GTestTestFilterTest(gtest_test_utils.TestCase):\n  def testTestExecutionIsFiltered(self):\n    \"\"\"Tests that the test filter is picked up from the testbridge env var.\"\"\"\n    subprocess_env = os.environ.copy()\n    subprocess_env[TESTBRIDGE_NAME] = '*.TestThatSucceeds'\n    p = gtest_test_utils.Subprocess(COMMAND, env=subprocess_env)\n    self.assertEquals(0, p.exit_code)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_testbridge_test",
        "documentation": {}
    },
    {
        "label": "binary_name",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_testbridge_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_testbridge_test",
        "peekOfCode": "binary_name = 'gtest_testbridge_test_'\nCOMMAND = gtest_test_utils.GetTestExecutablePath(binary_name)\nTESTBRIDGE_NAME = 'TESTBRIDGE_TEST_ONLY'\ndef Assert(condition):\n  if not condition:\n    raise AssertionError\nclass GTestTestFilterTest(gtest_test_utils.TestCase):\n  def testTestExecutionIsFiltered(self):\n    \"\"\"Tests that the test filter is picked up from the testbridge env var.\"\"\"\n    subprocess_env = os.environ.copy()",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_testbridge_test",
        "documentation": {}
    },
    {
        "label": "COMMAND",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_testbridge_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_testbridge_test",
        "peekOfCode": "COMMAND = gtest_test_utils.GetTestExecutablePath(binary_name)\nTESTBRIDGE_NAME = 'TESTBRIDGE_TEST_ONLY'\ndef Assert(condition):\n  if not condition:\n    raise AssertionError\nclass GTestTestFilterTest(gtest_test_utils.TestCase):\n  def testTestExecutionIsFiltered(self):\n    \"\"\"Tests that the test filter is picked up from the testbridge env var.\"\"\"\n    subprocess_env = os.environ.copy()\n    subprocess_env[TESTBRIDGE_NAME] = '*.TestThatSucceeds'",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_testbridge_test",
        "documentation": {}
    },
    {
        "label": "TESTBRIDGE_NAME",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_testbridge_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_testbridge_test",
        "peekOfCode": "TESTBRIDGE_NAME = 'TESTBRIDGE_TEST_ONLY'\ndef Assert(condition):\n  if not condition:\n    raise AssertionError\nclass GTestTestFilterTest(gtest_test_utils.TestCase):\n  def testTestExecutionIsFiltered(self):\n    \"\"\"Tests that the test filter is picked up from the testbridge env var.\"\"\"\n    subprocess_env = os.environ.copy()\n    subprocess_env[TESTBRIDGE_NAME] = '*.TestThatSucceeds'\n    p = gtest_test_utils.Subprocess(COMMAND, env=subprocess_env)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_testbridge_test",
        "documentation": {}
    },
    {
        "label": "Subprocess",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "peekOfCode": "class Subprocess:\n  def __init__(self, command, working_dir=None, capture_stderr=True, env=None):\n    \"\"\"Changes into a specified directory, if provided, and executes a command.\n    Restores the old directory afterwards.\n    Args:\n      command:        The command to run, in the form of sys.argv.\n      working_dir:    The directory to change into.\n      capture_stderr: Determines whether to capture stderr in the output member\n                      or to discard it.\n      env:            Dictionary with environment to pass to the subprocess.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "documentation": {}
    },
    {
        "label": "SetEnvVar",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "peekOfCode": "def SetEnvVar(env_var, value):\n  \"\"\"Sets/unsets an environment variable to a given value.\"\"\"\n  if value is not None:\n    environ[env_var] = value\n  elif env_var in environ:\n    del environ[env_var]\n# Here we expose a class from a particular module, depending on the\n# environment. The comment suppresses the 'Invalid variable name' lint\n# complaint.\nTestCase = _test_module.TestCase  # pylint: disable=C6409",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "documentation": {}
    },
    {
        "label": "GetFlag",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "peekOfCode": "def GetFlag(flag):\n  \"\"\"Returns the value of the given flag.\"\"\"\n  # In case GetFlag() is called before Main(), we always call\n  # _ParseAndStripGTestFlags() here to make sure the --gtest_* flags\n  # are parsed.\n  _ParseAndStripGTestFlags(sys.argv)\n  return _flag_map[flag]\ndef GetSourceDir():\n  \"\"\"Returns the absolute path of the directory where the .py files are.\"\"\"\n  return os.path.abspath(GetFlag('source_dir'))",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "documentation": {}
    },
    {
        "label": "GetSourceDir",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "peekOfCode": "def GetSourceDir():\n  \"\"\"Returns the absolute path of the directory where the .py files are.\"\"\"\n  return os.path.abspath(GetFlag('source_dir'))\ndef GetBuildDir():\n  \"\"\"Returns the absolute path of the directory where the test binaries are.\"\"\"\n  return os.path.abspath(GetFlag('build_dir'))\n_temp_dir = None\ndef _RemoveTempDir():\n  if _temp_dir:\n    shutil.rmtree(_temp_dir, ignore_errors=True)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "documentation": {}
    },
    {
        "label": "GetBuildDir",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "peekOfCode": "def GetBuildDir():\n  \"\"\"Returns the absolute path of the directory where the test binaries are.\"\"\"\n  return os.path.abspath(GetFlag('build_dir'))\n_temp_dir = None\ndef _RemoveTempDir():\n  if _temp_dir:\n    shutil.rmtree(_temp_dir, ignore_errors=True)\natexit.register(_RemoveTempDir)\ndef GetTempDir():\n  global _temp_dir",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "documentation": {}
    },
    {
        "label": "GetTempDir",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "peekOfCode": "def GetTempDir():\n  global _temp_dir\n  if not _temp_dir:\n    _temp_dir = tempfile.mkdtemp()\n  return _temp_dir\ndef GetTestExecutablePath(executable_name, build_dir=None):\n  \"\"\"Returns the absolute path of the test binary given its name.\n  The function will print a message and abort the program if the resulting file\n  doesn't exist.\n  Args:",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "documentation": {}
    },
    {
        "label": "GetTestExecutablePath",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "peekOfCode": "def GetTestExecutablePath(executable_name, build_dir=None):\n  \"\"\"Returns the absolute path of the test binary given its name.\n  The function will print a message and abort the program if the resulting file\n  doesn't exist.\n  Args:\n    executable_name: name of the test binary that the test script runs.\n    build_dir:       directory where to look for executables, by default\n                     the result of GetBuildDir().\n  Returns:\n    The absolute path of the test binary.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "documentation": {}
    },
    {
        "label": "GetExitStatus",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "peekOfCode": "def GetExitStatus(exit_code):\n  \"\"\"Returns the argument to exit(), or -1 if exit() wasn't called.\n  Args:\n    exit_code: the result value of os.system(command).\n  \"\"\"\n  if os.name == 'nt':\n    # On Windows, os.WEXITSTATUS() doesn't work and os.system() returns\n    # the argument to exit() directly.\n    return exit_code\n  else:",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "documentation": {}
    },
    {
        "label": "Main",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "peekOfCode": "def Main():\n  \"\"\"Runs the unit test.\"\"\"\n  # We must call _ParseAndStripGTestFlags() before calling\n  # unittest.main().  Otherwise the latter will be confused by the\n  # --gtest_* flags.\n  _ParseAndStripGTestFlags(sys.argv)\n  # The tested binaries should not be writing XML output files unless the\n  # script explicitly instructs them to.\n  if GTEST_OUTPUT_VAR_NAME in os.environ:\n    del os.environ[GTEST_OUTPUT_VAR_NAME]",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "documentation": {}
    },
    {
        "label": "IS_WINDOWS",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "peekOfCode": "IS_WINDOWS = os.name == 'nt'\nIS_CYGWIN = os.name == 'posix' and 'CYGWIN' in os.uname()[0]\nIS_OS2 = os.name == 'os2'\nimport atexit\nimport shutil\nimport tempfile\nimport unittest as _test_module\ntry:\n  import subprocess\n  _SUBPROCESS_MODULE_AVAILABLE = True",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "documentation": {}
    },
    {
        "label": "IS_CYGWIN",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "peekOfCode": "IS_CYGWIN = os.name == 'posix' and 'CYGWIN' in os.uname()[0]\nIS_OS2 = os.name == 'os2'\nimport atexit\nimport shutil\nimport tempfile\nimport unittest as _test_module\ntry:\n  import subprocess\n  _SUBPROCESS_MODULE_AVAILABLE = True\nexcept:",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "documentation": {}
    },
    {
        "label": "IS_OS2",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "peekOfCode": "IS_OS2 = os.name == 'os2'\nimport atexit\nimport shutil\nimport tempfile\nimport unittest as _test_module\ntry:\n  import subprocess\n  _SUBPROCESS_MODULE_AVAILABLE = True\nexcept:\n  import popen2",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "documentation": {}
    },
    {
        "label": "GTEST_OUTPUT_VAR_NAME",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "peekOfCode": "GTEST_OUTPUT_VAR_NAME = 'GTEST_OUTPUT'\n# The environment variable for specifying the path to the premature-exit file.\nPREMATURE_EXIT_FILE_ENV_VAR = 'TEST_PREMATURE_EXIT_FILE'\nenviron = os.environ.copy()\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets/unsets an environment variable to a given value.\"\"\"\n  if value is not None:\n    environ[env_var] = value\n  elif env_var in environ:\n    del environ[env_var]",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "documentation": {}
    },
    {
        "label": "PREMATURE_EXIT_FILE_ENV_VAR",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "peekOfCode": "PREMATURE_EXIT_FILE_ENV_VAR = 'TEST_PREMATURE_EXIT_FILE'\nenviron = os.environ.copy()\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets/unsets an environment variable to a given value.\"\"\"\n  if value is not None:\n    environ[env_var] = value\n  elif env_var in environ:\n    del environ[env_var]\n# Here we expose a class from a particular module, depending on the\n# environment. The comment suppresses the 'Invalid variable name' lint",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "documentation": {}
    },
    {
        "label": "environ",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "peekOfCode": "environ = os.environ.copy()\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets/unsets an environment variable to a given value.\"\"\"\n  if value is not None:\n    environ[env_var] = value\n  elif env_var in environ:\n    del environ[env_var]\n# Here we expose a class from a particular module, depending on the\n# environment. The comment suppresses the 'Invalid variable name' lint\n# complaint.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "peekOfCode": "TestCase = _test_module.TestCase  # pylint: disable=C6409\n# Initially maps a flag to its default value. After\n# _ParseAndStripGTestFlags() is called, maps a flag to its actual value.\n_flag_map = {'source_dir': os.path.dirname(sys.argv[0]),\n             'build_dir': os.path.dirname(sys.argv[0])}\n_gtest_flags_are_parsed = False\ndef _ParseAndStripGTestFlags(argv):\n  \"\"\"Parses and strips Google Test flags from argv.  This is idempotent.\"\"\"\n  # Suppresses the lint complaint about a global variable since we need it\n  # here to maintain module-wide state.",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "documentation": {}
    },
    {
        "label": "_flag_map",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "peekOfCode": "_flag_map = {'source_dir': os.path.dirname(sys.argv[0]),\n             'build_dir': os.path.dirname(sys.argv[0])}\n_gtest_flags_are_parsed = False\ndef _ParseAndStripGTestFlags(argv):\n  \"\"\"Parses and strips Google Test flags from argv.  This is idempotent.\"\"\"\n  # Suppresses the lint complaint about a global variable since we need it\n  # here to maintain module-wide state.\n  global _gtest_flags_are_parsed  # pylint: disable=W0603\n  if _gtest_flags_are_parsed:\n    return",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "documentation": {}
    },
    {
        "label": "_gtest_flags_are_parsed",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "peekOfCode": "_gtest_flags_are_parsed = False\ndef _ParseAndStripGTestFlags(argv):\n  \"\"\"Parses and strips Google Test flags from argv.  This is idempotent.\"\"\"\n  # Suppresses the lint complaint about a global variable since we need it\n  # here to maintain module-wide state.\n  global _gtest_flags_are_parsed  # pylint: disable=W0603\n  if _gtest_flags_are_parsed:\n    return\n  _gtest_flags_are_parsed = True\n  for flag in _flag_map:",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "documentation": {}
    },
    {
        "label": "_temp_dir",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "peekOfCode": "_temp_dir = None\ndef _RemoveTempDir():\n  if _temp_dir:\n    shutil.rmtree(_temp_dir, ignore_errors=True)\natexit.register(_RemoveTempDir)\ndef GetTempDir():\n  global _temp_dir\n  if not _temp_dir:\n    _temp_dir = tempfile.mkdtemp()\n  return _temp_dir",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_test_utils",
        "documentation": {}
    },
    {
        "label": "GTestXMLOutFilesTest",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_outfiles_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_outfiles_test",
        "peekOfCode": "class GTestXMLOutFilesTest(gtest_xml_test_utils.GTestXMLTestCase):\n  \"\"\"Unit test for Google Test's XML output functionality.\"\"\"\n  def setUp(self):\n    # We want the trailing '/' that the last \"\" provides in os.path.join, for\n    # telling Google Test to create an output directory instead of a single file\n    # for xml output.\n    self.output_dir_ = os.path.join(gtest_test_utils.GetTempDir(),\n                                    GTEST_OUTPUT_SUBDIR, \"\")\n    self.DeleteFilesAndDir()\n  def tearDown(self):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_outfiles_test",
        "documentation": {}
    },
    {
        "label": "GTEST_OUTPUT_SUBDIR",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_outfiles_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_outfiles_test",
        "peekOfCode": "GTEST_OUTPUT_SUBDIR = \"xml_outfiles\"\nGTEST_OUTPUT_1_TEST = \"gtest_xml_outfile1_test_\"\nGTEST_OUTPUT_2_TEST = \"gtest_xml_outfile2_test_\"\nEXPECTED_XML_1 = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuites tests=\"1\" failures=\"0\" disabled=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\" name=\"AllTests\">\n  <testsuite name=\"PropertyOne\" tests=\"1\" failures=\"0\" skipped=\"0\" disabled=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"TestSomeProperties\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"PropertyOne\">\n      <properties>\n        <property name=\"SetUpProp\" value=\"1\"/>\n        <property name=\"TestSomeProperty\" value=\"1\"/>",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_outfiles_test",
        "documentation": {}
    },
    {
        "label": "GTEST_OUTPUT_1_TEST",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_outfiles_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_outfiles_test",
        "peekOfCode": "GTEST_OUTPUT_1_TEST = \"gtest_xml_outfile1_test_\"\nGTEST_OUTPUT_2_TEST = \"gtest_xml_outfile2_test_\"\nEXPECTED_XML_1 = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuites tests=\"1\" failures=\"0\" disabled=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\" name=\"AllTests\">\n  <testsuite name=\"PropertyOne\" tests=\"1\" failures=\"0\" skipped=\"0\" disabled=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"TestSomeProperties\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"PropertyOne\">\n      <properties>\n        <property name=\"SetUpProp\" value=\"1\"/>\n        <property name=\"TestSomeProperty\" value=\"1\"/>\n        <property name=\"TearDownProp\" value=\"1\"/>",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_outfiles_test",
        "documentation": {}
    },
    {
        "label": "GTEST_OUTPUT_2_TEST",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_outfiles_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_outfiles_test",
        "peekOfCode": "GTEST_OUTPUT_2_TEST = \"gtest_xml_outfile2_test_\"\nEXPECTED_XML_1 = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuites tests=\"1\" failures=\"0\" disabled=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\" name=\"AllTests\">\n  <testsuite name=\"PropertyOne\" tests=\"1\" failures=\"0\" skipped=\"0\" disabled=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"TestSomeProperties\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"PropertyOne\">\n      <properties>\n        <property name=\"SetUpProp\" value=\"1\"/>\n        <property name=\"TestSomeProperty\" value=\"1\"/>\n        <property name=\"TearDownProp\" value=\"1\"/>\n      </properties>",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_outfiles_test",
        "documentation": {}
    },
    {
        "label": "EXPECTED_XML_1",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_outfiles_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_outfiles_test",
        "peekOfCode": "EXPECTED_XML_1 = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuites tests=\"1\" failures=\"0\" disabled=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\" name=\"AllTests\">\n  <testsuite name=\"PropertyOne\" tests=\"1\" failures=\"0\" skipped=\"0\" disabled=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"TestSomeProperties\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"PropertyOne\">\n      <properties>\n        <property name=\"SetUpProp\" value=\"1\"/>\n        <property name=\"TestSomeProperty\" value=\"1\"/>\n        <property name=\"TearDownProp\" value=\"1\"/>\n      </properties>\n    </testcase>",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_outfiles_test",
        "documentation": {}
    },
    {
        "label": "EXPECTED_XML_2",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_outfiles_test",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_outfiles_test",
        "peekOfCode": "EXPECTED_XML_2 = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuites tests=\"1\" failures=\"0\" disabled=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\" name=\"AllTests\">\n  <testsuite name=\"PropertyTwo\" tests=\"1\" failures=\"0\" skipped=\"0\" disabled=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"TestSomeProperties\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"PropertyTwo\">\n      <properties>\n        <property name=\"SetUpProp\" value=\"2\"/>\n        <property name=\"TestSomeProperty\" value=\"2\"/>\n        <property name=\"TearDownProp\" value=\"2\"/>\n      </properties>\n    </testcase>",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_outfiles_test",
        "documentation": {}
    },
    {
        "label": "GTestXMLOutputUnitTest",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_output_unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_output_unittest",
        "peekOfCode": "class GTestXMLOutputUnitTest(gtest_xml_test_utils.GTestXMLTestCase):\n  \"\"\"\n  Unit test for Google Test's XML output functionality.\n  \"\"\"\n  # This test currently breaks on platforms that do not support typed and\n  # type-parameterized tests, so we don't run it under them.\n  if SUPPORTS_TYPED_TESTS:\n    def testNonEmptyXmlOutput(self):\n      \"\"\"\n      Runs a test program that generates a non-empty XML output, and",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_output_unittest",
        "documentation": {}
    },
    {
        "label": "GTEST_FILTER_FLAG",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_output_unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_output_unittest",
        "peekOfCode": "GTEST_FILTER_FLAG = '--gtest_filter'\nGTEST_LIST_TESTS_FLAG = '--gtest_list_tests'\nGTEST_OUTPUT_FLAG = '--gtest_output'\nGTEST_DEFAULT_OUTPUT_FILE = 'test_detail.xml'\nGTEST_PROGRAM_NAME = 'gtest_xml_output_unittest_'\n# The flag indicating stacktraces are not supported\nNO_STACKTRACE_SUPPORT_FLAG = '--no_stacktrace_support'\n# The environment variables for test sharding.\nTOTAL_SHARDS_ENV_VAR = 'GTEST_TOTAL_SHARDS'\nSHARD_INDEX_ENV_VAR = 'GTEST_SHARD_INDEX'",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_output_unittest",
        "documentation": {}
    },
    {
        "label": "GTEST_LIST_TESTS_FLAG",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_output_unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_output_unittest",
        "peekOfCode": "GTEST_LIST_TESTS_FLAG = '--gtest_list_tests'\nGTEST_OUTPUT_FLAG = '--gtest_output'\nGTEST_DEFAULT_OUTPUT_FILE = 'test_detail.xml'\nGTEST_PROGRAM_NAME = 'gtest_xml_output_unittest_'\n# The flag indicating stacktraces are not supported\nNO_STACKTRACE_SUPPORT_FLAG = '--no_stacktrace_support'\n# The environment variables for test sharding.\nTOTAL_SHARDS_ENV_VAR = 'GTEST_TOTAL_SHARDS'\nSHARD_INDEX_ENV_VAR = 'GTEST_SHARD_INDEX'\nSHARD_STATUS_FILE_ENV_VAR = 'GTEST_SHARD_STATUS_FILE'",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_output_unittest",
        "documentation": {}
    },
    {
        "label": "GTEST_OUTPUT_FLAG",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_output_unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_output_unittest",
        "peekOfCode": "GTEST_OUTPUT_FLAG = '--gtest_output'\nGTEST_DEFAULT_OUTPUT_FILE = 'test_detail.xml'\nGTEST_PROGRAM_NAME = 'gtest_xml_output_unittest_'\n# The flag indicating stacktraces are not supported\nNO_STACKTRACE_SUPPORT_FLAG = '--no_stacktrace_support'\n# The environment variables for test sharding.\nTOTAL_SHARDS_ENV_VAR = 'GTEST_TOTAL_SHARDS'\nSHARD_INDEX_ENV_VAR = 'GTEST_SHARD_INDEX'\nSHARD_STATUS_FILE_ENV_VAR = 'GTEST_SHARD_STATUS_FILE'\nSUPPORTS_STACK_TRACES = NO_STACKTRACE_SUPPORT_FLAG not in sys.argv",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_output_unittest",
        "documentation": {}
    },
    {
        "label": "GTEST_DEFAULT_OUTPUT_FILE",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_output_unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_output_unittest",
        "peekOfCode": "GTEST_DEFAULT_OUTPUT_FILE = 'test_detail.xml'\nGTEST_PROGRAM_NAME = 'gtest_xml_output_unittest_'\n# The flag indicating stacktraces are not supported\nNO_STACKTRACE_SUPPORT_FLAG = '--no_stacktrace_support'\n# The environment variables for test sharding.\nTOTAL_SHARDS_ENV_VAR = 'GTEST_TOTAL_SHARDS'\nSHARD_INDEX_ENV_VAR = 'GTEST_SHARD_INDEX'\nSHARD_STATUS_FILE_ENV_VAR = 'GTEST_SHARD_STATUS_FILE'\nSUPPORTS_STACK_TRACES = NO_STACKTRACE_SUPPORT_FLAG not in sys.argv\nif SUPPORTS_STACK_TRACES:",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_output_unittest",
        "documentation": {}
    },
    {
        "label": "GTEST_PROGRAM_NAME",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_output_unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_output_unittest",
        "peekOfCode": "GTEST_PROGRAM_NAME = 'gtest_xml_output_unittest_'\n# The flag indicating stacktraces are not supported\nNO_STACKTRACE_SUPPORT_FLAG = '--no_stacktrace_support'\n# The environment variables for test sharding.\nTOTAL_SHARDS_ENV_VAR = 'GTEST_TOTAL_SHARDS'\nSHARD_INDEX_ENV_VAR = 'GTEST_SHARD_INDEX'\nSHARD_STATUS_FILE_ENV_VAR = 'GTEST_SHARD_STATUS_FILE'\nSUPPORTS_STACK_TRACES = NO_STACKTRACE_SUPPORT_FLAG not in sys.argv\nif SUPPORTS_STACK_TRACES:\n  STACK_TRACE_TEMPLATE = '\\nStack trace:\\n*'",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_output_unittest",
        "documentation": {}
    },
    {
        "label": "NO_STACKTRACE_SUPPORT_FLAG",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_output_unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_output_unittest",
        "peekOfCode": "NO_STACKTRACE_SUPPORT_FLAG = '--no_stacktrace_support'\n# The environment variables for test sharding.\nTOTAL_SHARDS_ENV_VAR = 'GTEST_TOTAL_SHARDS'\nSHARD_INDEX_ENV_VAR = 'GTEST_SHARD_INDEX'\nSHARD_STATUS_FILE_ENV_VAR = 'GTEST_SHARD_STATUS_FILE'\nSUPPORTS_STACK_TRACES = NO_STACKTRACE_SUPPORT_FLAG not in sys.argv\nif SUPPORTS_STACK_TRACES:\n  STACK_TRACE_TEMPLATE = '\\nStack trace:\\n*'\nelse:\n  STACK_TRACE_TEMPLATE = ''",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_output_unittest",
        "documentation": {}
    },
    {
        "label": "TOTAL_SHARDS_ENV_VAR",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_output_unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_output_unittest",
        "peekOfCode": "TOTAL_SHARDS_ENV_VAR = 'GTEST_TOTAL_SHARDS'\nSHARD_INDEX_ENV_VAR = 'GTEST_SHARD_INDEX'\nSHARD_STATUS_FILE_ENV_VAR = 'GTEST_SHARD_STATUS_FILE'\nSUPPORTS_STACK_TRACES = NO_STACKTRACE_SUPPORT_FLAG not in sys.argv\nif SUPPORTS_STACK_TRACES:\n  STACK_TRACE_TEMPLATE = '\\nStack trace:\\n*'\nelse:\n  STACK_TRACE_TEMPLATE = ''\n  # unittest.main() can't handle unknown flags\n  sys.argv.remove(NO_STACKTRACE_SUPPORT_FLAG)",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_output_unittest",
        "documentation": {}
    },
    {
        "label": "SHARD_INDEX_ENV_VAR",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_output_unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_output_unittest",
        "peekOfCode": "SHARD_INDEX_ENV_VAR = 'GTEST_SHARD_INDEX'\nSHARD_STATUS_FILE_ENV_VAR = 'GTEST_SHARD_STATUS_FILE'\nSUPPORTS_STACK_TRACES = NO_STACKTRACE_SUPPORT_FLAG not in sys.argv\nif SUPPORTS_STACK_TRACES:\n  STACK_TRACE_TEMPLATE = '\\nStack trace:\\n*'\nelse:\n  STACK_TRACE_TEMPLATE = ''\n  # unittest.main() can't handle unknown flags\n  sys.argv.remove(NO_STACKTRACE_SUPPORT_FLAG)\nEXPECTED_NON_EMPTY_XML = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_output_unittest",
        "documentation": {}
    },
    {
        "label": "SHARD_STATUS_FILE_ENV_VAR",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_output_unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_output_unittest",
        "peekOfCode": "SHARD_STATUS_FILE_ENV_VAR = 'GTEST_SHARD_STATUS_FILE'\nSUPPORTS_STACK_TRACES = NO_STACKTRACE_SUPPORT_FLAG not in sys.argv\nif SUPPORTS_STACK_TRACES:\n  STACK_TRACE_TEMPLATE = '\\nStack trace:\\n*'\nelse:\n  STACK_TRACE_TEMPLATE = ''\n  # unittest.main() can't handle unknown flags\n  sys.argv.remove(NO_STACKTRACE_SUPPORT_FLAG)\nEXPECTED_NON_EMPTY_XML = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuites tests=\"26\" failures=\"5\" disabled=\"2\" errors=\"0\" time=\"*\" timestamp=\"*\" name=\"AllTests\" ad_hoc_property=\"42\">",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_output_unittest",
        "documentation": {}
    },
    {
        "label": "SUPPORTS_STACK_TRACES",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_output_unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_output_unittest",
        "peekOfCode": "SUPPORTS_STACK_TRACES = NO_STACKTRACE_SUPPORT_FLAG not in sys.argv\nif SUPPORTS_STACK_TRACES:\n  STACK_TRACE_TEMPLATE = '\\nStack trace:\\n*'\nelse:\n  STACK_TRACE_TEMPLATE = ''\n  # unittest.main() can't handle unknown flags\n  sys.argv.remove(NO_STACKTRACE_SUPPORT_FLAG)\nEXPECTED_NON_EMPTY_XML = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuites tests=\"26\" failures=\"5\" disabled=\"2\" errors=\"0\" time=\"*\" timestamp=\"*\" name=\"AllTests\" ad_hoc_property=\"42\">\n  <testsuite name=\"SuccessfulTest\" tests=\"1\" failures=\"0\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_output_unittest",
        "documentation": {}
    },
    {
        "label": "EXPECTED_NON_EMPTY_XML",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_output_unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_output_unittest",
        "peekOfCode": "EXPECTED_NON_EMPTY_XML = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuites tests=\"26\" failures=\"5\" disabled=\"2\" errors=\"0\" time=\"*\" timestamp=\"*\" name=\"AllTests\" ad_hoc_property=\"42\">\n  <testsuite name=\"SuccessfulTest\" tests=\"1\" failures=\"0\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"Succeeds\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"SuccessfulTest\"/>\n  </testsuite>\n  <testsuite name=\"FailedTest\" tests=\"1\" failures=\"1\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"Fails\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"FailedTest\">\n      <failure message=\"gtest_xml_output_unittest_.cc:*&#x0A;Expected equality of these values:&#x0A;  1&#x0A;  2\" type=\"\"><![CDATA[gtest_xml_output_unittest_.cc:*\nExpected equality of these values:\n  1",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_output_unittest",
        "documentation": {}
    },
    {
        "label": "EXPECTED_FILTERED_TEST_XML",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_output_unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_output_unittest",
        "peekOfCode": "EXPECTED_FILTERED_TEST_XML = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuites tests=\"1\" failures=\"0\" disabled=\"0\" errors=\"0\" time=\"*\"\n            timestamp=\"*\" name=\"AllTests\" ad_hoc_property=\"42\">\n  <testsuite name=\"SuccessfulTest\" tests=\"1\" failures=\"0\" disabled=\"0\" skipped=\"0\"\n             errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"Succeeds\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"SuccessfulTest\"/>\n  </testsuite>\n</testsuites>\"\"\"\nEXPECTED_SHARDED_TEST_XML = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuites tests=\"3\" failures=\"0\" disabled=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\" name=\"AllTests\" ad_hoc_property=\"42\">",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_output_unittest",
        "documentation": {}
    },
    {
        "label": "EXPECTED_SHARDED_TEST_XML",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_output_unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_output_unittest",
        "peekOfCode": "EXPECTED_SHARDED_TEST_XML = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuites tests=\"3\" failures=\"0\" disabled=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\" name=\"AllTests\" ad_hoc_property=\"42\">\n  <testsuite name=\"SuccessfulTest\" tests=\"1\" failures=\"0\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"Succeeds\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"SuccessfulTest\"/>\n  </testsuite>\n  <testsuite name=\"PropertyRecordingTest\" tests=\"1\" failures=\"0\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\" SetUpTestSuite=\"yes\" TearDownTestSuite=\"aye\">\n    <testcase name=\"IntValuedProperty\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"PropertyRecordingTest\">\n      <properties>\n        <property name=\"key_int\" value=\"1\"/>\n      </properties>",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_output_unittest",
        "documentation": {}
    },
    {
        "label": "EXPECTED_NO_TEST_XML",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_output_unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_output_unittest",
        "peekOfCode": "EXPECTED_NO_TEST_XML = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuites tests=\"0\" failures=\"0\" disabled=\"0\" errors=\"0\" time=\"*\"\n            timestamp=\"*\" name=\"AllTests\">\n  <testsuite name=\"NonTestSuiteFailure\" tests=\"1\" failures=\"1\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"\">\n      <failure message=\"gtest_no_test_unittest.cc:*&#x0A;Expected equality of these values:&#x0A;  1&#x0A;  2\" type=\"\"><![CDATA[gtest_no_test_unittest.cc:*\nExpected equality of these values:\n  1\n  2%(stack)s]]></failure>\n    </testcase>",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_output_unittest",
        "documentation": {}
    },
    {
        "label": "GTEST_PROGRAM_PATH",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_output_unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_output_unittest",
        "peekOfCode": "GTEST_PROGRAM_PATH = gtest_test_utils.GetTestExecutablePath(GTEST_PROGRAM_NAME)\nSUPPORTS_TYPED_TESTS = 'TypedTest' in gtest_test_utils.Subprocess(\n    [GTEST_PROGRAM_PATH, GTEST_LIST_TESTS_FLAG], capture_stderr=False).output\nclass GTestXMLOutputUnitTest(gtest_xml_test_utils.GTestXMLTestCase):\n  \"\"\"\n  Unit test for Google Test's XML output functionality.\n  \"\"\"\n  # This test currently breaks on platforms that do not support typed and\n  # type-parameterized tests, so we don't run it under them.\n  if SUPPORTS_TYPED_TESTS:",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_output_unittest",
        "documentation": {}
    },
    {
        "label": "SUPPORTS_TYPED_TESTS",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_output_unittest",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_output_unittest",
        "peekOfCode": "SUPPORTS_TYPED_TESTS = 'TypedTest' in gtest_test_utils.Subprocess(\n    [GTEST_PROGRAM_PATH, GTEST_LIST_TESTS_FLAG], capture_stderr=False).output\nclass GTestXMLOutputUnitTest(gtest_xml_test_utils.GTestXMLTestCase):\n  \"\"\"\n  Unit test for Google Test's XML output functionality.\n  \"\"\"\n  # This test currently breaks on platforms that do not support typed and\n  # type-parameterized tests, so we don't run it under them.\n  if SUPPORTS_TYPED_TESTS:\n    def testNonEmptyXmlOutput(self):",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_output_unittest",
        "documentation": {}
    },
    {
        "label": "GTestXMLTestCase",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_test_utils",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_test_utils",
        "peekOfCode": "class GTestXMLTestCase(gtest_test_utils.TestCase):\n  \"\"\"\n  Base class for tests of Google Test's XML output functionality.\n  \"\"\"\n  def AssertEquivalentNodes(self, expected_node, actual_node):\n    \"\"\"\n    Asserts that actual_node (a DOM node object) is equivalent to\n    expected_node (another DOM node object), in that either both of\n    them are CDATA nodes and have the same value, or both are DOM\n    elements and actual_node meets all of the following conditions:",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_test_utils",
        "documentation": {}
    },
    {
        "label": "GTEST_DEFAULT_OUTPUT_FILE",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_test_utils",
        "description": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_test_utils",
        "peekOfCode": "GTEST_DEFAULT_OUTPUT_FILE = 'test_detail.xml'\nclass GTestXMLTestCase(gtest_test_utils.TestCase):\n  \"\"\"\n  Base class for tests of Google Test's XML output functionality.\n  \"\"\"\n  def AssertEquivalentNodes(self, expected_node, actual_node):\n    \"\"\"\n    Asserts that actual_node (a DOM node object) is equivalent to\n    expected_node (another DOM node object), in that either both of\n    them are CDATA nodes and have the same value, or both are DOM",
        "detail": "Hazel.vendor.yaml-cpp.test.gtest-1.11.0.googletest.test.gtest_xml_test_utils",
        "documentation": {}
    },
    {
        "label": "Writer",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "description": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "peekOfCode": "class Writer(object):\n    def __init__(self, out):\n        self.out = out\n        self.indent = 0\n    def writeln(self, s):\n        self.out.write('%s%s\\n' % (' ' * self.indent, s))\nclass Scope(object):\n    def __init__(self, writer, name, indent):\n        self.writer = writer\n        self.name = name",
        "detail": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "documentation": {}
    },
    {
        "label": "Scope",
        "kind": 6,
        "importPath": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "description": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "peekOfCode": "class Scope(object):\n    def __init__(self, writer, name, indent):\n        self.writer = writer\n        self.name = name\n        self.indent = indent\n    def __enter__(self):\n        self.writer.writeln('%s {' % self.name)\n        self.writer.indent += self.indent\n    def __exit__(self, type, value, traceback):\n        self.writer.indent -= self.indent",
        "detail": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "documentation": {}
    },
    {
        "label": "encode_stream",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "description": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "peekOfCode": "def encode_stream(line):\n    for c in line:\n        if c == '\\n':\n            yield '\\\\n'\n        elif c == '\"':\n            yield '\\\\\"'\n        elif c == '\\t':\n            yield '\\\\t'\n        elif ord(c) < 0x20:\n            yield '\\\\x' + hex(ord(c))",
        "detail": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "documentation": {}
    },
    {
        "label": "encode",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "description": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "peekOfCode": "def encode(line):\n    return ''.join(encode_stream(line))\ndef doc_start(implicit=False):\n    if implicit:\n        return {'emit': '', 'handle': 'OnDocumentStart(_)'}\n    else:\n        return {'emit': 'BeginDoc', 'handle': 'OnDocumentStart(_)'}\ndef doc_end(implicit=False):\n    if implicit:\n        return {'emit': '', 'handle': 'OnDocumentEnd()'}",
        "detail": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "documentation": {}
    },
    {
        "label": "doc_start",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "description": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "peekOfCode": "def doc_start(implicit=False):\n    if implicit:\n        return {'emit': '', 'handle': 'OnDocumentStart(_)'}\n    else:\n        return {'emit': 'BeginDoc', 'handle': 'OnDocumentStart(_)'}\ndef doc_end(implicit=False):\n    if implicit:\n        return {'emit': '', 'handle': 'OnDocumentEnd()'}\n    else:\n        return {'emit': 'EndDoc', 'handle': 'OnDocumentEnd()'}",
        "detail": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "documentation": {}
    },
    {
        "label": "doc_end",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "description": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "peekOfCode": "def doc_end(implicit=False):\n    if implicit:\n        return {'emit': '', 'handle': 'OnDocumentEnd()'}\n    else:\n        return {'emit': 'EndDoc', 'handle': 'OnDocumentEnd()'}\ndef scalar(value, tag='', anchor='', anchor_id=0):\n    emit = []\n    handle = []\n    if tag:\n        emit += ['VerbatimTag(\"%s\")' % encode(tag)]",
        "detail": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "documentation": {}
    },
    {
        "label": "scalar",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "description": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "peekOfCode": "def scalar(value, tag='', anchor='', anchor_id=0):\n    emit = []\n    handle = []\n    if tag:\n        emit += ['VerbatimTag(\"%s\")' % encode(tag)]\n    if anchor:\n        emit += ['Anchor(\"%s\")' % encode(anchor)]\n        handle += ['OnAnchor(_, \"%s\")' % encode(anchor)]\n    if tag:\n        out_tag = encode(tag)",
        "detail": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "documentation": {}
    },
    {
        "label": "comment",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "description": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "peekOfCode": "def comment(value):\n    return {'emit': 'Comment(\"%s\")' % value, 'handle': ''}\ndef seq_start(tag='', anchor='', anchor_id=0, style='_'):\n    emit = []\n    handle = []\n    if tag:\n        emit += ['VerbatimTag(\"%s\")' % encode(tag)]\n    if anchor:\n        emit += ['Anchor(\"%s\")' % encode(anchor)]\n        handle += ['OnAnchor(_, \"%s\")' % encode(anchor)]",
        "detail": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "documentation": {}
    },
    {
        "label": "seq_start",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "description": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "peekOfCode": "def seq_start(tag='', anchor='', anchor_id=0, style='_'):\n    emit = []\n    handle = []\n    if tag:\n        emit += ['VerbatimTag(\"%s\")' % encode(tag)]\n    if anchor:\n        emit += ['Anchor(\"%s\")' % encode(anchor)]\n        handle += ['OnAnchor(_, \"%s\")' % encode(anchor)]\n    if tag:\n        out_tag = encode(tag)",
        "detail": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "documentation": {}
    },
    {
        "label": "seq_end",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "description": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "peekOfCode": "def seq_end():\n    return {'emit': 'EndSeq', 'handle': 'OnSequenceEnd()'}\ndef map_start(tag='', anchor='', anchor_id=0, style='_'):\n    emit = []\n    handle = []\n    if tag:\n        emit += ['VerbatimTag(\"%s\")' % encode(tag)]\n    if anchor:\n        emit += ['Anchor(\"%s\")' % encode(anchor)]\n        handle += ['OnAnchor(_, \"%s\")' % encode(anchor)]",
        "detail": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "documentation": {}
    },
    {
        "label": "map_start",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "description": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "peekOfCode": "def map_start(tag='', anchor='', anchor_id=0, style='_'):\n    emit = []\n    handle = []\n    if tag:\n        emit += ['VerbatimTag(\"%s\")' % encode(tag)]\n    if anchor:\n        emit += ['Anchor(\"%s\")' % encode(anchor)]\n        handle += ['OnAnchor(_, \"%s\")' % encode(anchor)]\n    if tag:\n        out_tag = encode(tag)",
        "detail": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "documentation": {}
    },
    {
        "label": "map_end",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "description": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "peekOfCode": "def map_end():\n    return {'emit': 'EndMap', 'handle': 'OnMapEnd()'}\ndef gen_templates():\n    yield [[doc_start(), doc_start(True)],\n           [scalar('foo'), scalar('foo\\n'), scalar('foo', 'tag'), scalar('foo', '', 'anchor', 1)],\n           [doc_end(), doc_end(True)]]\n    yield [[doc_start(), doc_start(True)],\n           [seq_start()],\n           [[], [scalar('foo')], [scalar('foo', 'tag')], [scalar('foo', '', 'anchor', 1)], [scalar('foo', 'tag', 'anchor', 1)], [scalar('foo'), scalar('bar')], [scalar('foo', 'tag', 'anchor', 1), scalar('bar', 'tag', 'other', 2)]],\n           [seq_end()],",
        "detail": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "documentation": {}
    },
    {
        "label": "gen_templates",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "description": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "peekOfCode": "def gen_templates():\n    yield [[doc_start(), doc_start(True)],\n           [scalar('foo'), scalar('foo\\n'), scalar('foo', 'tag'), scalar('foo', '', 'anchor', 1)],\n           [doc_end(), doc_end(True)]]\n    yield [[doc_start(), doc_start(True)],\n           [seq_start()],\n           [[], [scalar('foo')], [scalar('foo', 'tag')], [scalar('foo', '', 'anchor', 1)], [scalar('foo', 'tag', 'anchor', 1)], [scalar('foo'), scalar('bar')], [scalar('foo', 'tag', 'anchor', 1), scalar('bar', 'tag', 'other', 2)]],\n           [seq_end()],\n           [doc_end(), doc_end(True)]]\n    yield [[doc_start(), doc_start(True)],",
        "detail": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "documentation": {}
    },
    {
        "label": "expand",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "description": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "peekOfCode": "def expand(template):\n    if len(template) == 0:\n        pass\n    elif len(template) == 1:\n        for item in template[0]:\n            if isinstance(item, list):\n                yield item\n            else:\n                yield [item]\n    else:",
        "detail": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "documentation": {}
    },
    {
        "label": "gen_events",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "description": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "peekOfCode": "def gen_events():\n    for template in gen_templates():\n        for events in expand(template):\n            base = list(events)\n            for i in range(0, len(base)+1):\n                cpy = list(base)\n                cpy.insert(i, comment('comment'))\n                yield cpy\ndef gen_tests():\n    for events in gen_events():",
        "detail": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "documentation": {}
    },
    {
        "label": "gen_tests",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "description": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "peekOfCode": "def gen_tests():\n    for events in gen_events():\n        name = 'test' + hashlib.sha1(''.join(yaml.dump(event) for event in events)).hexdigest()[:20]\n        yield {'name': name, 'events': events}\nclass Writer(object):\n    def __init__(self, out):\n        self.out = out\n        self.indent = 0\n    def writeln(self, s):\n        self.out.write('%s%s\\n' % (' ' * self.indent, s))",
        "detail": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "documentation": {}
    },
    {
        "label": "create_emitter_tests",
        "kind": 2,
        "importPath": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "description": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "peekOfCode": "def create_emitter_tests(out):\n    out = Writer(out)\n    includes = [\n        'handler_test.h',\n        'yaml-cpp/yaml.h',\n        'gmock/gmock.h',\n        'gtest/gtest.h',\n    ]\n    for include in includes:\n        out.writeln('#include \"%s\"' % include)",
        "detail": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "documentation": {}
    },
    {
        "label": "DEFINE",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "description": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "peekOfCode": "DEFINE = 'YAML_GEN_TESTS'\nEVENT_COUNT = 5\ndef encode_stream(line):\n    for c in line:\n        if c == '\\n':\n            yield '\\\\n'\n        elif c == '\"':\n            yield '\\\\\"'\n        elif c == '\\t':\n            yield '\\\\t'",
        "detail": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "documentation": {}
    },
    {
        "label": "EVENT_COUNT",
        "kind": 5,
        "importPath": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "description": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "peekOfCode": "EVENT_COUNT = 5\ndef encode_stream(line):\n    for c in line:\n        if c == '\\n':\n            yield '\\\\n'\n        elif c == '\"':\n            yield '\\\\\"'\n        elif c == '\\t':\n            yield '\\\\t'\n        elif ord(c) < 0x20:",
        "detail": "Hazel.vendor.yaml-cpp.test.create-emitter-tests",
        "documentation": {}
    }
]